<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>关于JMX端口被占用</title>
    <link href="/2021/09/30/%E5%85%B3%E4%BA%8EJMX%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A8/"/>
    <url>/2021/09/30/%E5%85%B3%E4%BA%8EJMX%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">netstat -aon|findstr 1099<br>taskkill -f -pid xxxx<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/%E6%9D%82%E5%9B%BE/image.5k8yjqy7f400.png" alt="image"></p>]]></content>
    
    
    
    <tags>
      
      <tag>JMX</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDEA配置Tomcat服务器</title>
    <link href="/2021/09/24/IDEA%E9%85%8D%E7%BD%AETomcat%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2021/09/24/IDEA%E9%85%8D%E7%BD%AETomcat%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="安装Tomcat"><a href="#安装Tomcat" class="headerlink" title="安装Tomcat"></a>安装Tomcat</h3><p>简单说说：在官网下载windows x64的zip包，然后解压到你喜欢的文件夹就好</p><p>点击bin里的startup.bat后访问localhost:8080就能测试了</p><h3 id="IDEA配置"><a href="#IDEA配置" class="headerlink" title="IDEA配置"></a>IDEA配置</h3><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/IDEATomcat/image.2h4grhen1ks0.png" alt="image"></p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/IDEATomcat/image.1w3kmewznt8g.png" alt="image"></p><p>确保项目结构里上图这两项勾选</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/IDEATomcat/image.3v8itzfax420.png" alt="image"></p><p>然后配置上之前解压的路径就行了</p><p><a href="https://blog.csdn.net/qq1808814025/article/details/114752140">如果还有问题就看这个</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Tomcat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSM学习笔记1-Spring</title>
    <link href="/2021/07/15/SSM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/"/>
    <url>/2021/07/15/SSM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><blockquote><p>前置小抱怨：由于一直一来我觉得屏幕不小所以都没隐藏收藏栏导致前面很大一部分的网页截图有收藏栏很难看555，后来隐藏了才发现并没有麻烦多少而且好看多了Orz</p></blockquote><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>前置小知识：JavaSE经典三层架构是<strong>web层、业务/service层、DAO层</strong></p><ul><li>web层：获取浏览器提交的数据，或者将数据返回给浏览器</li><li>业务层：专门用来处理业务逻辑</li><li>DAO层：专门用来和数据库进行交互<br><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.4mh4jf0ladm0.png" alt="（从网上随便找来的一张图）"></li></ul><blockquote><p>tips: Ctrl + O快捷重写方法 </p></blockquote><p>新建XML文件时没有spring配置文件的解决方法：<br><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.5idbc1gw6hc0.png" alt="image"><br><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.6dd3x6skkm00.png" alt="image"></p><p>一般习惯于将配置文件命名为<code>applicationContext.xml</code></p><p>结构及XML案例如图：<br><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.22vv14r8sjcw.png" alt="image"></p><p>测试用例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// spring客户端</span><br>        ApplicationContext app = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>        UserDao userDao = (UserDao) app.getBean(<span class="hljs-string">&quot;userDao&quot;</span>);<br>        userDao.save(); <span class="hljs-comment">// save running...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="总结：Spring的开发步骤"><a href="#总结：Spring的开发步骤" class="headerlink" title="总结：Spring的开发步骤"></a>总结：Spring的开发步骤</h3><ol><li>导入Spring的Maven坐标</li><li>创建Bean（即上例结构图中的UserDao和其实现）</li><li>创建配置文件<code>applicationContext.xml</code></li><li>在配置文件中进行配置</li><li>创建ApplicationContext对象以获得Bean</li></ol><h2 id="Spring配置文件"><a href="#Spring配置文件" class="headerlink" title="Spring配置文件"></a>Spring配置文件</h2><h3 id="Bean"><a href="#Bean" class="headerlink" title="Bean"></a>Bean</h3><p>用于配置对象以便交给Spring来创建<br>默认调用类中的<strong>无参构造函数</strong>，如果没有则失败</p><ul><li>id：Bean实例在Spring中的唯一标识</li><li>class：Bean的<strong>全限定名称</strong>（<code>com.aster.test.impl.TestImpl</code>）<h4 id="范围配置"><a href="#范围配置" class="headerlink" title="范围配置"></a>范围配置</h4></li><li>scope：对象的作用范围<br><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.2c5uo1mwzz0g.png" alt="image"></li></ul><p>（singleton即bean只存在一个，即就算多次getBean也是同一地址）</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.3p5u1jgtfly0.png" alt="image"></p><h4 id="生命周期配置"><a href="#生命周期配置" class="headerlink" title="生命周期配置"></a>生命周期配置</h4><ul><li>init-method：指定类中的初始化方法名称</li><li>destroy-method：指定类中的销毁方法名称<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">...</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;init&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;destroy&quot;</span> <span class="hljs-attr">...</span> /&gt;</span><br></code></pre></td></tr></table></figure><h4 id="Bean的三种实例化"><a href="#Bean的三种实例化" class="headerlink" title="Bean的三种实例化"></a>Bean的三种实例化</h4></li><li>无参构造方式实例化<code>&lt;bean id=&quot;...&quot; class=&quot;...&quot;&gt;</code>（其实这个才是重点Orz）</li><li>工厂<strong>静态</strong>方法实例化</li><li>工厂<strong>实例</strong>方法实例化</li></ul><p><strong>例1：</strong> 写了一个静态工厂<code>com.aster.factory.StaticFactory</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StaticFactory</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> UserDao <span class="hljs-title">getUserDao</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> UserDaoImpl();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后，将</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.aster.dao.impl.UserDaoImpl&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>变为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.aster.factory.StaticFactory&quot;</span> <span class="hljs-attr">factory-method</span>=<span class="hljs-string">&quot;getUserDao&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>效果是一样的</p><p><strong>例2：</strong> 又写了个动态工厂<code>com.aster.factory.DynamicFactory</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DynamicFactory</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> UserDao <span class="hljs-title">getUserDao</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> UserDaoImpl();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>由于是动态工厂，所以不能像静态工厂那样直接使用内部的方法，需要先有一个动态工厂的<strong>实例</strong>才行</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;factory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.aster.factory.DynamicFactory&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">factory-bean</span>=<span class="hljs-string">&quot;factory&quot;</span> <span class="hljs-attr">factory-method</span>=<span class="hljs-string">&quot;getUserDao&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><blockquote><p>tips：选中类名右键，有复制引用的选项</p></blockquote><p>简而言之，就是我们程序代码中不用手动getBean获取dao层bean对象，可以由Spring容器来帮我们完成，dao层bean对象可以做为属性注入到service层bean对象中</p><p>下面这两个从知乎找的回答感觉还不错：<br>一、<br><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.545hyn4rjdg0.png" alt="image"><br>二、依赖注入（DI）和控制反转（IOC）基本是一个意思，因为说起来谁都离不开谁。简单来说，a依赖b，但a不控制b的创建和销毁，仅使用b，那么b的控制权交给a之外处理，这叫控制反转（IOC），而a要依赖b，必然要使用b的instance，那么通过a的接口，把b传入；通过a的构造，把b传入；通过设置a的属性，把b传入；这个过程叫依赖注入（DI）。那么什么是IOC Container？随着DI的频繁使用，要实现IOC，会有很多重复代码，甚至随着技术的发展，有更多新的实现方法和方案，那么有人就把这些实现IOC的代码打包成组件或框架，来避免人们重复造轮子。所以实现IOC的组件或者框架，我们可以叫它IOC Container。</p><p>再来看看课里的说法：<br><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.efpiwerst6o.png" alt="image"></p><p>依赖注入有两种方式：</p><ul><li>构造方法</li><li>set方法</li></ul><h4 id="set方法注入"><a href="#set方法注入" class="headerlink" title="set方法注入"></a>set方法注入</h4><p>假设我们现在有DAO层的UserDao和UserDaoImpl，还有业务层的UserService和UserServiceImpl，<strong>在业务层中，我们也想实现一个save方法，方式是调用DAO层的save方法</strong></p><p><strong>1.都使用Spring，但是不使用依赖注入：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// UserServiceImpl.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span> </span>&#123;<br>        ApplicationContext app = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>        UserDao userDao = (UserDao) app.getBean(<span class="hljs-string">&quot;userDao&quot;</span>);<br>        userDao.save(); <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.aster.dao.UserDao.UserDaoImpl&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.aster.service.UserService.UserServiceImpl&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>这样一来有一个问题，就是UserDao和UserService的耦合度有点高了，目前是在UserService中注入了它所依赖的UserDao，我们要想办法把它们<strong>解耦</strong>——<strong>利用中间件Spring容器来耦合他们</strong>，这样外部的UserDao和UserService的耦合度就变低了（不知道我的理解对不对）</p><p>因为依然存在一定的依赖关系的，所以就算依赖注入，还是需要在UserService中通过set或者构造方法来和UserDao“产生联系”的，但是区别是，<strong>之前是UserService从Spring中自己获取UserDao，而现在UserService只需要躺平，等着Spring把UserDao送上门来即可；因为在xml文件中做了相关的声明，所以Spring知道应该怎么把合适的UserDao注入UserService</strong></p><p><strong>使用依赖注入：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// UserServiceImpl.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> UserDao userDao; <span class="hljs-comment">// 声明一个实例以便使用set</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserDao</span><span class="hljs-params">(UserDao userDao)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userDao = userDao;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span> </span>&#123;<br>        userDao.save(); <span class="hljs-comment">// 在使用了依赖注入之后，这里直接使用userDao就行，Spring已经自动帮你把userDao注入了</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.aster.dao.UserDao.UserDaoImpl&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.aster.service.impl.UserServiceImpl&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDao&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>注意！</strong></p><ol><li>上面的xml中，property的name是<strong>set方法名中，“set”之后的部分首字母变为小写</strong> （set<strong>UserDao</strong> –&gt; <strong>U</strong>serDao –&gt; <strong>u</strong>serDao）</li><li>ref（顾名思义，引用）是xml中<strong>被注入的bean的id</strong></li></ol><blockquote><p>小技巧：要键入例如A = B.get(…)时，打B.get(…).var可以自动补全出A来</p></blockquote><p>然后，运行一下下面这个demo，可以发现确实输出了save running…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ApplicationContext app = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>        UserService userService = (UserService) app.getBean(<span class="hljs-string">&quot;userService&quot;</span>);<br>        userService.save(); <span class="hljs-comment">// save running...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="使用P命名空间注入"><a href="#使用P命名空间注入" class="headerlink" title="使用P命名空间注入"></a>使用P命名空间注入</h5><p>本质上也是set方法注入（但是还是子标签形式的set方法注入更常用啦，因为看起来比较清楚）<br>首先，在xml的<code>&lt;beans&gt;</code>标签内引入P命名空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">&lt;beans<br>    ...<br>    xmlns:p=&quot;http://www.springframework.org/schema/p&quot;<br>    ...&gt;<br></code></pre></td></tr></table></figure><p>其次，需要修改注入方式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.aster.service.impl.UserServiceImpl&quot;</span> <span class="hljs-attr">p:userDao-ref</span>=<span class="hljs-string">&quot;userDao&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="构造方法注入"><a href="#构造方法注入" class="headerlink" title="构造方法注入"></a>构造方法注入</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> UserDao userDao;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UserServiceImpl</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UserServiceImpl</span><span class="hljs-params">(UserDao userDao)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userDao = userDao;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span> </span>&#123;<br>        userDao.save();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.aster.service.impl.UserServiceImpl&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDao&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- arg即argument，参数 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>注意！</strong></p><ol><li>上面的xml中，constructor-arg的name是<strong>构造函数中的参数名</strong> </li><li>ref（顾名思义，引用）是xml中<strong>被注入的bean的id</strong></li></ol><h4 id="依赖注入的数据类型"><a href="#依赖注入的数据类型" class="headerlink" title="依赖注入的数据类型"></a>依赖注入的数据类型</h4><ul><li>普通类型（如：int）</li><li>引用类型（如：类）</li><li>集合</li></ul><p>下面以set方法为例来演示一下<br>比如，在DAO层的save方法时输出用户姓名和年龄<br>由于都是普通类型，所以xml中的<code>ref</code>即引用reference要改为<code>value</code>即值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDao</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;save running...&quot;</span>);<br>        System.out.println(name + <span class="hljs-string">&quot;, &quot;</span> + age);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.aster.dao.impl.UserDaoImpl&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;十六夜紫菀&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;18&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>再来演示一下注入<strong>集合</strong><br>（假设我们有一个用户类com.aster.domain.User，其中有姓名和地址并写了getter sette toString）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDao</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> List&lt;String&gt; strList;<br>    <span class="hljs-keyword">private</span> Map&lt;String, User&gt; userMap;<br>    <span class="hljs-keyword">private</span> Properties properties;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setStrList</span><span class="hljs-params">(List&lt;String&gt; strList)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.strList = strList;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserMap</span><span class="hljs-params">(Map&lt;String, User&gt; userMap)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userMap = userMap;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setProperties</span><span class="hljs-params">(Properties properties)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.properties = properties;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;save running...&quot;</span>);<br>        System.out.println(strList);<br>        System.out.println(userMap);<br>        System.out.println(properties);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 好人做到底，干脆给User也顺便注入一下~~~ --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.aster.domain.User&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;十六夜紫菀&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;addr&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;和十六夜莲一起搭建的深山小屋&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.aster.domain.User&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;十六夜莲&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;addr&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;和十六夜紫菀一起搭建的深山小屋&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.aster.dao.impl.UserDaoImpl&quot;</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;strList&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>十六夜紫菀<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>超级超级喜欢<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>十六夜莲<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userMap&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;uM1&quot;</span> <span class="hljs-attr">value-ref</span>=<span class="hljs-string">&quot;user1&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;uM2&quot;</span> <span class="hljs-attr">value-ref</span>=<span class="hljs-string">&quot;user2&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;properties&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;p1&quot;</span>&gt;</span>izayoi<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;p2&quot;</span>&gt;</span>aster<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;p3&quot;</span>&gt;</span>lotus<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.aster.service.impl.UserServiceImpl&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDao&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>↑ 讲解</strong></p><ol><li>由于strList是List类型，所以在标签之间写<code>&lt;list&gt;</code>来注入List值</li><li>由于Map的元素本质是<strong>键值对（在Java中有Entry类型来表示）</strong>，所以写<code>&lt;entry&gt;</code>来注入键值对；又众所周知，键值对由key和value组成，又双叒叕众所周知，ref是<strong>引用</strong>的意思，所以上面的xml应该不难懂了⑧（enrty里的key是到时候注入到map里的key名）</li><li>可能忘了Properties是啥东西，它和Map很像很像，只不过都是字符串.prop的值要在标签之间写（其实打value后就会发现IDEA没反应）</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">save running<span class="hljs-built_in">..</span>.<br>[十六夜紫菀, 超级超级喜欢, 十六夜莲]<br>&#123;<span class="hljs-attribute">uM1</span>=User&#123;<span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;十六夜紫菀&#x27;</span>, <span class="hljs-attribute">addr</span>=<span class="hljs-string">&#x27;和十六夜莲一起搭建的深山小屋&#x27;</span>&#125;, <span class="hljs-attribute">uM2</span>=User&#123;<span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;十六夜莲&#x27;</span>, <span class="hljs-attribute">addr</span>=<span class="hljs-string">&#x27;和十六夜紫菀一起搭建的深山小屋&#x27;</span>&#125;&#125;<br>&#123;<span class="hljs-attribute">p1</span>=izayoi, <span class="hljs-attribute">p2</span>=aster, <span class="hljs-attribute">p3</span>=lotus&#125;<br></code></pre></td></tr></table></figure><h3 id="引入其他配置文件"><a href="#引入其他配置文件" class="headerlink" title="引入其他配置文件"></a>引入其他配置文件</h3><p>已经可以发现，<code>applicationContext.xml</code>一不小心就会写得很长很长，而且也不好维护</p><p>可以拆成多个配置文件后，在主配置文件中进行引用：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span>&gt;</span><br>    ...<br>    <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;applicationContext-xxx.xml&quot;</span>/&gt;</span><br>    ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Spring相关API"><a href="#Spring相关API" class="headerlink" title="Spring相关API"></a>Spring相关API</h2><h3 id="ApplicationContext接口的实现类"><a href="#ApplicationContext接口的实现类" class="headerlink" title="ApplicationContext接口的实现类"></a>ApplicationContext接口的实现类</h3><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.ypivedindm8.png" alt="image"></p><h3 id="getBean"><a href="#getBean" class="headerlink" title="getBean()"></a>getBean()</h3><p><a href="https://www.bilibili.com/video/BV1WZ4y1P7Bp?p=20">P20</a></p><h3 id="总结-重点API"><a href="#总结-重点API" class="headerlink" title="总结-重点API"></a>总结-重点API</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">ApplicationContext app = <span class="hljs-keyword">new</span> ClasspathXmlApplicationContext(<span class="hljs-string">&quot;xxx.xml&quot;</span>);<br>app.getBean(<span class="hljs-string">&quot;id&quot;</span>); <span class="hljs-comment">// 返回值需要强转，但是在容器内允许存在多个相同的对象，只要id不一样就行</span><br>app.getBean(ClassName.class); <span class="hljs-comment">// 返回值不需要强转，但是容器内只能存在一个</span><br></code></pre></td></tr></table></figure><h2 id="数据源"><a href="#数据源" class="headerlink" title="数据源"></a>数据源</h2><h3 id="理解数据源（连接池）"><a href="#理解数据源（连接池）" class="headerlink" title="理解数据源（连接池）"></a>理解数据源（连接池）</h3><p>数据源是为了提高程序性能出现的。程序运行时，实现实例化数据源，初始化部分连接资源；使用连接资源时，从数据源中获取，使用完毕后再将连接资源归还给数据源。【可以理解为十六夜紫菀和十六夜莲去幻想乡蜜月旅行（雾），他们可以骑幻想乡的共享单车，在离开幻想乡的时候归还共享单车即可】</p><p>常见的有：DBCP, C3P0, BoneCP, Druid等</p><h3 id="配置数据源"><a href="#配置数据源" class="headerlink" title="配置数据源"></a>配置数据源</h3><ol><li>导入数据源的坐标和数据库驱动坐标</li><li>创建数据源对象</li><li>设置数据源的基本连接数据（数据库驱动 地址 用户名密码……）</li><li>使用数据源获取连接资源和归还连接资源</li></ol><p>下面分别给出c3p0和druid的测试案例<br>maven的配置文件里，注意mysql-java-connector的版本要与系统安装的mysql相一致<br>（善用 <a href="https://mvnrepository.com/%EF%BC%89">https://mvnrepository.com/）</a><br>（另外了别忘了在IDEA建立一个MySQL数据源并建立一个test的架构……我太蠢了）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.21<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>c3p0<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>c3p0<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DataSourceTest</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-comment">// c3p0</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span> <span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        ComboPooledDataSource dataSource = <span class="hljs-keyword">new</span> ComboPooledDataSource();<br>        dataSource.setDriverClass(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>        <span class="hljs-comment">// com.mysql.jdbc.Driver也是可以的，但是是旧版，可能有兼容性问题</span><br>        dataSource.setJdbcUrl(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test?serverTimezone=UTC&quot;</span>);<br>        dataSource.setUser(<span class="hljs-string">&quot;root&quot;</span>);<br>        dataSource.setPassword(<span class="hljs-string">&quot;root&quot;</span>);<br><br>        Connection connection = dataSource.getConnection();<br>        System.out.println(connection);<br>        connection.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-comment">// Druid</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span> <span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        DruidDataSource dataSource = <span class="hljs-keyword">new</span> DruidDataSource();<br>        dataSource.setDriverClassName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>        dataSource.setUrl(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test?serverTimezone=UTC&quot;</span>);<br>        dataSource.setUsername(<span class="hljs-string">&quot;root&quot;</span>);<br>        dataSource.setPassword(<span class="hljs-string">&quot;root&quot;</span>);<br><br>        DruidPooledConnection connection = dataSource.getConnection();<br>        System.out.println(connection);<br>        connection.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/video/BV1WZ4y1P7Bp?p=25">（暂且跳过数据源）</a></p><h2 id="注解开发"><a href="#注解开发" class="headerlink" title="注解开发"></a>注解开发</h2><p>相对于xml，更方便，所以大家喜欢注解开发</p><h3 id="Spring原始注解"><a href="#Spring原始注解" class="headerlink" title="Spring原始注解"></a>Spring原始注解</h3><p>主要是替代<code>&lt;Bean&gt;</code>的配置<br><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.6lxp0yc72pc0.png" alt="image"></p><p>下面以经典的由 userDao，调用了userDao的save方法的userService和用于测试的userController 组成的测试案例来举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// UserDaoImpl.java</span><br><span class="hljs-comment">// &lt;bean id=&quot;userDao&quot; class=&quot;com.aster.dao.impl.UserDaoImpl&quot;/&gt;</span><br><span class="hljs-comment">// 等价于下面这句话</span><br><span class="hljs-meta">@Component(&quot;userDap&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDao</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;save running...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// UserServiceImpl.java</span><br><span class="hljs-comment">// &lt;bean id=&quot;userService&quot; class=&quot;com.aster.service.impl.UserServiceImpl&quot;&gt;&lt;/bean&gt;</span><br><span class="hljs-comment">// 等价于下面这句话</span><br><span class="hljs-meta">@Component(&quot;userService&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>&#123;<br><br>    <span class="hljs-comment">// &lt;property name=&quot;userDao&quot; ref=&quot;userDao&quot;/&gt;</span><br>    <span class="hljs-comment">// 等价于下面这两句话</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-meta">@Qualifier(&quot;userDao&quot;)</span><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserDao</span><span class="hljs-params">(UserDao userDao)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userDao = userDao;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span> <span class="hljs-params">()</span> </span>&#123;<br>        userDao.save();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>另外，使用注解开发的时候，需要在xml中<strong>配置组件扫描</strong>，让Spring去找我们的注解（“指定哪个包及其子包下的Bean需要进行扫描以便识别使用注解配置的类、字段和方法”）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  配置组件扫描（告诉Spring去找我的注解  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.aster&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br>`base-package`：配置基本包。Spring会扫描基本包及其子包<br></code></pre></td></tr></table></figure><p>顺便也贴一下测试程序吧</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// UserController.java</span><br>...<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ApplicationContext app = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>        UserService userService = app.getBean(UserService.class);<br>        userService.save();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>根据上面的那个表格，为了便于区分，可以分别在dao, service和web层中将<code>@Component</code>写为对应形式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository(&quot;userDao&quot;)</span><br><span class="hljs-meta">@Service(&quot;userService&quot;)</span><br>(示例程序中的web层是一个假的web层啦，不然就<span class="hljs-meta">@Controller(&quot;userController&quot;)</span>)<br></code></pre></td></tr></table></figure><p>可以把<code>@Autowired</code>和<code>@Qualifier</code>之下的set方法删掉：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-meta">@Qualifier(&quot;userDao&quot;)</span><br><span class="hljs-keyword">private</span> UserDao userDao;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span> <span class="hljs-params">()</span> </span>&#123;<br>    userDao.save();<br>&#125;<br></code></pre></td></tr></table></figure><p>普通数据的注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Value(&quot;google.com&quot;)</span><br><span class="hljs-keyword">private</span> String url; <span class="hljs-comment">// google.com</span><br></code></pre></td></tr></table></figure><blockquote><p>又乱记一个小技巧：IDEA里打/之后会自动补全单标签/&gt;</p></blockquote><h3 id="Spring新注解"><a href="#Spring新注解" class="headerlink" title="Spring新注解"></a>Spring新注解</h3><p>之前略过了数据源，正好实验室在做的小程序用到了druid，这里先写一下之前没写的Spring配置druid数据源：</p><p>一般在开发中，会把配置beans的配置文件和配置数据源的配置文件<strong>分离开</strong>，便于维护（即分开<code>applicationContext.xml</code>和<code>jdbc.properties</code>），那么需要把<code>jdbc.properties</code><strong>导入到</strong><code>applicationContext.xml</code>里：（当然了，以后SpringBoot肯定就不导入了，但还是学一学）</p><p>导入之前，需要引入context命名空间和约束路径：</p><ul><li>命名空间：<code>xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</code></li><li>约束路径：<code>http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</code></li></ul><p>导入时，用到了SPEL（Spring表达式）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pro">jdbc.driver&#x3D;com.mysql.cj.jdbc.Driver<br>jdbc.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;test<br>jdbc.username&#x3D;root<br>jdbc.password&#x3D;root<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  配置组件扫描（告诉Spring去找我的注解  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.aster&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  加载外部的配置文件  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--  这里的name就是按照druid里set方法去掉set之后来写的  --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span> <span class="hljs-params">()</span> </span>&#123;<br>    ApplicationContext app = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>    DataSource dataSource = app.getBean(DataSource.class);<br>    Connection connection = dataSource.getConnection();<br>    System.out.println(connection);<br>    connection.close();<br>&#125;<br></code></pre></td></tr></table></figure><p>在原始注解中，配置文件中的有一些部分仍然是无法省去的，比如上面的导入外部配置文件、外部类的语句，以及组件扫描和import的语句；如果想替代掉他们，需要用到新注解，代码如下：</p><p>（很难写清楚，所以干脆看代码咯）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//SpringConfiguration.java</span><br><span class="hljs-keyword">package</span> com.aster.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.*;<br><br><span class="hljs-meta">@Configuration</span> <span class="hljs-comment">// 声明这个类是Spring的核心配置类</span><br><span class="hljs-meta">@ComponentScan(&quot;com.aster&quot;)</span> <span class="hljs-comment">// 配置组件扫描</span><br><span class="hljs-meta">@Import(DataSourceConfiguration.class)</span> <span class="hljs-comment">// 引入别的配置文件</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringConfiguration</span> </span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//DataSourceConfiguration.java</span><br><span class="hljs-keyword">package</span> com.aster.config;<br><br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSource;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.PropertySource;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span> <span class="hljs-comment">// 导入外部配置</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DataSourceConfiguration</span> </span>&#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String driver;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String url;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-comment">// Spring会将这个方法的返回值以name=&quot;dataSource&quot;存到Spring容器中</span><br>    <span class="hljs-meta">@Bean(&quot;dataSource&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> DataSource <span class="hljs-title">getDataSource</span> <span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>        DruidDataSource dataSource = <span class="hljs-keyword">new</span> DruidDataSource();<br>        dataSource.setDriverClassName(driver);<br>        dataSource.setUrl(url);<br>        dataSource.setUsername(username);<br>        dataSource.setPassword(password);<br>        <span class="hljs-keyword">return</span> dataSource;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//UserController.java</span><br> ...<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>        <span class="hljs-comment">// 注意！由于已经不是使用xml配置了，所以这里有变化！</span><br>        ApplicationContext app = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext(SpringConfiguration.class);<br>        UserService userService = app.getBean(UserService.class);<br>        userService.save();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（我是不会说上面的程序报错了我还不知道错在哪儿的！）</p><p>上述程序中的<code>@Import</code>参数其实是一个数组，可以同时导入多个配置文件：<code>@Import(&#123;a.class, b.class, c.class&#125;)</code></p><p>目前的项目结构：</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.ud5vtutzirk.png" alt="image"></p><h2 id="JUnit"><a href="#JUnit" class="headerlink" title="JUnit"></a>JUnit</h2><p>（摸了，用到再来补上）</p><h2 id="Spring集成web环境"><a href="#Spring集成web环境" class="headerlink" title="Spring集成web环境"></a>Spring集成web环境</h2><p>之前都只是拿假的web层来测试，这次要来真的咯~</p><p>（从这里开始，网课又回到了xml开发，我就还用注解开发吧！）</p><h3 id="前置JavaWeb知识"><a href="#前置JavaWeb知识" class="headerlink" title="前置JavaWeb知识"></a>前置JavaWeb知识</h3><p>（谁让我是弹射起步呢，害）</p><p>动态Java项目的目录：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-comment">-- 项目根目录</span><br><span class="hljs-comment">-- WEB-INF目录</span><br><span class="hljs-comment">-- web.xml：web项目的核心配置文件</span><br><span class="hljs-comment">-- classes目录：放置字节码文件的目录</span><br><span class="hljs-comment">-- lib目录：放置依赖的jar包</span><br></code></pre></td></tr></table></figure><p>新建一个模块，注意咯，是<strong>模块</strong></p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.neh2fbvmx4w.png" alt="image"></p><h3 id="坐标导入"><a href="#坐标导入" class="headerlink" title="坐标导入"></a>坐标导入</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h3><p>新建一个JavaEE的web模块之后，依然是按照之前的结构，只不过web包里的UserController变成UserServelet了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// UserServlet.java</span><br><span class="hljs-keyword">package</span> com.aster.web;<br><br><span class="hljs-keyword">import</span> ...<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        ApplicationContext app = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext(SpringConfiguration.class);<br>        UserService userService = app.getBean(UserService.class);<br>        userService.save();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后，配置一下<code>web.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>UserServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.aster.web.UserServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>UserServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/userServlet<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><p>之后，配置好Tomcat后点击右上角的运行，浏览器会打开Tomcat主页，继续访问<code>/userServlet</code>即可抵达UserServlet了（因为我们啥也没写，所以浏览器自然是一片空白，但是此时IDEA的控制台会输出<code>save running...</code>）</p><h3 id="ContextLoaderListener监听器"><a href="#ContextLoaderListener监听器" class="headerlink" title="ContextLoaderListener监听器"></a>ContextLoaderListener监听器</h3><p>之前，每次获取Bean的时候都要<code>ApplicationContext app = new AnnotationConfigApplicationContext(SpringConfiguration.class);</code>，很麻烦会导致配置文件加载多次，应用上下文加载多次</p><blockquote><p>又到了我不会的JavaWeb小知识时间：在web项目中，可以使用<code>ServletContextListener</code>监听web应用的启动，可以在web应用启动时，就加载Spring配置文件，创建ApplicationContext并存储在最大域<code>servletContext</code>中</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// ContextLoaderListener.java</span><br><span class="hljs-keyword">package</span> com.aster.listener;<br><br><span class="hljs-keyword">import</span> ...<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ContextLoaderListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ServletContextListener</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">contextInitialized</span><span class="hljs-params">(ServletContextEvent servletContextEvent)</span> </span>&#123;<br>        ApplicationContext app = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext(SpringConfiguration.class);<br>        <span class="hljs-comment">// 将Spring的应用上下文对象存储到serveletContext域中</span><br>        ServletContext servletContext = servletContextEvent.getServletContext();<br>        servletContext.setAttribute(<span class="hljs-string">&quot;app&quot;</span>, app);<br>        System.out.println(<span class="hljs-string">&quot;Spring容器创建完毕&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">contextDestroyed</span><span class="hljs-params">(ServletContextEvent servletContextEvent)</span> </span>&#123;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>需要配置一下上面的监听器：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- web.xml --&gt;</span><br>...<br><span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>com.aster.listener.ContextLoaderListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br>...<br></code></pre></td></tr></table></figure><p>然后在UserServlet里调用上下文对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">//ApplicationContext app = new AnnotationConfigApplicationContext(SpringConfiguration.class);</span><br>        ServletContext servletContext = <span class="hljs-keyword">this</span>.getServletContext();<br>        ApplicationContext app = (ApplicationContext) servletContext.getAttribute(<span class="hljs-string">&quot;app&quot;</span>);<br>        UserService userService = app.getBean(UserService.class);<br>        userService.save();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="web-xml设置全局参数"><a href="#web-xml设置全局参数" class="headerlink" title="web.xml设置全局参数"></a>web.xml设置全局参数</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>name<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>value<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">...<br>ServletContext servletContext = <span class="hljs-keyword">this</span>.getServletContext();<br>String s = servletContext.getInitParameter(<span class="hljs-string">&quot;name&quot;</span>);<br>...<br></code></pre></td></tr></table></figure><h3 id="tip"><a href="#tip" class="headerlink" title="tip"></a>tip</h3><p>上面的项目里，app显然是和”app”耦合死的，要是名字很长而且在很多地方用到的话，会很麻烦，所以最好也解耦，即用到app的时候，不需要用到”app”这个名字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//WebApplicationContextUtils.java</span><br><br><span class="hljs-comment">// 建一个获取webapp的工具类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebApplicationContextUtils</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ApplicationContext <span class="hljs-title">getWebApplicationContext</span> <span class="hljs-params">(ServletContext servletContext)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (ApplicationContext) servletContext.getAttribute(<span class="hljs-string">&quot;app&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        ServletContext servletContext = <span class="hljs-keyword">this</span>.getServletContext();<br>        <br>        <span class="hljs-comment">// 注意下面这句话，没有用到&quot;app&quot;哦</span><br>        ApplicationContext app = WebApplicationContextUtils.getWebApplicationContext(servletContext);<br>        <br>        UserService userService = app.getBean(UserService.class);<br>        userService.save();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Spring提供的监听器"><a href="#Spring提供的监听器" class="headerlink" title="Spring提供的监听器"></a>Spring提供的监听器</h3><p>没错，之前那个自己写的白写了（高情商：加深理解）</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.14iuwycfeqrg.png" alt="image"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--  输入Context……就提示了  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br></code></pre></td></tr></table></figure><p>由于我用的注解，这里会遇到一个小问题，启动时，项目会默认在WEB-INF目录下寻找<code>applicationContext.xml</code>，如果找不到就报错。虽然我并没有用到这个文件，但姑且在resources下创建一个空白的<code>applicationContext.xml</code>，再加上这一局话（尽量往前加，名字随便）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- web.xml --&gt;</span><br>...<br><span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h1 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h1><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.3wfjv9skmq80.png" alt="Spring MVC的开发步骤"></p><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>客户端发起请求，服务端接收请求，执行逻辑并进行视图跳转</p><h3 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h3><ol><li>导入SpringMVC相关坐标</li><li>配置SpringMVC核心控制器DispatcherServlet</li><li>创建Controler类视图和界面</li><li>使用注解配置Controller类中业务方法的映射地址</li><li>配置SpringMVC核心文件spring-mvc.xml</li><li>客户端发起请求测试</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>注意仔细看程序哦，就懒得写额外的字了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    配置SpringMVC的前端控制器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--        配置MVC的配置文件的位置--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--        服务器启动时就加载--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p>一般在写MVC时，<strong>web层</strong>的包名都叫<strong>controller</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.aster.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-comment">// 添加到容器</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br>    <span class="hljs-comment">// 配置映射关系</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/quick&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">save</span> <span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Controller save running ...&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success.jsp&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;Hello, World!&lt;/h1&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>spring-mvc.xml（一般和Spring的分开）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">...<br><span class="hljs-comment">&lt;!--Controller的组件扫描--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.aster.controller&quot;</span>/&gt;</span><br>...<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.69t09i7ac340.png" alt="image"></p><p>运行项目后，进入/quick页面就能看见Hello, World!啦！</p><blockquote><p>注意了！有时候网页打不开可能是配置文件里哪里写错了</p></blockquote><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.18o4oq9acow0.png" alt="刚才的项目的流程"></p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.38be7n11c540.png" alt="SpringMVC流程图"></p><h2 id="SpringMVC组件解析"><a href="#SpringMVC组件解析" class="headerlink" title="SpringMVC组件解析"></a>SpringMVC组件解析</h2><h3 id="SpringMVC的执行流程"><a href="#SpringMVC的执行流程" class="headerlink" title="SpringMVC的执行流程"></a>SpringMVC的执行流程</h3><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.mo6mqejbpog.png" alt="image"></p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.4qho60va06g0.png" alt="image"></p><h2 id="SpringMVC注解解析"><a href="#SpringMVC注解解析" class="headerlink" title="SpringMVC注解解析"></a>SpringMVC注解解析</h2><h3 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h3><p><strong>作用：</strong>用于建立请求URL和处理请求的方法之间的对应关系</p><p><strong>位置：</strong></p><ul><li>放在类上时，作为请求URL的第一级访问目录，可以不写</li><li>放在方法上时，作为接在一级目录后的二级目录</li></ul><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/quick&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">save</span> <span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Controller save running ...&quot;</span>);<br>        <span class="hljs-comment">// 这里多加了一层user，所以加上/让Controller从根目录找jsp</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/success.jsp&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.533e5wmnycg0.png" alt="image"></p><p><strong>属性：</strong></p><ul><li>value：用于指定请求的URL（只有一个属性时，默认是value）</li><li>method：用于指定请求的方式<ul><li>method 的预设值是枚举方式的：<code>@RequestMapping(value = &quot;/quick&quot;, method = RequestMethod.GET)</code></li></ul></li><li>params：用于指定限制请求参数的条件（支持简单的表达式）<ul><li>例如<code>params = &#123;&quot;accountName&quot;&#125;</code>表示请求中必须有accountName</li><li><code>params = &#123;&quot;money!100&quot;&#125;</code>表示请求参数中money不能是100</li></ul></li></ul><h3 id="组件扫描"><a href="#组件扫描" class="headerlink" title="组件扫描"></a>组件扫描</h3><p>组件扫描也有这种方法，我就不写了，提一嘴</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.62wkz49s3ps0.png" alt="image"></p><h3 id="XML配置解析"><a href="#XML配置解析" class="headerlink" title="XML配置解析"></a>XML配置解析</h3><p>具体挺麻烦，记个结论就好，详见<a href="%5B%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98%E6%9C%80%E5%85%A8SSM%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B%7CSpring+SpringMVC+MyBatis%E5%85%A8%E8%A6%86%E7%9B%96_SSM%E6%95%B4%E5%90%88_%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9_bilibili%5D(https://www.bilibili.com/video/BV1WZ4y1P7Bp?p=49)">这个</a></p><p>一般来说，.jsp文件都放在<code>webapp : jsp</code>文件夹下，每个Controller都要写<code>return &quot;/jsp/xxx.jsp&quot;</code>，有点小麻烦，可以让mvc自动添加前后缀，这样一来只写<code>return xxx</code>就行</p><p>但我觉得这样不是很直观，不想用（</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.3qzb9u92jls0.png" alt="image"></p><h2 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h2><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.3wqkvir3pl40.png" alt="image"></p><h2 id="SpringMVC的数据响应"><a href="#SpringMVC的数据响应" class="headerlink" title="SpringMVC的数据响应"></a>SpringMVC的数据响应</h2><ol><li><strong>页面跳转</strong><ul><li>直接返回字符串</li><li>通过ModelAndView对象返回</li></ul></li><li><strong>回写数据</strong><ul><li>直接返回字符串</li><li>返回对象或集合</li></ul></li></ol><h3 id="页面跳转"><a href="#页面跳转" class="headerlink" title="页面跳转"></a>页面跳转</h3><h4 id="直接返回字符串"><a href="#直接返回字符串" class="headerlink" title="直接返回字符串"></a>直接返回字符串</h4><p>直接返回字符串时，会将返回的字符串与视图解析器的<strong>前后缀</strong>拼接后跳转</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.ktfblejri5s.png" alt="image"></p><h4 id="返回ModelAndView对象"><a href="#返回ModelAndView对象" class="headerlink" title="返回ModelAndView对象"></a>返回ModelAndView对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/quick2&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">save2</span> <span class="hljs-params">()</span> </span>&#123;<br>    ModelAndView modelAndView = <span class="hljs-keyword">new</span> ModelAndView();<br>    <span class="hljs-comment">// 设置模型数据</span><br>    modelAndView.addObject(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;aster&quot;</span>);<br>    <span class="hljs-comment">// 设置视图名称</span><br>    modelAndView.setViewName(<span class="hljs-string">&quot;/jsp/success.jsp&quot;</span>);<br>    <span class="hljs-keyword">return</span> modelAndView;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Success!&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;Success!Welcome, $&#123;username&#125;&lt;/h1&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.6n4bvtmjl8o0.png"></p><p>也可以不new一个对象，<strong>直接写在参数里</strong>，Spring会<strong>自动</strong>生成一个对象并注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/quick3&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">save3</span> <span class="hljs-params">(ModelAndView modelAndView)</span> </span>&#123;<br>    <span class="hljs-comment">// 设置模型数据</span><br>    modelAndView.addObject(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;aster&quot;</span>);<br>    <span class="hljs-comment">// 设置视图名称</span><br>    modelAndView.setViewName(<span class="hljs-string">&quot;/jsp/success.jsp&quot;</span>);<br>    <span class="hljs-keyword">return</span> modelAndView;<br>&#125;<br></code></pre></td></tr></table></figure><p>也能这么写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/quick4&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">save4</span> <span class="hljs-params">(Model model)</span> </span>&#123;<br>    model.addAttribute(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;aster&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/jsp/success.jsp&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>再提一嘴一个不常用的方式：</p><p>用到了request，依然是在形参里写上，SpringMVC会帮我们注入Tomcat的request（因为不够解耦所以不常用咯）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/quick5&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">save5</span> <span class="hljs-params">(HttpServletRequest request)</span> </span>&#123;<br>    request.setAttribute(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;十六夜紫菀&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/jsp/success.jsp&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="回写数据"><a href="#回写数据" class="headerlink" title="回写数据"></a>回写数据</h3><h4 id="直接回写字符串"><a href="#直接回写字符串" class="headerlink" title="直接回写字符串"></a>直接回写字符串</h4><blockquote><p>在web基础阶段，客户端访问服务器端想回写字符串，只需要<code>response.getWriter.print(&quot;Hello&quot;)</code>即可</p></blockquote><p>那么，可以：</p><p><strong>1.（不推荐）</strong>通过SpringMVC注入response对象，使用<code>response.getWriter.print(&quot;Hello&quot;)</code>回写数据；此时不需要视图跳转，业务返回值为void</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/quick6&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save6</span> <span class="hljs-params">(HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    response.getWriter().print(<span class="hljs-string">&quot;hello&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.34a9bglqsig0.png" alt="image"></p><p>但是正如页面跳转里提到的，这种方法不够解耦，建议用下面这种：</p><p><strong>2.<strong>和页面跳转的直接返回字符串一样，直接返回字符串，但是为了</strong>让Spring把这种方式和页面跳转区分开</strong>，需要加注解<code>@ResponseBody</code>告诉Spring，该方法返回的字符串不是跳转，是<strong>直接在HTTP响应体中返回</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/quick7&quot;)</span><br><span class="hljs-meta">@ResponseBody</span> <span class="hljs-comment">// 告知SpringMVC，不进行页面跳转，直接进行数据响应</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">save7</span> <span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>应用：返回json格式</strong></p><p>（建了个com.aster.domain.User用于模拟一个用户，实际中一般是从数据库查询）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/quick8&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">save8</span> <span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException </span>&#123;<br>    User user = <span class="hljs-keyword">new</span> User();<br>    user.setUsername(<span class="hljs-string">&quot;Lotus&quot;</span>);<br>    user.setAge(<span class="hljs-number">16</span>);<br>    <span class="hljs-comment">// 使用json转换工具将对象转为json格式的字符串</span><br>    ObjectMapper objectMapper = <span class="hljs-keyword">new</span> ObjectMapper();<br>    <span class="hljs-keyword">return</span> objectMapper.writeValueAsString(user);<br>&#125;<br></code></pre></td></tr></table></figure><p>需要导入转换工具的坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-annotations<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.3wt51d74eba0.png" alt="image"></p><h4 id="返回对象或集合"><a href="#返回对象或集合" class="headerlink" title="返回对象或集合"></a>返回对象或集合</h4><p><strong>1.（不推荐）</strong>我们想要返回对象或集合时，SpringMVC能自动帮我们转换成json格式的字符串</p><p>那么我们要<strong>提前配置好SpringMVC的RequestMappingHandlerAdapter</strong>（处理器适配器），让HandleAdapter学会Jackson转换器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    配置处理器映射器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;messageConverters&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>@ResponseBody</code>依然需要，因为这里是SpringMVC自动帮忙转成了字符串而已，本质还是返回字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/quick9&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">save9</span> <span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException </span>&#123;<br>    User user = <span class="hljs-keyword">new</span> User();<br>    user.setUsername(<span class="hljs-string">&quot;Lotus&quot;</span>);<br>    user.setAge(<span class="hljs-number">16</span>);<br>    <span class="hljs-keyword">return</span> user;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2.<strong>上面的方法有点麻烦，用</strong>mvc注解驱动</strong><code>&lt;mvc:annotation-driven/&gt;</code>会简单一点</p><p>在SpringMVC的三大组件中，<strong>处理器映射器、处理器适配器、视图解析器</strong>被称为SpringMVC的三大组件</p><p>使用<code>&lt;mvc:annotation-driven/&gt;</code>自动加载RequestMappingHandlerMapping（处理器映射器）、RequestMappingHandlerAdapter（处理器适配器）；可以在spring-mvc.xml中使用<code>&lt;mvc:annotation-driven/&gt;</code>替代注解处理器和适配器的配置</p><p><strong>同时</strong>，使用<code>&lt;mvc:annotation-driven/&gt;</code>时，默认底层就会<strong>集成Jackson</strong>进行对象或集合的json格式字符串转换</p><p>————————————————</p><p>别忘了导入mvn命名空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/context</span></span><br><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/mvc</span></span><br><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">       &quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  Controller的组件扫描  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.aster.controller&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  mvc的注解驱动 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其他的和 <strong>1.</strong> 一样，是不是简单了呢~</p><p><strong>这句注解驱动很重要，以后的mvc配置文件都别忘了写哦</strong></p><h2 id="SpringMVC的请求"><a href="#SpringMVC的请求" class="headerlink" title="SpringMVC的请求"></a>SpringMVC的请求</h2><h3 id="获得请求参数"><a href="#获得请求参数" class="headerlink" title="获得请求参数"></a>获得请求参数</h3><blockquote><p>客户端请求参数的格式是<code>name=value&amp;name=value... ...</code></p><p>服务器端要获得请求的参数，有时还需要进行数据的封装</p></blockquote><p>SpringMVC可以接收如下类型的数据：</p><ul><li>基本类型数据</li><li>POJO类型参数（简单JavaBean）</li><li>数组类型参数</li><li>集合类型参数</li></ul><h4 id="获得基本类型参数"><a href="#获得基本类型参数" class="headerlink" title="获得基本类型参数"></a>获得基本类型参数</h4><p>当Controller中业务方法的<strong>参数名</strong>与<strong>请求参数的name</strong>一致时，参数值会<strong>自动映射匹配</strong></p><p>在这里，尽管是void，但是仍然需要写上<code>@ResponseBody</code>，只不过这次响应体是空的罢了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/quick&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span> <span class="hljs-params">(String username, <span class="hljs-keyword">int</span> age)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        System.out.println(username); <span class="hljs-comment">// Lotus</span><br>        System.out.println(age); <span class="hljs-comment">// 16</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/aster_spring_web_war_exploded/u</span>ser/quick?username=Lotus&amp;age=<span class="hljs-number">16</span><br></code></pre></td></tr></table></figure><h4 id="获得POJO类型参数"><a href="#获得POJO类型参数" class="headerlink" title="获得POJO类型参数"></a>获得POJO类型参数</h4><p>当Controller中业务方法的<strong>POJO参数的属性名</strong>与<strong>请求参数的name</strong>一致时，参数值会<strong>自动映射匹配</strong></p><p>User需要重写toString和getter/setter哦</p><p>比如下面，User有username和age属性，url里传入数值之后，SpringMVC<strong>自动</strong>帮我们封装成了一个User对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/quick&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span> <span class="hljs-params">(User user)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        System.out.println(user); <span class="hljs-comment">// User&#123;username=&#x27;Lotus&#x27;, age=16&#125;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/aster_spring_web_war_exploded/u</span>ser/quick?username=Lotus&amp;age=<span class="hljs-number">16</span><br></code></pre></td></tr></table></figure><h4 id="获得数组类型参数"><a href="#获得数组类型参数" class="headerlink" title="获得数组类型参数"></a>获得数组类型参数</h4><p>比如，请求了一大堆数据，<strong>名字都一样</strong>，但是<strong>值不一样</strong>，那么就可以存到数组里</p><p>当Controller中业务方法的<strong>数组名称</strong>与<strong>请求参数的name</strong>一致时，参数值会<strong>自动映射匹配</strong></p><p>（数组默认直接输出是打印地址，这里转成List方便输出）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/quick&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span> <span class="hljs-params">(String[] strs)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        System.out.println(Arrays.asList(strs)); <span class="hljs-comment">// [Izayoi, Aster, Izayoi, Lotus]</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/aster_spring_web_war_exploded/u</span>ser/quick?strs=Izayoi&amp;strs=Aster&amp;strs=Izayoi&amp;strs=Lotus<br></code></pre></td></tr></table></figure><h4 id="获得集合类型参数"><a href="#获得集合类型参数" class="headerlink" title="获得集合类型参数"></a>获得集合类型参数</h4><p><strong>1.（不推荐）</strong>获得集合参数时，要<strong>将集合包装到一个POJO中</strong>才行 <em>（“SpringMVC是有极限的！”）</em></p><p>即，<strong>不能直接封装集合</strong></p><p>我们需要创建一个<strong>VO对象</strong>（ValueObject / ViewObject）来包装集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.aster.domain;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VO</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> List&lt;User&gt; userList;<br><br>    <span class="hljs-comment">// getter setter toString</span><br>&#125;<br></code></pre></td></tr></table></figure><p>由于使用这种方法时，VO内的userList用上面的那种GET方法提交数据会很麻烦（url里要按照格式写一大堆），所以我们新开一个jsp，用POST提交表单</p><p>感觉这方法不是很靠谱，先<a href="https://www.bilibili.com/video/BV1WZ4y1P7Bp?p=65">丢个连接用到再看</a></p><p><strong>2.<strong>当使用</strong>ajax</strong>提交时，可以指定contentType为json格式，这样一来，在方法<strong>参数</strong>位置使用<code>@RequestBody</code>后就可以<strong>直接接收集合数据</strong>，而无需使用POJO进行封装</p><p>在webapp下新建一个ajax.js，并在js子目录下导入jQuery的js文件</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.5wmsyvtpjko0.png" alt="image"></p><p>ajax.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;script src=&quot;$&#123;pageContext.request.contextPath&#125;/js/jquery-3.6.0.js&quot;&gt;&lt;/script&gt;<br>    &lt;script&gt;<br>        <span class="hljs-keyword">var</span> userList = [];<br>        <span class="hljs-comment">// 虽然教程是new Array但是IDEA一个劲儿推荐我写[]</span><br>        userList.push(&#123;username: <span class="hljs-string">&quot;Lotus&quot;</span>, age: <span class="hljs-number">16</span>&#125;);<br>        userList.push(&#123;username: <span class="hljs-string">&quot;Aster&quot;</span>, age: <span class="hljs-number">18</span>&#125;);<br><br>        $.ajax(&#123;<br>            type:<span class="hljs-string">&quot;POST&quot;</span>,<br>            url:<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/user/quick&quot;</span>,<br>            data:JSON.stringify(userList), <span class="hljs-comment">// 转为json格式</span><br>            contentType:<span class="hljs-string">&quot;application/json;charset:utf-8&quot;</span><br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/quick&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span> <span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> List&lt;User&gt; userList)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        System.out.println(userList);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行后访问/ajax.jsp子页面，打开控制台发现报错了：</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image-20211001170719969.xgbusky0txs.png" alt="image-20211001170719969"></p><p>这里涉及到静态资源访问权限问题，后面再说。现在姑且在spring-mvc.xml里添加：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:resources</span> <span class="hljs-attr">mapping</span>=<span class="hljs-string">&quot;/js/**&quot;</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;/js/&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>然后再次访问就可以了</p><p>可以看到，总共发起了三次请求：</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.6if2jcopxnw0.png" alt="image"></p><p>第一次请求是我们主动去访问了/ajax.jsp</p><p>第二次请求是因为ajax.jsp里导入了jquery</p><p>第三次请求是我们写的ajax里发请求去寻找了quick方法</p><p>在IDEA控制台里也输出了数据：<code>[User&#123;username=&#39;Lotus&#39;, age=16&#125;, User&#123;username=&#39;Aster&#39;, age=18&#125;]</code></p><h5 id="报错详解"><a href="#报错详解" class="headerlink" title="报错详解"></a>报错详解</h5><p>上面第一次之所以报错，是因为ajax发起导入jquery-3.6.0.js的请求时，默认也像找quick那样去找映射了，但是显然我们并没有像<code>@RequestMapping(&quot;/quick&quot;)</code>那样配置jquery-3.6.0.js的映射，那么ajax就傻眼了。添加的这句话：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:resources</span> <span class="hljs-attr">mapping</span>=<span class="hljs-string">&quot;/js/**&quot;</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;/js/&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>意思就是，当访问了<code>/js/**</code>映射的时候，开放<code>/js/</code>目录的文件访问权限</p><p>比如说，如果在webapp下有个img存图片，那就加上这一句：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:resources</span> <span class="hljs-attr">mapping</span>=<span class="hljs-string">&quot;/img/**&quot;</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;/img/&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h5 id="当然了，也可以直接只加这一句话："><a href="#当然了，也可以直接只加这一句话：" class="headerlink" title="当然了，也可以直接只加这一句话："></a>当然了，也可以直接只加这一句话：</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>意思是，<strong>当SpringMVC找不到资源时，交给原始容器（Tomcat）去寻找资源</strong></p><h3 id="配置全局乱码过滤器"><a href="#配置全局乱码过滤器" class="headerlink" title="配置全局乱码过滤器"></a>配置全局乱码过滤器</h3><p>有时，当post请求时（比如form.jsp），数据会出现乱码，我们可以设置一个过滤器来进行乱码的过滤</p><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="参数绑定注解-RequestParam"><a href="#参数绑定注解-RequestParam" class="headerlink" title="参数绑定注解@RequestParam"></a>参数绑定注解@RequestParam</h3><p>当请求的参数名称与Controller的业务方法参数名称不一致时，就需要通过<code>@RequestParam</code>注解显示的绑定</p><p>（说人话就是，save里的参数叫username，但是url里写的是name，像让username获得name的值）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/quick&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;name&quot;)</span> String username)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        System.out.println(username); <span class="hljs-comment">// Lotus</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/aster_spring_web_war_exploded/u</span>ser/quick?name=Lotus<br></code></pre></td></tr></table></figure><p><code>@RequestParam</code>的参数：</p><ul><li>value：请求的参数名称</li><li>require：此参数是否必须（默认为true）；如果必须，那么缺少此参数时会报错</li><li>defaultValue：默认值</li></ul><h3 id="获得RESTful风格的参数"><a href="#获得RESTful风格的参数" class="headerlink" title="获得RESTful风格的参数"></a>获得RESTful风格的参数</h3><blockquote><p>RESTful是一种软件架构风格、设计风格，提供了一组设计原则和约束条件，主要用于客户端和服务器交互类的软件；基于这个风格设计的软件可以更简洁、更有层次、更易于实现缓存机制等。</p></blockquote><blockquote><p>RESTful风格的请求是使用<strong>url + 请求方式</strong>表示一次请求，HTTP协议里四种请求方式如下：</p><ul><li>GET：用于获取资源</li><li>POST：用于新建资源</li><li>PUT：用于更新资源</li><li>DELETE：用于删除资源</li></ul><p>例如：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">/<span class="hljs-keyword">user</span>/<span class="hljs-number">1</span> <span class="hljs-keyword">GET</span>：得到id=<span class="hljs-number">1</span>的<span class="hljs-keyword">user</span><br>/<span class="hljs-keyword">user</span>/<span class="hljs-number">1</span> <span class="hljs-keyword">DELETE</span>：删除id=<span class="hljs-number">1</span>的<span class="hljs-keyword">user</span><br>/<span class="hljs-keyword">user</span>/<span class="hljs-number">1</span> PUT：更新id=<span class="hljs-number">1</span>的<span class="hljs-keyword">user</span><br>/<span class="hljs-keyword">user</span> POST：新增<span class="hljs-keyword">user</span><br></code></pre></td></tr></table></figure></blockquote><p>在上述地址<code>/user/1</code>中，<strong>1</strong>是我们要获得的参数，我们可以使用<code>@PathVariable</code>进行占位符参数绑定：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/quick/&#123;username&#125;&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;username&quot;)</span> String username)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        System.out.println(username); <span class="hljs-comment">// Aster</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意啦，这里url的格式变了：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/aster_spring_web_war_exploded/u</span>ser<span class="hljs-regexp">/quick/</span>Aster<br></code></pre></td></tr></table></figure><h3 id="自定义类型转换器"><a href="#自定义类型转换器" class="headerlink" title="自定义类型转换器"></a>自定义类型转换器</h3><p>MVC默认有一些转换器，比如String转int</p><p>不够用的时候（比如日期），就需要我们自定义了</p><p>步骤：</p><ol><li>写一个转换器类，实现Converter接口</li><li>在配置文件中声明转换器</li><li>在<code>&lt;annotation-driven&gt;</code>中引用转换器</li></ol><p>比如，java默认的日期格式是yyyy/MM/dd，要是url里是yyyy-MM-dd的话会报错，我们需要自己写一个转换器</p><blockquote><p><code>Converter&lt;S, T&gt;</code>：convert S to T</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.aster.converter;<br><br><span class="hljs-keyword">import</span> ...<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DateConverter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Converter</span>&lt;<span class="hljs-title">String</span>, <span class="hljs-title">Date</span>&gt; </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Date <span class="hljs-title">convert</span><span class="hljs-params">(String dateStr)</span> </span>&#123;<br>        SimpleDateFormat format = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>); <span class="hljs-comment">// （请去复习之前的java笔记Orz）</span><br>        Date date = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            date = format.parse(dateStr);<br>        &#125; <span class="hljs-keyword">catch</span> (ParseException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> date;<br>    &#125;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>spring-mvc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  mvc的注解驱动 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span> <span class="hljs-attr">conversion-service</span>=<span class="hljs-string">&quot;conversionService2&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!-- 声明转换器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;conversionService2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.context.support.ConversionServiceFactoryBean&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;converters&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.aster.converter.DateConverter&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="获得Servlet相关API"><a href="#获得Servlet相关API" class="headerlink" title="获得Servlet相关API"></a>获得Servlet相关API</h3><p>MVC支持使用原始ServletAPI对象作为控制器方法的参数进行注入，常用的对象如下：</p><ul><li>HttpServletRequest</li><li>HttpServletResponse</li><li>HttpSession</li></ul><h3 id="获得请求头"><a href="#获得请求头" class="headerlink" title="获得请求头"></a>获得请求头</h3><blockquote><p>众所周知，HTTP请求有请求行、请求头和请求数据</p></blockquote><p>偶尔，我们也需要用到请求头</p><p><strong>1.</strong> 使用<code>@RequestHeader</code>（相当于web里的<code>request.getHeader(name)</code>）</p><p>有两个属性：</p><ul><li>value：请求头的名称</li><li>required：是否必须携带此请求头（比如，如果值为true，从网页里又没有抓到这个头，那么就会禁止访问）</li></ul><p>比如，我们随便抓一个这里面的请求头（好怪的DevTools中文翻译emm）</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.ftc23kos36w.png" alt="image"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/quick&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">(<span class="hljs-meta">@RequestHeader(value = &quot;User-Agent&quot;, required = false)</span>String user_agent)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        System.out.println(user_agent);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/aster_spring_web_war_exploded/u</span>ser/quick<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Mozilla</span>/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>; Win<span class="hljs-number">64</span>; x<span class="hljs-number">64</span>) AppleWebKit/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> (KHTML, like Gecko) Chrome/<span class="hljs-number">94</span>.<span class="hljs-number">0</span>.<span class="hljs-number">4606</span>.<span class="hljs-number">61</span> Safari/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> Edg/<span class="hljs-number">94.0.992.31</span><br></code></pre></td></tr></table></figure><p><strong>2.</strong> 使用<code>@CookieValue</code>可以直接获取Cookie 的值，用法相同</p><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p>文件上传客户端三要素：</p><ul><li>表单项<code>type = &quot;file&quot;</code></li><li>表单的提交方式是POST</li><li>表单的enctype属性是<strong>多部分表单形式</strong>，即<code>enctype = &quot;multipart/form-data&quot;</code></li></ul><p>upload.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;form action=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/user/quick&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span> enctype=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;<br>        名称&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span>&gt;&lt;br/&gt;<br>        文件&lt;input type=<span class="hljs-string">&quot;file&quot;</span> name=<span class="hljs-string">&quot;uploadFile&quot;</span>&gt;&lt;br/&gt;<br>        &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;提交&quot;</span>&gt;<br>    &lt;/form&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.4psnt95lh1c0.png" alt="image"></p><h4 id="文件上传原理"><a href="#文件上传原理" class="headerlink" title="文件上传原理"></a>文件上传原理</h4><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.28w37cmfvzb4.png" alt="image"></p><h4 id="单文件上传"><a href="#单文件上传" class="headerlink" title="单文件上传"></a>单文件上传</h4><p>步骤</p><ol><li>导入FileUpload和io坐标（MVC框架的文件上传用到了FileUpload）</li><li>配置文件上传解析器</li><li>编写文件上传代码</li></ol><h5 id="导坐标"><a href="#导坐标" class="headerlink" title="导坐标"></a>导坐标</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="配置文件上传解析器"><a href="#配置文件上传解析器" class="headerlink" title="配置文件上传解析器"></a>配置文件上传解析器</h5><p>spring-mvc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;multipartResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 上传文件的总大小(5GB) --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxUploadSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;5242800&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- 上传单个文件的大小 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxUploadSizePerFile&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;5242800&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- 上传文件的编码类型 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="编写文件上传编码"><a href="#编写文件上传编码" class="headerlink" title="编写文件上传编码"></a>编写文件上传编码</h5><p>老规矩，参数名一致的时候，Spring会自动注入，在这里就是和upload.jsp中这一句里的name一致：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">文件&lt;input type=<span class="hljs-string">&quot;file&quot;</span> name=<span class="hljs-string">&quot;uploadFile&quot;</span>&gt;&lt;br/&gt;<br></code></pre></td></tr></table></figure><p>Spring会将文件封装为MultipartFile类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/quick&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">(String username, MultipartFile uploadFile)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        System.out.println(username); <span class="hljs-comment">// IzayoiAster</span><br>        <span class="hljs-comment">// 获得上传文件名称（不是表单里的name，而是他本身的名称）</span><br>        String originalFilename = uploadFile.getOriginalFilename();<br>        uploadFile.transferTo(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;E:\\test\\&quot;</span> + originalFilename));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.2m26yd98jwi0.png" alt="image"></p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.6rkfkmlaf2k0.png" alt="image"></p><h4 id="多文件上传"><a href="#多文件上传" class="headerlink" title="多文件上传"></a>多文件上传</h4><p>结合之前学到的传参为数组，懂的都懂，不多说：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;form action=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/user/quick&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span> enctype=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;<br>    名称&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span>&gt;&lt;br/&gt;<br>    文件<span class="hljs-number">1</span>&lt;input type=<span class="hljs-string">&quot;file&quot;</span> name=<span class="hljs-string">&quot;uploadFile&quot;</span>&gt;&lt;br/&gt;<br>    文件<span class="hljs-number">2</span>&lt;input type=<span class="hljs-string">&quot;file&quot;</span> name=<span class="hljs-string">&quot;uploadFile&quot;</span>&gt;&lt;br/&gt;<br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;提交&quot;</span>&gt;<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/quick&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">(String username, MultipartFile[] uploadFile)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        System.out.println(username);<br>        <span class="hljs-keyword">for</span>(MultipartFile multipartFile : uploadFile) &#123; <span class="hljs-comment">// 别忘了这种for循环哦~</span><br>            String originalFilename = multipartFile.getOriginalFilename();<br>            multipartFile.transferTo(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;E:\\test\\&quot;</span> + originalFilename));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="JdbcTemplate基本使用"><a href="#JdbcTemplate基本使用" class="headerlink" title="JdbcTemplate基本使用"></a>JdbcTemplate基本使用</h1><p>由于有Mybatis所以先跳了（逃）</p>]]></content>
    
    
    
    <tags>
      
      <tag>SSM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习笔记1</title>
    <link href="/2021/06/04/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/"/>
    <url>/2021/06/04/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</url>
    
    <content type="html"><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>学习python也就是为了当个工具，先学个大概不深入，暂且放一放，开始学主语言Java</p><p>因为Java语法方面和C++实在是很像，所以略过一大堆东西，直接从一半开始吧<br>顺便，还没看那个核心技术卷；来个前置知识吧：</p><blockquote><p>Java的包（package）和类，可以理解成文件夹和文件，并且实际上在系统里就是以文件夹和文件的方式来存放的<br>跨包调用时，需要import，和python一样的操作<br>IDEA中，例如src是模块，包含包和类</p><p>在在包A下如果还想建一个包B，包B应命名为A.B（实际上表现为文件夹A内的文件夹B）</p></blockquote><p>那么开始吧，从字符串开始</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><blockquote><p>再复习一遍，API，Application Programming Interface，应用程序编程接口<br>Java API：JDK中提供的各种功能的Java类</p></blockquote><p>几个小技巧（虽然和API关系不大啦）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-comment">//技巧零：输入 psvm</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span> <span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// new之后的Scanner是ctor哦~ System.in是ctor参数</span><br>        Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.in);<br><br>        <span class="hljs-comment">//技巧一：sc.nextLine()</span><br>        <span class="hljs-comment">//打完上面这句，Ctrl + Alt + V，自动生成下面这句</span><br>        String line = sc.nextLine();<br><br>        <span class="hljs-comment">//技巧二：输入sout，即可自动联想下面这句</span><br>        System.out.println(line);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>特点：字符串不可变，创建后值不能更改，但是可以被共享</p><h4 id="String的构造方法"><a href="#String的构造方法" class="headerlink" title="String的构造方法"></a>String的构造方法</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>public String()</td><td>空字符串</td></tr><tr><td>public String(char[] chs)</td><td>根据字符数组创建</td></tr><tr><td>public String(byte[] bys)</td><td>根据字节数组创建</td></tr><tr><td>String s = “abc”</td><td>直接赋值</td></tr></tbody></table><h4 id="String的特点"><a href="#String的特点" class="headerlink" title="String的特点"></a>String的特点</h4><ol><li>通过<code>new</code>方式建立的字符串，就算值相同，地址是不同的<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">char</span>[] chs = &#123;<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>&#125;<br>String a = <span class="hljs-keyword">new</span> String(chs);<br>String b = <span class="hljs-keyword">new</span> String(chs);<br></code></pre></td></tr></table></figure></li><li>以<code>&quot;&quot;</code>方式给出的字符串，只要字符序列相同，无论出现几次，JVM都只会建立一个String对象，并在字符串池中维护<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">String a = <span class="hljs-string">&quot;abc&quot;</span>;<br>String b = <span class="hljs-string">&quot;abc&quot;</span>;<br><span class="hljs-comment">//ab本质上是同一个对象</span><br></code></pre></td></tr></table></figure><h4 id="String的比较"><a href="#String的比较" class="headerlink" title="String的比较"></a>String的比较</h4></li></ol><p><strong>注意！</strong><br>java中的数据类型，可分为两类：<br>1.基本数据类型，也称原始数据类型。byte,short,char,int,long,float,double,boolean之间的比较，应用 == ，比较的是他们的值。<br>2.复合数据类型(类)，当他们用 == 进行比较的时候，比较的是他们在内存中的<strong>存放地址</strong>，所以，除非是同一个new出来的对象，他们的比较后的结果为true，否则比较后结果为false。 JAVA当中所有的类都是继承于Object这个基类的，在Object中的基类中定义了一个<strong>equals</strong>的方法，这个方法的初始行为是比较对象的内存地 址，但在一些类库当中这个方法被覆盖掉了，如String,Integer,Date在这些类当中，equals有其自身的实现，而不再是比较类在堆内存中的存放地址了。</p><p>对于复合数据类型之间进行equals比较，在没有覆写equals方法的情况下，他们之间的比较还是基于他们在内存中的存放位置的地址值的，因为Object的equals方法也是用 == 进行比较的，所以比较后的结果跟 == 的结果相同。</p><p>String类对equals方法进行了<strong>重写</strong>，用来比较指向的字符串对象所存储的字符串是否相等。<br>其他的一些类诸如Double，Date，Integer等，都对equals方法进行了重写用来比较指向的对象所存储的内容是否相等</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210604/image.5wrxafsw0xc0.png" alt="image"></p><h4 id="遍历字符串"><a href="#遍历字符串" class="headerlink" title="遍历字符串"></a>遍历字符串</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">char</span> <span class="hljs-title">charAt</span><span class="hljs-params">(idx)</span></span>; <span class="hljs-comment">// 返回idx处的char值</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">length</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 数组.length() 字符串.length()</span><br></code></pre></td></tr></table></figure><h4 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h4><p>基本同C++<br>可以直接加<code>int</code></p><h3 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h3><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210604/image.75eyemq3azo0.png" alt="image"></p><p>StringBuilder是一个<strong>可变</strong>的字符串类</p><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><p>（以后都简写了，public啥的Orz）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">StringBuilder(); <br>StringBuilder(String str);<br></code></pre></td></tr></table></figure><h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><p>（许多同String）</p><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td>StringBuilder append(任意类型)</td><td>追加，并返回对象本身</td></tr><tr><td>StringBuilder reverse()</td><td>反转，并返回对象本身</td></tr></tbody></table><p>由于SB不变，直接调用方法即可，不用声明新的SB来接收<br>另外，由于返回<strong>本身</strong>，本身是个对象，所以可以链式编程<br><code>sb.append(x).append(x).append(x)...</code></p><h4 id="与String互相转换"><a href="#与String互相转换" class="headerlink" title="与String互相转换"></a>与String互相转换</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">sb.toString();<br>StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder(str);<br></code></pre></td></tr></table></figure><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>数组长度固定，集合的存储空间可变<br>以<strong>ArrayList</strong>为例（可以类比python的list）</p><h3 id="AL的构造和添加"><a href="#AL的构造和添加" class="headerlink" title="AL的构造和添加"></a>AL的构造和添加</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList();<br>add(E e); <span class="hljs-comment">// 其实它返回 boolean 成功or失败</span><br>add(<span class="hljs-keyword">int</span> idx, E e); <span class="hljs-comment">// 在位置idx插入元素e</span><br></code></pre></td></tr></table></figure><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>boolean remove(Object o)</td><td>删除指定的元素，返回删除是否成功</td></tr><tr><td>E remove(int idx)</td><td>删除指定的索引处的元素，返回被删除的元素</td></tr><tr><td>E set(int idx, E e)</td><td>替换，返回被换掉的</td></tr><tr><td>E get(int idx)</td><td>-</td></tr><tr><td>int size()</td><td>返回集合中元素个数</td></tr></tbody></table><p>…<br>（此处大跃进）<br>…</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>类比C++，<code>:</code>变为<code>extends</code></p><h3 id="super"><a href="#super" class="headerlink" title="super"></a>super</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//假设父类里 age 是 50 嗷</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Father</span> </span>&#123; <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> age = <span class="hljs-number">30</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> age = <span class="hljs-number">20</span>;<br>        System.out.println(age); <span class="hljs-comment">// 20</span><br>        <span class="hljs-comment">// 我要访问本类的age，怎么办呢？this</span><br>        System.out.println(<span class="hljs-keyword">this</span>.age); <span class="hljs-comment">// 30</span><br>        <span class="hljs-comment">// 我要访问父类的age，怎么办呢？super</span><br>        System.out.println(<span class="hljs-keyword">super</span>.age);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>this()</code>：本类的构造方法<br><code>super()</code>：父类的构造方法</p><h3 id="方法的访问"><a href="#方法的访问" class="headerlink" title="方法的访问"></a>方法的访问</h3><h4 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h4><p><font color='red'>子类中所有的构造方法默认都会访问父类中的<strong>无参</strong>构造方法</font><br>（即相当于，不管你自己写还是不写，子类构造方法永远有一句<code>super()</code>）</p><p>如果父类中没有无参构造方法，会报错，解决方案：</p><ol><li>在父类写一个无参ctor（推荐）</li><li>在子类显式调用父类的<strong>有参</strong>ctor </li></ol><h4 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h4><p>通过子类对象访问一个方法：<br>子类成员范围寻找？ ? 父类成员范围找？ ? 报错！</p><h3 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h3><p>方法重写：子类中的和父类<strong>一模一样</strong>的方法声明<br>小技巧：在重写的方法前加一行<code>@Override</code>，如果IDEA报错了，说明你写错咯</p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>父类中的<strong>private</strong>内容，无法被重写<br>子类的访问权限不能比父类低（public &gt; 默认 &gt; private）</p><h3 id="继承注意事项"><a href="#继承注意事项" class="headerlink" title="继承注意事项"></a>继承注意事项</h3><ul><li>只能有一个父类</li><li>可以套娃</li></ul><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><h3 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h3><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210604/image.3wh11ab9ly60.png" alt="image"></p><h3 id="状态修饰符"><a href="#状态修饰符" class="headerlink" title="状态修饰符"></a>状态修饰符</h3><h4 id="final"><a href="#final" class="headerlink" title="final"></a>final</h4><ul><li>final修饰<strong>基本类型</strong>时，基本类型的<strong>数据值</strong>不能改变（C++ const）</li><li>final修饰<strong>引用类型</strong>（如类）时，引用类型的<strong>地址值</strong>不能改变，但是<strong>地址指向的内容</strong>却是<strong>可以改变</strong>的<h4 id="static"><a href="#static" class="headerlink" title="static"></a>static</h4></li><li>（同C++ py）被类的所有成员<strong>共享</strong></li><li>静态的成员方法只能访问同为静态的成员方法和变量</li></ul><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>小技巧time：子类里输入要重写的父类方法名，回车一下，IDEA自动补全方法和<code>@Override</code></p><h3 id="多态中成员访问特点："><a href="#多态中成员访问特点：" class="headerlink" title="多态中成员访问特点："></a>多态中成员访问特点：</h3><p>先给出几段程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> age = <span class="hljs-number">10</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span> <span class="hljs-params">()</span> </span>&#123;<br>        ...<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> age = <span class="hljs-number">6</span>;<br>    <span class="hljs-keyword">public</span> String cat_type = <span class="hljs-string">&quot;default&quot;</span>;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span> <span class="hljs-params">()</span> </span>&#123;<br>        ...<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">play</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span> <span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Animal a = <span class="hljs-keyword">new</span> Cat();<br>        System.out.println(a.age); <span class="hljs-comment">// 不报错，但输出了Animal父类的10</span><br>        System.out.println(a.cat_type); <span class="hljs-comment">// 报错！！！父类里没有</span><br>        a.eat(); <span class="hljs-comment">// 不报错，且调用的是Cat子类里的eat</span><br>        a.play(); <span class="hljs-comment">//报错！！！父类里没有</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>成员变量：编译看左边(Animal)，执行看左边(Animal)</li><li>成员方法：编译看左边(Animal)，执行看右边(Cat)（因为方法经过了重写而变量没有）</li></ul><blockquote><p>多态的优点，简而言之，就是定义方法的时候可以只定义一个用父类型的方法，用这一个方法可以操作所有子类型避免一个子类型写一个方法</p><p>而多态的缺点，就是上文提到的，不能访问<strong>某一具体子类特有的方法</strong></p></blockquote><h3 id="多态中的转型"><a href="#多态中的转型" class="headerlink" title="多态中的转型"></a>多态中的转型</h3><p>向<strong>上</strong>转型：父类引用 <strong>指向</strong> 子类对象<br>向<strong>下</strong>转型：父类引用 <strong>转为</strong> 子类对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Animal a = <span class="hljs-keyword">new</span> Cat(); <span class="hljs-comment">// 向上转型</span><br>a.play(); <span class="hljs-comment">// 同上文，会报错！因为Animal里没有play方法</span><br><br>Cat b = (Cat)a; <span class="hljs-comment">// 向下转型（这里没有new，只是地址的引用哦~）</span><br>b.play(); <br></code></pre></td></tr></table></figure><h2 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h2><blockquote><p><strong>C++ 抽象类：</strong> 拥有<strong>纯虚函数</strong>的类是抽象类<br><strong>JAVA 抽象类：</strong> 使用<strong>abstract</strong>定义且含有abstract<strong>抽象方法</strong>的类是抽象类（虽然其实可以没有抽象方法，但是没啥意义）<br>从定义上看，纯虚函数和抽象方法非常相像，纯虚函数声明为<code>virtual type funcname()=0;</code>抽象函数声明为<code>public abstract type funcname();</code>可以看出它们都没有定义。前者没有定义函数体，后者没有定义方法体。</p></blockquote><p>抽象类不是具体的，因此不能直接创建对象<br>抽象类的子类，要么<strong>重写</strong>父类中的抽象方法，要么也是一个抽象类</p><p>抽象类虽然不能直接实例化，但是也能有构造方法，因为它的子类通过多态访问它的构造方法</p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p><strong>Interface</strong></p><p>和类一样，被包含在package里<br>类 <strong>不继承</strong> 接口，类 <strong>实现(implements)</strong> 接口，一般把实现类命名为 “接口名 + Impl” </p><p>接口是<strong>抽象</strong>的，需要通过类来实例化，类比抽象类的特性</p><p><strong>小总结——多态的形式：</strong> 具体类多态、<strong>抽象类多态、接口多态</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Jumping</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">jump</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Jumping</span></span>&#123;<br>    ...<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">jump</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Cat is jumping!&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Cat c = <span class="hljs-keyword">new</span> Cat();<br>        c.jump();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="接口的成员特点"><a href="#接口的成员特点" class="headerlink" title="接口的成员特点"></a>接口的成员特点</h3><ul><li>成员变量：<br>只能是常量，默认修饰符<code>public static final</code></li><li>构造方法：<br>接口没有构造方法（因为接口主要是对行为进行抽象的，是没有具体存在的）<br>接口的实现类看似能调用<code>super()</code>，其实是继承自究极大爹Object类的</li><li>成员方法：</li></ul><p><strong>只能是抽象方法</strong>，默认修饰符<code>public abstract</code><br>(JDK8后的新特性以后说)</p><blockquote><p>又一个小技巧：<code>Alt + Insert</code>可以在类里快速创建各种方法</p></blockquote><h3 id="类和接口的关系"><a href="#类和接口的关系" class="headerlink" title="类和接口的关系"></a>类和接口的关系</h3><ul><li>类和类的关系：<br>继承关系，<strong>只能单继承</strong>（认一个爹），但是可以套娃（多层继承）</li><li>类和接口的关系：<br>实现关系，可以单实现，也可以多实现，还可以在继承一个类的同时实现多个接口</li><li>接口和接口的关系：<br>继承关系，可以单继承，<strong>也可以多继承</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InterImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Object</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Inter1</span>, <span class="hljs-title">Inetr2</span>, <span class="hljs-title">Inter3</span></span>&#123;<br>    ...<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Inter1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Inter2</span>, <span class="hljs-title">Inter3</span></span>&#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="抽象类和接口的区别"><a href="#抽象类和接口的区别" class="headerlink" title="抽象类和接口的区别"></a>抽象类和接口的区别</h3></li><li>抽象类 —— 对类抽象，包括属性、行为</li><li>接口 —— 对行为抽象，主要包括行为<br><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210604/image.46hzx5tnayg0.png" alt="image"></li></ul><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>（暂略）</p><h2 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h2><blockquote><p>如果是静态类，无需ctor，通过类名就可以直接调用</p></blockquote><h3 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h3><p>（实在是懒得打表直接上图吧）<br><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210604/image.55ocd073yzk0.png" alt="image"></p><h3 id="System"><a href="#System" class="headerlink" title="System"></a>System</h3><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210604/image.6vrrs2df4k00.png" alt="image"></p><h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><blockquote><p>看方法的源码：选中方法，<code>Crtl + B</code>，或右键GoTo实现</p></blockquote><h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString( )"></a>toString( )</h4><p>类的<code>toString()</code>默认继承自<strong>Object</strong>类；建议所有类<strong>重写</strong>此方法<br>自动重写：<code>Alt + Insert</code></p><h4 id="equals"><a href="#equals" class="headerlink" title="equals( )"></a>equals( )</h4><p>同上，比较值（而非地址）是否相同，需要<strong>重写</strong>；可自动重写</p><h3 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h3><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210604/image.68z67qwynhs0.png" alt="image"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Arrays.sort(arr)<br></code></pre></td></tr></table></figure><h3 id="基本类型包装类"><a href="#基本类型包装类" class="headerlink" title="基本类型包装类"></a>基本类型包装类</h3><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210604/image.3ngl8hb5f1c0.png" alt="image"><br>常用于基本数据类型和字符串之间的转换</p><h4 id="Integer"><a href="#Integer" class="headerlink" title="Integer"></a>Integer</h4><h5 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h5><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210604/image.69c646jljr80.png" alt="image"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer i = Integer.valueOf(<span class="hljs-string">&quot;114514&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="int与String转换"><a href="#int与String转换" class="headerlink" title="int与String转换"></a>int与String转换</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// int 转 String</span><br><span class="hljs-keyword">int</span> num = <span class="hljs-number">16</span>;<br><span class="hljs-comment">// 方法一（比较low，主要是说一下，string后加东西自动转string）</span><br>String s1 = <span class="hljs-string">&quot;&quot;</span> + num;<br><span class="hljs-comment">// 方法二（专业 ~）</span><br>String s2 = String.valueOf(num);<br><br><span class="hljs-comment">// String 转 int</span><br>String str = <span class="hljs-string">&quot;16&quot;</span>;<br><span class="hljs-keyword">int</span> x = Integer.parseInt(str);<br></code></pre></td></tr></table></figure><h3 id="日期类"><a href="#日期类" class="headerlink" title="日期类"></a>日期类</h3><p>（java.util包下的类）</p><h4 id="构造方法-2"><a href="#构造方法-2" class="headerlink" title="构造方法"></a>构造方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Date d1 = <span class="hljs-keyword">new</span> Date();<br>        System.out.println(d1);<br>        Date d2 = <span class="hljs-keyword">new</span> Date(<span class="hljs-number">1000</span>*<span class="hljs-number">60</span>*<span class="hljs-number">60</span>); <span class="hljs-comment">//从1970.1.1 00:00 GMT开始的毫秒数（涉及毫秒的，变量类型的long）</span><br>        System.out.println(d2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">Sat Jun 05 11:45:14 CST 2021<br>Thu Jan 01 09:00:00 CST 1970<br></code></pre></td></tr></table></figure><h4 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h4><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210604/image.a8v1bynfrew.png" alt="image"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Date d1 = <span class="hljs-keyword">new</span> Date();<br>        System.out.println(d1.getTime());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>返回一大串毫秒看不懂怎么办？<code> * 1.0 / 1000 / 60 / 60 / 24 / 365</code>（<code>Ctrl + Alt + L</code>可以格式化代码）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Date d1 = <span class="hljs-keyword">new</span> Date();<br>        System.out.println(d1.getTime() * <span class="hljs-number">1.0</span> / <span class="hljs-number">1000</span> / <span class="hljs-number">60</span> / <span class="hljs-number">60</span> / <span class="hljs-number">24</span> / <span class="hljs-number">365</span> + <span class="hljs-string">&quot;年&quot;</span>);<br>        <span class="hljs-comment">// 51.46074035676687年</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Date d1 = <span class="hljs-keyword">new</span> Date();<br>        <span class="hljs-keyword">long</span> time = System.currentTimeMillis();<br>        d1.setTime(time);<br>        System.out.println(d1); <span class="hljs-comment">//Sat Jun 05 12:07:35 CST 2021</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="SimpleDateFormat"><a href="#SimpleDateFormat" class="headerlink" title="SimpleDateFormat"></a>SimpleDateFormat</h4><ul><li>格式化日期：Date转String，<code>format()</code></li><li>解析日期，String转Date，<code>parse()</code></li></ul><p>格式化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Date d = <span class="hljs-keyword">new</span> Date();<br>        SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(); <span class="hljs-comment">// 无参构造</span><br>        String s = sdf.format(d);<br>        System.out.println(s); <span class="hljs-comment">// 2021/6/5 下午12:24</span><br><br>        <span class="hljs-comment">// 上面的默认模式不喜欢，那么用含参构造</span><br>        SimpleDateFormat sdf2 = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;现在是yyyy年MM月dd日HH点mm分ss秒哦&quot;</span>);<br>        String s2 = sdf2.format(d);<br>        System.out.println(s2); <span class="hljs-comment">// 现在是2021年06月05日12点27分48秒哦</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>解析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String s = <span class="hljs-string">&quot;2016-11-16 11:16:16&quot;</span>;<br>        SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;现在是yyyy年MM月dd日HH点mm分ss秒哦&quot;</span>);<br>        Date d = sdf.parse(s); <span class="hljs-comment">/////////////////</span><br>        System.out.println(d); <span class="hljs-comment">// Wed Nov 16 11:16:16 CST 2016</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>////////////</code>处报错了！<br><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210604/image.45bglx8ujdk0.png" alt="image"><br>先不用管，<code>Alt + Enter</code>再选择 添加异常到方法签名<br><code>...main(String[] args) throws ParseException &#123;</code></p><h4 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a>Calendar</h4><p><a href="https://www.bilibili.com/video/BV1sZ4y1H7gV?p=212&spm_id_from=pageDriver">转P212</a></p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210604/1.1qh15uyyvetc.jpg" alt="1"></p><h3 id="try-catch"><a href="#try-catch" class="headerlink" title="try catch"></a>try catch</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(arr[<span class="hljs-number">3</span>]);<br>        &#125; <span class="hljs-keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Error!&quot;</span>);<br>            <span class="hljs-comment">// 在实际开发中，应该弹出一个页面提示，而不是输出上面这句话；用下面这行</span><br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Throwable成员方法"><a href="#Throwable成员方法" class="headerlink" title="Throwable成员方法"></a>Throwable成员方法</h3><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210604/2.71eibpt5ljk0.jpg" alt="2"></p><h3 id="throws"><a href="#throws" class="headerlink" title="throws"></a>throws</h3><p><code>throws 异常类名</code>，跟在方法的括号后<br>并不是真正的处理，只是把异常给无视了</p><p><strong>编译时异常CE：</strong> 必须处理，可以通过<code>try catch</code>或<code>throws</code>，如果用了<code>throws</code>，将来谁调用了谁处理（除非你有自信throws之后不可能出问题~）<br><strong>运行时异常RE：</strong> 可以不处理，但是如果出现问题了得回来改代码</p><h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> 异常类名 <span class="hljs-keyword">extends</span> <span class="hljs-title">Exception</span> </span>&#123;<br>    无参构造<br>    带参构造<br>&#125;<br></code></pre></td></tr></table></figure><p>例子：检测分数是否在0~100</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ScoreException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Exception</span> </span>&#123;<br>    <span class="hljs-comment">//Alt + Ins自动生成别忘了哦</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ScoreException</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ScoreException</span><span class="hljs-params">(String message)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(message);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ScoreException </span>&#123;<br>        Scanner in = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-keyword">int</span> score = in.nextInt();<br>        <span class="hljs-keyword">if</span> (score &lt; <span class="hljs-number">0</span> || score &gt; <span class="hljs-number">100</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ScoreException(<span class="hljs-string">&quot;分数范围错误！&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;分数正常&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意啦注意啦！</strong> 上面的throws也说了，除非你有自信throws之后不可能错，不然还是要在最后来一个try catch。上面这个程序，main就是最后了，但是main里throw了异常出来之后，并没有try catch它，而是把这个异常throws出了main，这样就<strong>错了！</strong>。（毕竟既然是检查分数范围，肯定要考虑到范围错误呀），所以下面的才是对的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Scanner in = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-keyword">int</span> score = in.nextInt();<br>        <span class="hljs-keyword">if</span> (score &lt; <span class="hljs-number">0</span> || score &gt; <span class="hljs-number">100</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123; <span class="hljs-comment">// !!! ///</span><br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ScoreException(<span class="hljs-string">&quot;分数范围错误！&quot;</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (ScoreException e) &#123; <span class="hljs-comment">/// !!! ///</span><br>                e.printStackTrace();<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;分数正常&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="throws和throw的区别"><a href="#throws和throw的区别" class="headerlink" title="throws和throw的区别"></a>throws和throw的区别</h4><table><thead><tr><th>throws</th><th>throw</th></tr></thead><tbody><tr><td>用在<strong>方法声明</strong>后面，跟的是<strong>异常类名</strong></td><td>用在<strong>方法体</strong>内，跟的是<strong>异常对象名</strong></td></tr><tr><td>由该方法的<strong>调用者</strong>来处理（甩锅）</td><td>由<strong>方法体内</strong>的语句处理（自己背锅）</td></tr><tr><td>只是可能发生异常</td><td>执行throw一定抛出了某种异常</td></tr></tbody></table><h2 id="集合-1"><a href="#集合-1" class="headerlink" title="集合+"></a>集合+</h2><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210604/3.3r1yz5zsjfy0.jpg" alt="3"></p><h3 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h3><p>Collection是单列集合的顶层接口<br>（即 只能通过<strong>多态</strong>的方法创建对象）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Collection&lt;String&gt; c = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<br>        c.add(<span class="hljs-string">&quot;Izayoi&quot;</span>);<br>        c.add(<span class="hljs-string">&quot;ASter&quot;</span>);<br>        System.out.println(c); <span class="hljs-comment">// [Izayoi, ASter]</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="常用方法-2"><a href="#常用方法-2" class="headerlink" title="常用方法"></a>常用方法</h4><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210604/4.5kz5fpg0k6o0.jpg" alt="4"></p><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><p>（类比C++）<br>Iterator，迭代器<br><code>Iterator&lt;E&gt; iterator()</code></p><ul><li><code>E next()</code></li><li><code>boolean hasNext()</code><blockquote><p>p.s. <code>Crtl + B</code>是转到 选中的方法的 实现</p></blockquote></li></ul><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>有序集合，允许重复</p><h4 id="特有方法"><a href="#特有方法" class="headerlink" title="特有方法"></a>特有方法</h4><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210604/image.2m55aimpul60.png" alt="image"></p><h4 id="并发修改异常"><a href="#并发修改异常" class="headerlink" title="并发修改异常"></a>并发修改异常</h4><p>一个错误的程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        List&lt;String&gt; l = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<br>        l.add(<span class="hljs-string">&quot;IzayoiAster&quot;</span>);<br>        l.add(<span class="hljs-string">&quot; loves &quot;</span>);<br>        l.add(<span class="hljs-string">&quot;Izyaoi&quot;</span>);<br>        Iterator&lt;String&gt; it = l.iterator();<br>        <span class="hljs-keyword">while</span> (it.hasNext()) &#123;<br>            String s = it.next();<br>            <span class="hljs-keyword">if</span> (s.equals(<span class="hljs-string">&quot;IzayoiAster&quot;</span>)) &#123;<br>                l.add(<span class="hljs-string">&quot;Lotus&quot;</span>);<br>            &#125;<br>        &#125;<br>        System.out.println(l);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>报错：</strong> <code>Exception in thread &quot;main&quot; java.util.ConcurrentModificationException</code></p><blockquote><p>稍微解释一下这个并发修改异常：每次add一个元素，都会导致列表<strong>实际将要修改的次数</strong>(modCount)加一，而当调用next时，之前会把实际将要修改的次数赋给<strong>预期将要修改的次数</strong>(expectedModCount)，然后对这两个值进行比较是否相等。由于中途add了，不相等，因此报错。（Orz解释不清）<br>我感觉还不如这一句话讲的清楚：迭代器遍历的过程中，通过集合对象修改了集合的长度，造成了迭代器获取元素时，判定实际修改值和预期修改值不一致</p></blockquote><p><strong>解决：</strong> </p><p><code>get()</code>方法不会去对<code>expectedModCount</code>和<code>modCount</code>进行检查</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        List&lt;String&gt; l = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<br>        l.add(<span class="hljs-string">&quot;IzayoiAster&quot;</span>);<br>        l.add(<span class="hljs-string">&quot;loves&quot;</span>);<br>        l.add(<span class="hljs-string">&quot;Izayoi&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; l.size(); i++) &#123;<br>            String s = l.get(i);<br>            <span class="hljs-keyword">if</span> (s.equals(<span class="hljs-string">&quot;IzayoiAster&quot;</span>)) &#123;<br>                l.add(<span class="hljs-string">&quot;Lotus&quot;</span>);<br>            &#125;<br>        &#125;<br>        System.out.println(l);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ListIterator"><a href="#ListIterator" class="headerlink" title="ListIterator"></a>ListIterator</h4><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><p>除了继承自Collection的Interatro所拥有的<code>next()</code>和<code>hasNext()</code>外，还有<code>previous()</code>，<code>hasPrevious()</code>和<code>add(E e)</code></p><p><font color='red'>注意啦注意啦！下面这段代码要和上面的并发修改异常区别开来哦！这里用的是<strong>List</strong>Iterator</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        List&lt;String&gt; l = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<br>        l.add(<span class="hljs-string">&quot;IzayoiAster&quot;</span>);<br>        l.add(<span class="hljs-string">&quot;loves&quot;</span>);<br>        l.add(<span class="hljs-string">&quot;Izayoi&quot;</span>);<br>        ListIterator&lt;String&gt; lit = l.listIterator(); <span class="hljs-comment">/// !!! ///</span><br>        <span class="hljs-keyword">while</span> (lit.hasNext()) &#123; <span class="hljs-comment">/// 用了while ///</span><br>            String s = lit.next();<br>            <span class="hljs-keyword">if</span>(s.equals(<span class="hljs-string">&quot;Izayoi&quot;</span>)) &#123;<br>                lit.add(<span class="hljs-string">&quot;Lotus&quot;</span>); <span class="hljs-comment">/// 可以add啦 ///</span><br>            &#125;<br>        &#125;<br>        System.out.println(l);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>因为ListIteratro在add时，会把modCount赋给expectedModCount</p></blockquote><h4 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h4><p>其实之前IDEA就已经提示啦<br><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210604/image.ay1cic1tmg.png" alt="image"><br>格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (类型 变量名 : 数组或Collection集合) &#123;<br>    <span class="hljs-comment">// 在此处直接使用变量名即可</span><br>&#125;<br><br>e.g.<br><span class="hljs-keyword">int</span>[] arr = &#123;...&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i : arr) &#123;<br>    System.out.println(i);<br>&#125;<br></code></pre></td></tr></table></figure><p><font color='red'>增强for循环的内部原理是一个<strong>Iterator</strong>迭代器，所以也要注意并发修改异常！错误示例：</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; l = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<br>...<br><span class="hljs-keyword">for</span>(String s : list) &#123;<br>    <span class="hljs-keyword">if</span>(s.equals(<span class="hljs-string">&quot;Izayoi&quot;</span>)) &#123;<br>        list.add(<span class="hljs-string">&quot;Lotus&quot;</span>); <span class="hljs-comment">// 通过集合对象修改了集合的长度！报错！</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="遍历小总结"><a href="#遍历小总结" class="headerlink" title="遍历小总结"></a>遍历小总结</h4><p>三种方式：迭代器、普通for、增强for（while是坏文明？）</p><h4 id="List的常用子类"><a href="#List的常用子类" class="headerlink" title="List的常用子类"></a>List的常用子类</h4><ul><li><code>ArrayList</code>：底层为<strong>数组</strong>，查询快，增删慢</li><li><code>LinkedList</code>：底层为<strong>链表</strong>，查询慢，增删快</li></ul><h5 id="LinkedList的特有功能"><a href="#LinkedList的特有功能" class="headerlink" title="LinkedList的特有功能"></a>LinkedList的特有功能</h5><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210604/image.4djqmgfh9mk0.png" alt="image"></p><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>除了不能重复之外，和他爹Collection没区别<br>另外，没有带索引的方法，所以不能用普通for遍历</p><p>同样，因为是接口，所以不能直接实例化（通过多态）</p><h4 id="哈希"><a href="#哈希" class="headerlink" title="哈希"></a>哈希</h4><p>Object类中，<code>hashCode()</code>方法可以获取对象的哈希值</p><ul><li>同一个对象多次调用，返回的哈希值相同</li><li>默认情况下，不同对象哈希值不同（除非重写了<code>hashCode()</code>）</li></ul><h4 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h4><ul><li>底层是<a href="https://www.bilibili.com/video/BV1sZ4y1H7gV?p=244&spm_id_from=pageDriver">哈希表（P244）</a></li><li>不保证有序</li></ul><blockquote><p>杂乱无章的小技巧时间：<code>Shift + Tab</code>取消缩进</p></blockquote><h4 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h4><p>特性如其名字，有序，不重复，是由哈希表和链表实现的Set接口</p><h4 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h4><p>特性如其名字（一说到Tree，就想到平衡树之类的嘛~）</p><ul><li>元素按照<strong>一定的规则</strong>进行排序，具体的排序方式取决于<strong>构造方法</strong>：<ul><li><code>TreeSet()</code>：根据元素的自然排序进行排序</li><li><code>TreeSet(Comparator cmp)</code>：根据比较器cmp进行排序</li></ul></li><li>没有带索引的方法，所以不能用普通for遍历</li><li>Set，因此不包含重复元素</li></ul><h5 id="Comparable"><a href="#Comparable" class="headerlink" title="Comparable"></a>Comparable</h5><p><strong>例1：</strong> <code>Integer</code>类内已经实现了<strong>自然排序的接口</strong><code>Comparable</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 注意！集合只能存引用类型</span><br>        <span class="hljs-comment">// 所以不能写int，而应该写int的包装类Integer</span><br>        <span class="hljs-comment">// p.s. Integer内部封装了把int转Integer的方法，所以可以直接add一个int</span><br>        TreeSet&lt;Integer&gt; ts = <span class="hljs-keyword">new</span> TreeSet&lt;&gt;();<br>        ts.add(<span class="hljs-number">14</span>);<br>        ts.add(<span class="hljs-number">18</span>);<br>        ts.add(<span class="hljs-number">16</span>);<br>        System.out.println(ts); <span class="hljs-comment">// [14, 16, 18]</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>例2：</strong> 自定义一个学生类，要求学生优先按照年龄小的输出，年龄相同的再比较姓名——<strong>需要在自定义的学生类里实现自然排序接口Comparable</strong><br>重写<code>compareTo()</code>：</p><ul><li>返回0：判定为<strong>相等</strong>（对于set来说，相等的元素只会被存进一个！）</li><li>返回正数：<strong>升序</strong>排列（即当前比较的元素排在被比较的后面）</li><li>返回附属：<strong>降序</strong>排列<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">Student</span>&gt;</span>&#123;<br>    ...<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(Student o)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> num = <span class="hljs-keyword">this</span>.age - o.age; <span class="hljs-comment">////// 升序，那么this放在前面哦！ //////</span><br>        <span class="hljs-keyword">int</span> ret = num == <span class="hljs-number">0</span> ? <span class="hljs-keyword">this</span>.name.compareTo(o.name) : num;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        TreeSet&lt;Student&gt; ts = <span class="hljs-keyword">new</span> TreeSet&lt;&gt;();<br>        Student s1 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;Illya&quot;</span>, <span class="hljs-number">10</span>);<br>        Student s2 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;Miyu&quot;</span>, <span class="hljs-number">10</span>);<br>        Student s3 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;Chloe&quot;</span>, <span class="hljs-number">9</span>);<br>        Student s4 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;Chloe&quot;</span>, <span class="hljs-number">9</span>);<br>        ts.add(s1);<br>        ts.add(s2);<br>        ts.add(s3);<br>        ts.add(s4);<br>        <span class="hljs-keyword">for</span>(Student s : ts) &#123;<br>            System.out.println(s.getName() + <span class="hljs-string">&quot;, &quot;</span> + s.getAge() + <span class="hljs-string">&quot;岁&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// Chloe, 9岁</span><br><span class="hljs-comment">// Illya, 10岁</span><br><span class="hljs-comment">// Miyu, 10岁</span><br></code></pre></td></tr></table></figure><h5 id="Comparator"><a href="#Comparator" class="headerlink" title="Comparator"></a>Comparator</h5>和上面一样的例子（使用了<strong>匿名内部类</strong>）<br>（这次，学生类里并没有实现自然排序接口）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        TreeSet&lt;Student&gt; ts = <span class="hljs-keyword">new</span> TreeSet&lt;&gt;(<span class="hljs-keyword">new</span> Comparator&lt;Student&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Student o1, Student o2)</span> </span>&#123;<br>                <span class="hljs-comment">// 因为在main方法里，所以this指代的是main</span><br>                <span class="hljs-comment">// o1相当于之前的this，o2相当于之前的o</span><br>                <span class="hljs-keyword">int</span> num = o1.getAge() - o2.getAge(); <span class="hljs-comment">// 不在类里，用getAge</span><br>                <span class="hljs-keyword">int</span> ret = num == <span class="hljs-number">0</span> ? o1.getName().compareTo(o2.getName()) : num;<br>                <span class="hljs-keyword">return</span> ret;<br>            &#125;<br>        &#125;);<br><br>        Student s1 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;Illya&quot;</span>, <span class="hljs-number">10</span>);<br>        Student s2 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;Miyu&quot;</span>, <span class="hljs-number">10</span>);<br>        Student s3 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;Chloe&quot;</span>, <span class="hljs-number">9</span>);<br>        Student s4 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;Chloe&quot;</span>, <span class="hljs-number">9</span>);<br>        ts.add(s1);<br>        ts.add(s2);<br>        ts.add(s3);<br>        ts.add(s4);<br>        <span class="hljs-keyword">for</span>(Student s : ts) &#123;<br>            System.out.println(s.getName() + <span class="hljs-string">&quot;, &quot;</span> + s.getAge() + <span class="hljs-string">&quot;岁&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><p>即 将原来具体的某一类型<strong>参数化</strong>，在使用/调用时再传入具体的类型<br>（类比C++ Template）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//注意啦注意啦！这里没加尖括号&lt;&gt;来指定类型</span><br>        Collection c = <span class="hljs-keyword">new</span> ArrayList();<br>        c.add(<span class="hljs-string">&quot;Izayoi&quot;</span>);<br>        c.add(<span class="hljs-string">&quot;Aster&quot;</span>);<br>        Iterator it = c.iterator();<br>        <span class="hljs-keyword">while</span> (it.hasNext()) &#123;<br>            System.out.println(it.next());<br>            <span class="hljs-comment">// 或</span><br>            Object o = it.next();<br>            System.out.println(o);<br>            <span class="hljs-comment">// 或</span><br>            String s = (String)it.next();<br>            System.out.println(s);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// Izayoi</span><br><span class="hljs-comment">// Aster</span><br><span class="hljs-comment">// （虽然IDEA给我画了满屏的波浪线Orz）</span><br></code></pre></td></tr></table></figure><h4 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>    <span class="hljs-keyword">public</span> T username;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">getUsername</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUsername</span><span class="hljs-params">(T username)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(T username)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.username = username;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        User&lt;String&gt; u = <span class="hljs-keyword">new</span> User&lt;&gt;(<span class="hljs-string">&quot;IzayoiAster&quot;</span>);<br>        <span class="hljs-comment">// User u = new User(&quot;IzayoiAster&quot;);，虽然IDEA显然也不希望你这么写</span><br>        System.out.println(u.getUsername());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h4><p>泛型接口的<strong>实现类</strong>仍为泛型类</p><h4 id="类型通配符"><a href="#类型通配符" class="headerlink" title="类型通配符"></a>类型通配符</h4><p>为了表示各种泛型的父类，可以使用类型通配符<code>&lt;?&gt;</code></p><p><code>List&lt;?&gt;</code>：表示元素类型未知的List（仅表示是各种泛型List的父类，并不能把元素加入其中）</p><p><strong>类型通配符上限：</strong> <code>&lt;? extends 类型&gt;</code><br>如<code>List&lt;? extends Number&gt;</code>，表示的类型是<strong>Number或其子类型</strong><br><strong>类型通配符下线：</strong> <code>&lt;? super 类型&gt;</code><br>如<code>List&lt;? super Number&gt;</code>，表示的类型是<strong>Number或其父类型</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;?&gt; l1 = <span class="hljs-keyword">new</span> ArrayList&lt;Object&gt;();<br>List&lt;?&gt; l2 = <span class="hljs-keyword">new</span> ArrayList&lt;Number&gt;();<br>List&lt;?&gt; l3 = <span class="hljs-keyword">new</span> ArrayList&lt;Integer&gt;();<br><span class="hljs-comment">// (Object -&gt; Number -&gt; Integer)</span><br><br>List&lt;? extends Number&gt; = <span class="hljs-keyword">new</span> ArrayList&lt;Object&gt;(); <span class="hljs-comment">// 报错！上限是Number！</span><br>List&lt;? <span class="hljs-keyword">super</span> Number&gt; = <span class="hljs-keyword">new</span> ArrayList&lt;Integer&gt;(); <span class="hljs-comment">// 报错！下限是Number！</span><br></code></pre></td></tr></table></figure><h4 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h4><p><code>(变量类型... 变量名)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span>... a)</span> </span>&#123; <span class="hljs-comment">// a是一个数组咯</span><br>        <span class="hljs-keyword">int</span> ret = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i : a) &#123;<br>            ret += i;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(sum(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：如果函数中出来可变参数还有其他参数，可变参数要<strong>放到最后</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> c, <span class="hljs-keyword">int</span>... a)</span> </span>&#123; ...<br></code></pre></td></tr></table></figure><h5 id="可变参数的使用"><a href="#可变参数的使用" class="headerlink" title="可变参数的使用"></a>可变参数的使用</h5><ul><li><p>Arrays类中有一个静态方法：<code>Arrays.asList(T... t)</code>，返回由<strong>指定数组</strong>组成的<strong>固定长度</strong>的列表。所以不能add、remove，能set</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; list = Arrays.asList(<span class="hljs-string">&quot;Izayoi&quot;</span>, <span class="hljs-string">&quot;Aster&quot;</span>, <span class="hljs-string">&quot;Lotus&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>List接口中有一个静态方法<code>List.of(E... e)</code>，同上，但是add、remove和set<strong>都不行（不能更改）</strong></p></li><li><p>Set接口中也有一个静态方法<code>Set.of(E... e)</code>，同上，只是<strong>不能重复</strong>（这里是不能重复，并不是自动去重，而是你给出的<code>E... e</code>里不能有重复的，不然会RE的）</p></li></ul><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p><code>Map&lt;Key, Value&gt;</code>；是接口，所以依然要通过多态来实例化</p><p>（类比C++）键不可重复</p><p>添加元素：<code>put(key, value)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Map&lt;String, String&gt; m = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        m.put(<span class="hljs-string">&quot;Illya&quot;</span>, <span class="hljs-string">&quot;伊莉雅&quot;</span>);<br>        m.put(<span class="hljs-string">&quot;Miyu&quot;</span>, <span class="hljs-string">&quot;美游&quot;</span>);<br>        m.put(<span class="hljs-string">&quot;Chloe&quot;</span>, <span class="hljs-string">&quot;克洛伊&quot;</span>);<br>        System.out.println(m); <span class="hljs-comment">// &#123;Illya=伊莉雅, Miyu=美游, Chloe=克洛伊&#125;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h4><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210604/image.77tpagxsgx40.png" alt="image"></p><h4 id="获取功能"><a href="#获取功能" class="headerlink" title="获取功能"></a>获取功能</h4><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210604/image.tf6yhdlrzcw.png" alt="image"></p><h4 id="遍历-1"><a href="#遍历-1" class="headerlink" title="遍历"></a>遍历</h4><ul><li>方法一：用<code>keySet()</code>方法获取所有<strong>键</strong>，再遍历所有键</li><li>方法二：用<code>entrySet()</code>方法获取所有<strong>键值对</strong>对象，再利用增强for，来得到每一个<code>Map.Entry</code>（Entry：条目），而<code>Map.Entry</code>有<code>getKey()</code>和<code>getValue()</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Map&lt;String, String&gt; m = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        m.put(<span class="hljs-string">&quot;Illya&quot;</span>, <span class="hljs-string">&quot;伊莉雅&quot;</span>);<br>        m.put(<span class="hljs-string">&quot;Miyu&quot;</span>, <span class="hljs-string">&quot;美游&quot;</span>);<br>        m.put(<span class="hljs-string">&quot;Chloe&quot;</span>, <span class="hljs-string">&quot;克洛伊&quot;</span>);<br><br>        Set&lt;Map.Entry&lt;String, String&gt;&gt; entrySet = m.entrySet(); <span class="hljs-comment">// Ctrl + Alt + V</span><br>        <span class="hljs-keyword">for</span>(Map.Entry&lt;String, String&gt; wife : entrySet) &#123;<br>            System.out.println(wife.getKey() + <span class="hljs-string">&quot;, &quot;</span> + wife.getValue());<br>        &#125;<br>    &#125;<br><span class="hljs-comment">//    Illya, 伊莉雅</span><br><span class="hljs-comment">//    Miyu, 美游</span><br><span class="hljs-comment">//    Chloe, 克洛伊</span><br>&#125;<br></code></pre></td></tr></table></figure>p.s. 集合是可以<strong>嵌套</strong>的哦，比如<code>ArrayList</code>存储<code>HashMap</code></li></ul><h3 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h3><p>里面均为静态方法，是一个针对集合操作的<strong>工具类</strong></p><p>常用方法：<code>sort(列表)</code>升序排序，<code>reverse(列表)</code>反转，<code>shuffle(列表)</code>：使用默认的随机源来随机排列指定的列表</p><blockquote><p><strong>哼！哼哼！啊啊啊啊啊啊啊啊啊啊啊啊！</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        List&lt;Integer&gt; list = Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">9</span>, <span class="hljs-number">1</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br><br>        Collections.sort(list);<br>        System.out.println(list); <span class="hljs-comment">// [0, 1, 1, 1, 1, 1, 1, 4, 4, 5, 8, 9, 9]</span><br><br>        Collections.reverse(list);<br>        System.out.println(list); <span class="hljs-comment">// [9, 9, 8, 5, 4, 4, 1, 1, 1, 1, 1, 1, 0]</span><br><br>        Collections.shuffle(list);<br>        System.out.println(list); <span class="hljs-comment">// [5, 8, 1, 1, 0, 1, 9, 1, 9, 1, 4, 1, 4]</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h2><p>分为字符流和字节流</p><ul><li>读的懂的东西用字符流，比如一篇txt格式的紫菀写的小黄文</li><li>读不懂的东西用字节流，比如一张jpg格式的紫菀化的小涩图（用记事本打开读不懂）<br>（如果不知道用什么流，就用万能的字节流）</li></ul><h3 id="File"><a href="#File" class="headerlink" title="File"></a>File</h3><p>File类是文件和目录<strong>路径</strong>名的抽象表示（不要理解成文件了哦~）</p><h4 id="构造-1"><a href="#构造-1" class="headerlink" title="构造"></a>构造</h4><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210604/image.1x9tapcoaxcw.png" alt="image"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        File f1 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;E:\\Aster\\diary.txt&quot;</span>);<br>        System.out.println(f1);<br><br>        File f2 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;E:\\Aster&quot;</span>, <span class="hljs-string">&quot;diary.txt&quot;</span>);<br>        System.out.println(f2);<br><br>        File f3 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;E:\\Aster&quot;</span>);<br>        File f4 = <span class="hljs-keyword">new</span> File(f3, <span class="hljs-string">&quot;diary.txt&quot;</span>);<br>        System.out.println(f4);<br>    &#125;<br><span class="hljs-comment">//    E:\Aster\diary.txt</span><br><span class="hljs-comment">//    E:\Aster\diary.txt</span><br><span class="hljs-comment">//    E:\Aster\diary.txt</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210604/image.6rdxma3hsr40.png" alt="image"></p><p><strong>createNewFile()</strong></p><ul><li>如果文件不存在，创建文件并返回true；反之false<br>（冷知识：如果有一个文件夹和文件重名，也是不能创建的）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        File f1 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;E:\\Aster\\diary.txt&quot;</span>);<br>        System.out.println(f1.createNewFile()); <span class="hljs-comment">// true</span><br>        <span class="hljs-comment">// 如果Aster文件夹不存在，会报错</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210604/image.67oi0x1dt5w0.png" alt="image"></li></ul><p><strong>mkdir()</strong></p><ul><li>如果文件夹不存在，创建文件夹并返回true；反之false（创建多级会false哦）</li></ul><p><strong>mkdirs()</strong></p><ul><li>“不愧是mkdirs，轻而易举地做到了mkdir想做却做不到的事！”</li></ul><h4 id="判断和获取"><a href="#判断和获取" class="headerlink" title="判断和获取"></a>判断和获取</h4><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210604/image.5h3q4vah6n40.png" alt="image"></p><p><a href="https://www.bilibili.com/video/BV1sZ4y1H7gV?p=276&spm_id_from=pageDriver">（逃 P276）</a></p><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p><code>delete()</code>：删除由此抽象路径名所表示的文件或目录</p><p>如果要删除的目录里<strong>有内容</strong>，该目录是<strong>不能直接删除</strong>的</p><h4 id="例：递归遍历目录"><a href="#例：递归遍历目录" class="headerlink" title="例：递归遍历目录"></a>例：递归遍历目录</h4><p>获取<code>E:\\Aster</code>下的所有文件，并输出它们的绝对路径（目录里可能有多级目录）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        File src = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;E:\\Aster&quot;</span>);<br>        getAllFile(src);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getAllFile</span><span class="hljs-params">(File srcFile)</span> </span>&#123;<br>        File[] files = srcFile.listFiles(); <span class="hljs-comment">// 获取当前目录下的所有目录和文件</span><br>        <span class="hljs-keyword">if</span> (files != <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// 增强for的健壮性检查，建议加上</span><br>            <span class="hljs-keyword">for</span> (File file : files) &#123;<br>                <span class="hljs-keyword">if</span> (file.isDirectory()) &#123; <span class="hljs-comment">// 如果是子目录</span><br>                    getAllFile(file);<br>                &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 否则，是文件，输出绝对路径</span><br>                    System.out.println(file.getAbsolutePath());<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h3><p><code>Input/OutputStream</code>：抽象类，所有字节输入/输出流的超类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;test.txt&quot;</span>);<br>        fos.write(<span class="hljs-number">97</span>); <span class="hljs-comment">// 注意啦！这里的97是字节码，即实际上写入了字符a</span><br>        fos.close(); <span class="hljs-comment">// 一定要关闭！</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="写数据"><a href="#写数据" class="headerlink" title="写数据"></a>写数据</h4><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210604/image.78edofnpu340.png" alt="image"><br>（方法三中，off即索引，从off处开始写）</p><p><strong>小技巧：</strong></p><ol><li>因为是写字节码，很麻烦，所以可以用<code>getBytes()</code>方法：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">fos.write(<span class="hljs-string">&quot;IzayoiAster&quot;</span>.getBytes());<br></code></pre></td></tr></table></figure></li><li>换行：<br>不同的操作系统对于换行符的要求是不同的！</li></ol><table><thead><tr><th>OS</th><th>换行符</th></tr></thead><tbody><tr><td>Windows</td><td>\r\n</td></tr><tr><td>Linux</td><td>\n</td></tr><tr><td>Mac</td><td>\r</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>.write(<span class="hljs-string">&quot;\r\n&quot;</span>.getBytes());<br></code></pre></td></tr></table></figure><ol start="3"><li>追加写入<br><code>FileOutputStream(String filename, boolean append)</code><br>如果传入第二个参数是<strong>true</strong>，那么就是追加写入，从文件的<strong>末尾</strong>开始写数据<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-keyword">true</span>);<br></code></pre></td></tr></table></figure><h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python学习笔记2-数据可视化</title>
    <link href="/2021/06/02/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02-%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    <url>/2021/06/02/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02-%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h2 id="绘制简单的折线图"><a href="#绘制简单的折线图" class="headerlink" title="绘制简单的折线图"></a>绘制简单的折线图</h2><h3 id="安装Matplotlib"><a href="#安装Matplotlib" class="headerlink" title="安装Matplotlib"></a>安装Matplotlib</h3><p><code>python -m pip install --user matplotlib</code></p><p>一个简单的例子</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>squares = [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>]<br>fig, ax = plt.subplots()<br>ax.plot(squares)<br><br>plt.show()<br></code></pre></td></tr></table></figure><p>说明：</p><ul><li><code>subplots()</code>可以在一张图片中绘制（一个或多个）图表</li><li><code>fig</code>表示整张图片</li><li><code>ax</code>表示图片中的各个图表</li><li><code>plot()</code>尝试根据给定的数据以有意义的方式绘制图表</li><li><code>plt.show()</code>打开Matplotlib查看器并显示绘制的图表</li></ul><p>效果如下：<br><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/img/image.23nfjpbdhpy8.png" alt="image"></p><p>发现很简陋，做一下修改</p><blockquote><p>pyplot默认中文是乱码，有很多种解决方案，但我觉得最好的还是在用到中文的地方后追加<code>fontproperties = &#39;Microsoft YaHei&#39;</code><br><a href="https://blog.csdn.net/hoxily/article/details/44240395">查询中文字体对应的英文名点我</a></p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># -!- coding: utf-8 -!-</span><br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>squares = [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>]<br>fig, ax = plt.subplots()<br><br><span class="hljs-comment"># linewidth决定线条粗细</span><br>ax.plot(squares, linewidth = <span class="hljs-number">3</span>)<br><br><span class="hljs-comment"># 设置标题及坐标轴标签</span><br>ax.set_title(<span class="hljs-string">&quot;平方数&quot;</span>, fontsize = <span class="hljs-number">24</span>, fontproperties = <span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>)<br>ax.set_xlabel(<span class="hljs-string">&quot;值&quot;</span>, fontsize = <span class="hljs-number">14</span>, fontproperties = <span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>)<br>ax.set_ylabel(<span class="hljs-string">&quot;值的平方&quot;</span>, fontsize = <span class="hljs-number">14</span>, fontproperties = <span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>)<br><br><span class="hljs-comment"># 设置刻度标记的大小（axis = &#x27;both&#x27;：同时更改所有坐标轴）</span><br>ax.tick_params(axis = <span class="hljs-string">&#x27;both&#x27;</span>, labelsize = <span class="hljs-number">14</span>)<br><br>plt.show()<br></code></pre></td></tr></table></figure><p>结果如下：<br><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/img/image.6up2pl7vi340.png" alt="image"></p><p>发现，pyplot的自动生成数据好像不是很聪明，没有正确地绘制数据——折线图终点指出4的平方是25显然是不对的，下面来修复</p><p>向pyplot提供数据的时候，它会假设 x 从 0 开始，但是我们这里显然是从 1 开始。需要向pyplot<strong>同时提供输入值和输出值</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py">...<br>input_values = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>] <span class="hljs-comment"># x</span><br>squares = [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>] <span class="hljs-comment"># y</span><br>...<br>ax.plot(input_values, squares, linewidth = <span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><p>正常啦！<br><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/img/image.6jkthl0rnus0.png" alt="image"></p><h3 id="使用内置样式"><a href="#使用内置样式" class="headerlink" title="使用内置样式"></a>使用内置样式</h3><p>查看有什么内置样式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-meta">&gt;&gt;&gt; </span>plt.style.available<br>[<span class="hljs-string">&#x27;Solarize_Light2&#x27;</span>, <span class="hljs-string">&#x27;_classic_test_patch&#x27;</span>, <span class="hljs-string">&#x27;bmh&#x27;</span>, <span class="hljs-string">&#x27;classic&#x27;</span>, <span class="hljs-string">&#x27;dark_background&#x27;</span>, <span class="hljs-string">&#x27;fast&#x27;</span>, <span class="hljs-string">&#x27;fivethirtyeight&#x27;</span>, <span class="hljs-string">&#x27;ggplot&#x27;</span>, <span class="hljs-string">&#x27;grayscale&#x27;</span>, <span class="hljs-string">&#x27;seaborn&#x27;</span>, <span class="hljs-string">&#x27;seaborn-bright&#x27;</span>, <span class="hljs-string">&#x27;seaborn-colorblind&#x27;</span>, <span class="hljs-string">&#x27;seaborn-dark&#x27;</span>, <span class="hljs-string">&#x27;seaborn-dark-palette&#x27;</span>, <span class="hljs-string">&#x27;seaborn-darkgrid&#x27;</span>, <span class="hljs-string">&#x27;seaborn-deep&#x27;</span>, <span class="hljs-string">&#x27;seaborn-muted&#x27;</span>, <span class="hljs-string">&#x27;seaborn-notebook&#x27;</span>, <span class="hljs-string">&#x27;seaborn-paper&#x27;</span>, <span class="hljs-string">&#x27;seaborn-pastel&#x27;</span>, <span class="hljs-string">&#x27;seaborn-poster&#x27;</span>, <span class="hljs-string">&#x27;seaborn-talk&#x27;</span>, <span class="hljs-string">&#x27;seaborn-ticks&#x27;</span>, <span class="hljs-string">&#x27;seaborn-white&#x27;</span>, <span class="hljs-string">&#x27;seaborn-whitegrid&#x27;</span>, <span class="hljs-string">&#x27;tableau-colorblind10&#x27;</span>]<br></code></pre></td></tr></table></figure><p>使用样式：<br>在<strong>生成图表</strong>的代码前添加：<br><code>plt.style.use(&#39;seaborn-dark-palette&#39;)</code></p><h3 id="scatter-散点图"><a href="#scatter-散点图" class="headerlink" title="scatter( ) 散点图"></a>scatter( ) 散点图</h3><ol><li>向方法<code>scatter()</code>传递一对xy坐标，它将在(x, y)绘制一个点<br><code>ax.scatter(x, y)</code></li><li>向方法<code>scatter()</code>传递两个<strong>分别</strong>包含<strong>x值</strong>和<strong>y值</strong>的列表，可以绘制一系列的点</li></ol><p>（里面出现了新东西<code>ax.axis()设定坐标轴范围</code>）</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># -!- coding: utf-8 -!-</span><br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x_values = <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1001</span>) <span class="hljs-comment"># scatter是可以直接接收range的哦~</span><br>y_values = [x ** <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> x_values] <span class="hljs-comment"># 循环生成y值</span><br><br>plt.style.use(<span class="hljs-string">&#x27;seaborn&#x27;</span>)<br>fig, ax = plt.subplots()<br>ax.scatter(x_values, y_values, s = <span class="hljs-number">10</span>) <span class="hljs-comment"># s 设置散点的尺寸</span><br><br><span class="hljs-comment"># 设置标题及坐标轴标签</span><br>ax.set_title(<span class="hljs-string">&quot;平方数&quot;</span>, fontsize = <span class="hljs-number">24</span>, fontproperties = <span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>)<br>ax.set_xlabel(<span class="hljs-string">&quot;值&quot;</span>, fontsize = <span class="hljs-number">14</span>, fontproperties = <span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>)<br>ax.set_ylabel(<span class="hljs-string">&quot;值的平方&quot;</span>, fontsize = <span class="hljs-number">14</span>, fontproperties = <span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>)<br><br><span class="hljs-comment"># 设置刻度标记的大小（axis = &#x27;both&#x27;：同时更改所有坐标轴）</span><br>ax.tick_params(axis = <span class="hljs-string">&#x27;both&#x27;</span>, labelsize = <span class="hljs-number">14</span>)<br><br><span class="hljs-comment"># 设定各个坐标轴的取值范围</span><br>ax.axis([<span class="hljs-number">0</span>, <span class="hljs-number">1100</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1100000</span>])<br><br>plt.show()<br></code></pre></td></tr></table></figure><p>效果：<br><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/img/image.5dr3veuab1s0.png" alt="image"></p><h3 id="设置颜色"><a href="#设置颜色" class="headerlink" title="设置颜色"></a>设置颜色</h3><p>向scatter()传递参数c以设置颜色<br>可以是颜色的名称，也可以是RGB颜色</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py">ax.scatter(x_values, y_values, c = <span class="hljs-string">&#x27;red&#x27;</span>, s = <span class="hljs-number">10</span>)<br>ax.scatter(x_values, y_values, c = (<span class="hljs-number">0</span>, <span class="hljs-number">0.8</span>, <span class="hljs-number">0</span>), s = <span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure><p>也可以使用<strong>颜色映射</strong>（colormap），让scatter()按照一定的规律渐变颜色</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">ax.scatter(x_values, y_values, c = y_values, cmap = plt.cm.Blues, s = <span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure><p>效果如下：<br><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/img/image.lhjrr83c28w.png" alt="image"></p><h3 id="自动保存图表"><a href="#自动保存图表" class="headerlink" title="自动保存图表"></a>自动保存图表</h3><p>将调用<code>plt.show()</code>替换为<code>plt.savefig()</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">plt.savefig(<span class="hljs-string">&#x27;test.png&#x27;</span>, bbox_inches = <span class="hljs-string">&#x27;tight&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li>第一个实参指定文件名</li><li>第二个实参会将图表<strong>多余的空白区域</strong>裁剪掉（如果不想裁剪，不加第二个参数即可）</li></ul><h3 id="调整尺寸以适合屏幕"><a href="#调整尺寸以适合屏幕" class="headerlink" title="调整尺寸以适合屏幕"></a>调整尺寸以适合屏幕</h3><p>创建图表时，可以传递参数<strong>figsize</strong>以指定生成的图形的尺寸，需要给参数figsize指定一个<strong>元组</strong>，告诉Matplotlib绘图窗口的尺寸，单位为英寸（inch）（ 1 inch  ≈ 2.54 cm ）<br>如果知道当前系统的分辨率，还可以传递参数<strong>dpi</strong> (dots per inch，图像每英寸长度内的像素点数) 以有效利用屏幕空间</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">fig, ax = plt.subplots(figsize = (<span class="hljs-number">10</span>, <span class="hljs-number">6</span>), dpi = <span class="hljs-number">128</span>)<br></code></pre></td></tr></table></figure><blockquote><p>（有一个应用实例见P284，看了一遍感觉再写进来的意义不是很大，上面已经把一些实例里的新东西写进来了）</p></blockquote><blockquote><p>还有一个Python包Ployly，我感觉大同小异，也就不写了，见P292</p></blockquote><h2 id="CSV"><a href="#CSV" class="headerlink" title="CSV"></a>CSV</h2><h3 id="分析CSV文件头"><a href="#分析CSV文件头" class="headerlink" title="分析CSV文件头"></a>分析CSV文件头</h3><blockquote><p>CSV：以逗号分隔的值，comma-separated values</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> csv<br><br>filename = <span class="hljs-string">&#x27;...&#x27;</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename) <span class="hljs-keyword">as</span> f:<br>    reader = csv.reader(f)<br>    header_row = <span class="hljs-built_in">next</span>(reader)<br>    print(header_row)<br></code></pre></td></tr></table></figure><ul><li>调用<code>csv.reader(f)</code>，会返回一个关联到文件f的CSV阅读器对象，将这个阅读器对象赋给reader</li><li>csv模块中，包含函数<code>next()</code>，使用<code>next(reader)</code>，会返回csv阅读器reader的<strong>下一行</strong>；（上面的代码中，只调用了<code>next()</code>一次，所以得到的是文件的第一行，其中包含文件头）</li></ul><p>上述代码中的<code>print(header_row)</code>输出如下：<br><code>[&#39;NAME&#39;, &#39;ADDRESS&#39;, &#39;AGE&#39;, &#39;BIRTHDAY&#39;...]</code><br>也可以替换为这两句，来获取每个元素的索引及其值：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">for</span> index, column_header <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(header_row):<br>    print(index, column_header)<br></code></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-number">0</span> NAME<br><span class="hljs-number">1</span> <span class="hljs-keyword">ADDRESS</span><br><span class="hljs-keyword">2 </span>AGE<br><span class="hljs-number">3</span> <span class="hljs-keyword">BIRTHDAY</span><br><span class="hljs-keyword">...</span><br></code></pre></td></tr></table></figure><p>↑ 在上述for循环中，对列表调用了<code>enumerate()</code>来获取每个元素的<strong>索引</strong>及其<strong>值</strong></p><h3 id="提取并读取数据"><a href="#提取并读取数据" class="headerlink" title="提取并读取数据"></a>提取并读取数据</h3><p>以读取年龄为例</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> csv<br><br>filename = <span class="hljs-string">&#x27;...&#x27;</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename) <span class="hljs-keyword">as</span> f:<br>    reader = csv.reader(f)<br>    header_row = <span class="hljs-built_in">next</span>(reader)<br>    <br>    ages = [] <span class="hljs-comment"># 创建名为ages的空列表</span><br>    <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> reader: <span class="hljs-comment"># 遍历csv文件中余下的每一行</span><br>        age = <span class="hljs-built_in">int</span>(row[<span class="hljs-number">2</span>]) <span class="hljs-comment"># 由上面的分析csv文件头可知，年龄是第三列</span><br>        ages.append(age)<br></code></pre></td></tr></table></figure><h3 id="绘制图表"><a href="#绘制图表" class="headerlink" title="绘制图表"></a>绘制图表</h3><h4 id="datetime模块"><a href="#datetime模块" class="headerlink" title="datetime模块"></a>datetime模块</h4><p>比如说，要获取csv里每个人的生日<br>其中是这么存储的：<br><code>&quot;Lotus&quot;, &quot;Shenzhen&quot;, &quot;17&quot;, &quot;2002-9-16&quot;, ...</code><br>我们需要想办法，把”2002-9-16”转换为一个<strong>表示相应日期的对象</strong><br>可以使用模块datetime中的<code>strptime()</code>方法，将<strong>包含所需日期的字符串</strong>作为第一个实参，第二个实参用来告诉Python<strong>如何设置日期的格式</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> strptime<br>birthday = datetime.strptime(<span class="hljs-string">&quot;2002-9-16&quot;</span>, <span class="hljs-string">&quot;%Y-%m-%d&quot;</span>)<br></code></pre></td></tr></table></figure><p>在这里，</p><ul><li><code>%Y-</code>让python将字符串中的第一个<code>-</code>前面的部分视为四位的年份</li><li><code>%m-</code>让python将字符串中的第二个<code>-</code>前面的部分视为表示月份的数</li><li><code>%d</code>让python将字符串中的最后一部分视为月份中的一天<br>（类比C++中的格式控制符）</li></ul><p>一些常用实参如下：</p><table><thead><tr><th>实参</th><th>含义</th></tr></thead><tbody><tr><td>%A</td><td>星期几，如Monday</td></tr><tr><td>%B</td><td>月份名，如September</td></tr><tr><td>%m</td><td>用数表示的月份，01~12</td></tr><tr><td>%d</td><td>用数表示的月中某天，01~31</td></tr><tr><td>%Y</td><td>四位数年份</td></tr><tr><td>%y</td><td>年份后两位</td></tr><tr><td>%H</td><td>24小时制的小时数，00~23</td></tr><tr><td>%I</td><td>12小时制的小时数，01~12</td></tr><tr><td>%p</td><td>am或pm</td></tr><tr><td>%M</td><td>分钟数，00~59</td></tr><tr><td>%S</td><td>秒数， 00~61</td></tr><tr><td><del>（没错，就是到61秒）</del></td><td></td></tr></tbody></table><blockquote><p>p.s. <code>strftime()</code>是转换为特定格式输出，而<code>strptime()</code>是将一个（时间）字符串解析为时间的一个类型对象</p></blockquote><p>下面是一个例子：统计文件中，人们的出生日期，并且绘制出生日期和年龄的折线图 <strong>（没错，我都感觉这个例子太√⑧奇怪了；还不是因为我想和书上有点区别却又想了个这么不合适的情景555）</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> csv<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> strptime<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>filename = <span class="hljs-string">&#x27;...&#x27;</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename) <span class="hljs-keyword">as</span> f:<br>    reader = csv.reader(f)<br>    header_row = <span class="hljs-built_in">next</span>(reader) <span class="hljs-comment"># 先读掉文件头再说</span><br><br>    birthdays, ages = [], []<br>    <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> reader:<br>        <span class="hljs-comment"># 上文里假设了生日是第四列，年龄是第三列</span><br>        current_date = datetime.strptime(row[<span class="hljs-number">3</span>], <span class="hljs-string">&quot;%Y-%m-%d&quot;</span>)<br>        age = <span class="hljs-built_in">int</span>(row[<span class="hljs-number">2</span>])<br>        birthdays.append(current_date)<br>        ages.append(age)<br><br>fig, ax = plt.subplots()<br>ax.plot(birthdays, ages) <span class="hljs-comment"># 数据导入图表</span><br><br>ax.set_title(<span class="hljs-string">&quot;意义不明的生日年龄表&quot;</span>)<br><br>ax.set_xlabel(<span class="hljs-string">&#x27;&#x27;</span>, fontsize = <span class="hljs-number">16</span>)<br>fig.autofmt_xdate() <span class="hljs-comment">#见下</span><br><span class="hljs-meta">... </span><br><span class="hljs-meta">... </span><br></code></pre></td></tr></table></figure><p>其中<code>fig.autofmt_xdate()</code>是使绘制的日期标签<strong>倾斜</strong>，以避免其重叠</p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p><code>fill_between()</code>接受<strong>一个</strong>x值系列和<strong>两个</strong>y值系列，并<strong>填充</strong>两个y值系列之间的空间</p><ul><li>facecolor实参用于指定颜色</li><li>alpha实参用于设置透明度（0~1），1为完全不透明<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">ax.fill_between(dates, highs, lows, fac3color = <span class="hljs-string">&#x27;blue&#x27;</span>, alpha = <span class="hljs-number">0.1</span>)<br></code></pre></td></tr></table></figure><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2>p.s. 若得到的json杂乱无章吗，可以用python格式化一下<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py">...<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(new_readable_file, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    json.dump(origin_data, f, indent=<span class="hljs-number">4</span>) <span class="hljs-comment"># indent=4，缩进4</span><br></code></pre></td></tr></table></figure><blockquote><p>视情况再写，P314</p></blockquote></li></ul><h2 id="使用API"><a href="#使用API" class="headerlink" title="使用API"></a>使用API</h2><blockquote><p>API：Application Programming Interface，应用程序接口</p></blockquote><h3 id="安装Requests"><a href="#安装Requests" class="headerlink" title="安装Requests"></a>安装Requests</h3><p><code>python -m pip install --user requests</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-comment"># 这个API返回GitHub当前托管了多少个Python项目，以及有关最受欢迎的Python项目的信息</span><br>url = <span class="hljs-string">&#x27;https://api.github.com/search/repositories?q=language:python&amp;sort=stars&#x27;</span><br><br><span class="hljs-comment"># 显式地调用第三版的GitHub API</span><br>headers = &#123;<span class="hljs-string">&#x27;Accept&#x27;</span>: <span class="hljs-string">&#x27;application/vnd.github.v3+json&#x27;</span>&#125;<br><span class="hljs-comment"># 将响应对象赋给变量r</span><br>r = requests.get(url, headers=headers)<br><br><span class="hljs-comment"># 状态码200意味成功</span><br>print(<span class="hljs-string">f&quot;Status cpde: <span class="hljs-subst">&#123;r.status_code&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># 这个API返回json格式的信息，因此用json()方法将信息转换为一个Python字典</span><br>response_dict = r.json()<br><br>print(response_dict.keys())<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">Status cpde: <span class="hljs-number">200</span><br><span class="hljs-function"><span class="hljs-title">dict_keys</span><span class="hljs-params">([<span class="hljs-string">&#x27;total_count&#x27;</span>, <span class="hljs-string">&#x27;incomplete_results&#x27;</span>, <span class="hljs-string">&#x27;items&#x27;</span>])</span></span><br></code></pre></td></tr></table></figure><h3 id="处理响应字典"><a href="#处理响应字典" class="headerlink" title="处理响应字典"></a>处理响应字典</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&#x27;https://api.github.com/search/repositories?q=language:python&amp;sort=stars&#x27;</span><br>headers = &#123;<span class="hljs-string">&#x27;Accept&#x27;</span>: <span class="hljs-string">&#x27;application/vnd.github.v3+json&#x27;</span>&#125;<br>r = requests.get(url, headers=headers)<br>print(<span class="hljs-string">f&quot;Status cpde: <span class="hljs-subst">&#123;r.status_code&#125;</span>&quot;</span>)<br><br>response_dict = r.json()<br><span class="hljs-comment"># 打印total_count：GitHub一共有多少个python仓库</span><br>print(<span class="hljs-string">f&quot;Total repositories: <span class="hljs-subst">&#123;response_dict[<span class="hljs-string">&#x27;total_count&#x27;</span>]&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># 与&#x27;items&#x27;关联的是一个列表，列表中有很多字典，而每个字典又包含一个有关python仓库的信息。打印repo_dicts以获悉获得了多少个仓库的信息</span><br>repo_dicts = response_dict[<span class="hljs-string">&#x27;items&#x27;</span>]<br>print(<span class="hljs-string">f&quot;Respositories returned: <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(repo_dicts)&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># 提取第一个字典看一看</span><br><span class="hljs-comment">######################################</span><br>repo_dict = repo_dicts[<span class="hljs-number">0</span>]<br>print(<span class="hljs-string">f&quot;\nKeys: <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(repo_dict)&#125;</span>&quot;</span>)<br><span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> <span class="hljs-built_in">sorted</span>(repo_dict.keys()):<br>    print(key)<br><span class="hljs-comment">######################################</span><br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs txt">Status cpde: 200<br>Total repositories: 7353231<br>Respositories returned: 30 <br><br>Keys: 74<br>archive_url<br>archived<br>...<br></code></pre></td></tr></table></figure><p>修改一下上述程序#####之间的程序段，以便能提取出我们想要的有关第一个字典（第一个仓库）的相关信息：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs py">...<br><span class="hljs-comment">########################################################</span><br>repo_dict = repo_dicts[<span class="hljs-number">0</span>]<br>print(<span class="hljs-string">&quot;\nSelected information about first repository：&quot;</span>)<br>print(<span class="hljs-string">f&quot;Name: <span class="hljs-subst">&#123;repo_dict[<span class="hljs-string">&#x27;name&#x27;</span>]&#125;</span>&quot;</span>)<br>print(<span class="hljs-string">f&quot;Owner: <span class="hljs-subst">&#123;repo_dict[<span class="hljs-string">&#x27;owner&#x27;</span>][<span class="hljs-string">&#x27;login&#x27;</span>]&#125;</span>&quot;</span>)<br>print(<span class="hljs-string">f&quot;Stars: <span class="hljs-subst">&#123;repo_dict[<span class="hljs-string">&#x27;stargazers_count&#x27;</span>]&#125;</span>&quot;</span>)<br>print(<span class="hljs-string">f&quot;Repository: <span class="hljs-subst">&#123;repo_dict[<span class="hljs-string">&#x27;html_url&#x27;</span>]&#125;</span>&quot;</span>)<br><span class="hljs-comment">########################################################</span><br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs txt">Status cpde: 200<br>Total repositories: 7278320<br>Respositories returned: 30<br><br>Selected information about first repository：<br>Name: system-design-primer<br>Owner: donnemartin<br>Stars: 133664<br>Repository: https://github.com/donnemartin/system-design-primer<br></code></pre></td></tr></table></figure><h3 id="使用Plotly可视化仓库"><a href="#使用Plotly可视化仓库" class="headerlink" title="使用Plotly可视化仓库"></a>使用Plotly可视化仓库</h3><p>（好吧，其实之前没写Plotly也有一部分是因为反正写到这儿也要写）</p><h4 id="安装Plotly"><a href="#安装Plotly" class="headerlink" title="安装Plotly"></a>安装Plotly</h4><p><code>python -m pip install --user plotly</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># -!- coding: utf-8 -!-</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> plotly.graph_objs <span class="hljs-keyword">import</span> Bar<br><span class="hljs-keyword">from</span> plotly <span class="hljs-keyword">import</span> offline<br><br>url = <span class="hljs-string">&#x27;https://api.github.com/search/repositories?q=language:python&amp;sort=stars&#x27;</span><br>headers = &#123;<span class="hljs-string">&#x27;Accept&#x27;</span>: <span class="hljs-string">&#x27;application/vnd.github.v3+json&#x27;</span>&#125;<br>r = requests.get(url, headers=headers)<br>print(<span class="hljs-string">f&quot;Status code: <span class="hljs-subst">&#123;r.status_code&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># 处理结果</span><br>response_dict = r.json()<br>repo_dicts = response_dict[<span class="hljs-string">&#x27;items&#x27;</span>]<br><span class="hljs-comment">################## NEW ##################</span><br>repo_names, stars = [], []<br><span class="hljs-keyword">for</span> repo_dict <span class="hljs-keyword">in</span> repo_dicts:<br>    repo_names.append(repo_dict[<span class="hljs-string">&#x27;name&#x27;</span>])<br>    stars.append(repo_dict[<span class="hljs-string">&#x27;stargazers_count&#x27;</span>])<br><br><span class="hljs-comment"># 可视化</span><br>data = [&#123; <span class="hljs-comment"># 列表data包含一个字典，指定图表的类型并提供xy值</span><br>    <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;bar&#x27;</span>,<br>    <span class="hljs-string">&#x27;x&#x27;</span>: repo_names,<br>    <span class="hljs-string">&#x27;y&#x27;</span>: stars,<br>&#125;]<br>my_layout = &#123; <span class="hljs-comment"># 使用字典定义图表的布局</span><br>    <span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;GitHub上最受欢迎的Python项目&#x27;</span>,<br>    <span class="hljs-string">&#x27;xaxis&#x27;</span>: &#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;Repository&#x27;</span>&#125;,<br>    <span class="hljs-string">&#x27;yaxis&#x27;</span>: &#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;Stars&#x27;</span>&#125;,<br>&#125;<br><br>fig = &#123;<br>    <span class="hljs-string">&#x27;data&#x27;</span>: data,<br>    <span class="hljs-string">&#x27;layout&#x27;</span>: my_layout,<br>&#125;<br>offline.plot(fig, filename=<span class="hljs-string">&#x27;python_repos.html&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/img/image.59w9u8awfcg0.png" alt="image"></p><h4 id="改进Plotly图表"><a href="#改进Plotly图表" class="headerlink" title="改进Plotly图表"></a>改进Plotly图表</h4><p>可以在 <strong>data</strong> 和 <strong>my_layout</strong> 中，以<strong>键值对</strong>的形式指定各种样式</p><ol><li>通过修改data，可以定制条形<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs py">data = [&#123;<br>    <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;bar&#x27;</span>,<br>    <span class="hljs-string">&#x27;x&#x27;</span>: repo_names,<br>    <span class="hljs-string">&#x27;y&#x27;</span>: stars,<br>    <span class="hljs-string">&#x27;marker&#x27;</span>: &#123;<br>        <span class="hljs-comment"># 条形颜色</span><br>        <span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;rgb(60, 100, 150)&#x27;</span>,<br>        <span class="hljs-comment"># 条形边框</span><br>        <span class="hljs-string">&#x27;line&#x27;</span>: &#123;<span class="hljs-string">&#x27;width&#x27;</span>: <span class="hljs-number">1.5</span>, <span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;rgb(25, 25, 25)&#x27;</span>&#125;<br>    &#125;,<br>    <span class="hljs-comment"># 条形不透明度</span><br>    <span class="hljs-string">&#x27;opacity&#x27;</span>: <span class="hljs-number">0.6</span>,<br>&#125;]<br></code></pre></td></tr></table></figure></li><li>修改my_layout更改其他布局<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs py">my_layout = &#123;<br>    <span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;GitHub上最受欢迎的Python项目&#x27;</span>,<br>    <span class="hljs-string">&#x27;xaxis&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;Repository&#x27;</span>,<br>        <span class="hljs-string">&#x27;titlefont&#x27;</span>: &#123;<span class="hljs-string">&#x27;size&#x27;</span>: <span class="hljs-number">24</span>&#125;,<br>        <span class="hljs-string">&#x27;tickfont&#x27;</span>: &#123;<span class="hljs-string">&#x27;size&#x27;</span>: <span class="hljs-number">14</span>&#125;, <span class="hljs-comment"># 刻度标签字号</span><br>    &#125;,<br>    <span class="hljs-string">&#x27;yaxis&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;Stars&#x27;</span>,<br>        <span class="hljs-string">&#x27;titlefont&#x27;</span>: &#123;<span class="hljs-string">&#x27;size&#x27;</span>: <span class="hljs-number">24</span>&#125;,<br>        <span class="hljs-string">&#x27;tickfont&#x27;</span>: &#123;<span class="hljs-string">&#x27;size&#x27;</span>: <span class="hljs-number">14</span>&#125;, <span class="hljs-comment"># 刻度标签字号</span><br>    &#125;,<br>&#125;<br></code></pre></td></tr></table></figure>效果如下：<br><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/img/image.7dz1sa9wzhc0.png" alt="image"></li></ol><h5 id="添加自定义工具提示"><a href="#添加自定义工具提示" class="headerlink" title="添加自定义工具提示"></a>添加自定义工具提示</h5><p>在Plotly中，将鼠标指向条形将显示其表示的信息，称为<strong>工具提示</strong><br>下面来创建工具提示，以显示项目的描述和所有者</p><p>为此，需要再提取一些信息并修改对象data</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs py">...<br><span class="hljs-comment"># 处理结果</span><br>response_dict = r.json()<br>repo_dicts = response_dict[<span class="hljs-string">&#x27;items&#x27;</span>]<br>repo_names, stars, labels = [], [], [] <span class="hljs-comment">#### NEW ####</span><br><span class="hljs-keyword">for</span> repo_dict <span class="hljs-keyword">in</span> repo_dicts:<br>    repo_names.append(repo_dict[<span class="hljs-string">&#x27;name&#x27;</span>])<br>    stars.append(repo_dict[<span class="hljs-string">&#x27;stargazers_count&#x27;</span>])<br><br>    <span class="hljs-comment">#### NEW ####</span><br>    owner = repo_dict[<span class="hljs-string">&#x27;owner&#x27;</span>][<span class="hljs-string">&#x27;login&#x27;</span>]<br>    description = repo_dict[<span class="hljs-string">&#x27;description&#x27;</span>]<br>    label = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;owner&#125;</span>&lt;br /&gt;<span class="hljs-subst">&#123;description&#125;</span>&quot;</span><br>    labels.append(label)<br><br><span class="hljs-comment"># 可视化</span><br>data = [&#123;<br>    <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;bar&#x27;</span>,<br>    <span class="hljs-string">&#x27;x&#x27;</span>: repo_names,<br>    <span class="hljs-string">&#x27;y&#x27;</span>: stars,<br>    <span class="hljs-string">&#x27;hovertext&#x27;</span>: labels, <span class="hljs-comment">#### NEW ####</span><br>    <span class="hljs-string">&#x27;marker&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;rgb(60, 100, 150)&#x27;</span>,<br>        <span class="hljs-string">&#x27;line&#x27;</span>: &#123;<span class="hljs-string">&#x27;width&#x27;</span>: <span class="hljs-number">1.5</span>, <span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;rgb(25, 25, 25)&#x27;</span>&#125;<br>    &#125;,<br>    <span class="hljs-string">&#x27;opacity&#x27;</span>: <span class="hljs-number">0.6</span>,<br>&#125;]<br>my_layout = &#123;<br>...<br></code></pre></td></tr></table></figure><p>新建一个空列表labels，用于存储要给各个项目（各个条形）显示的文本<br>Plotly允许在文本元素中使用<strong>HTML代码</strong>（注意规范的换行符 br 和 / 间有空格）</p><p>效果如下：<br><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/img/image.11xbfy3ywfhs.png" alt="image"></p><h5 id="添加可单击的链接"><a href="#添加可单击的链接" class="headerlink" title="添加可单击的链接"></a>添加可单击的链接</h5><p>下面来实现点击x轴对应的项目名来跳转至相应的GitHub主页</p><p>上文中，x轴对应的值的列表是<code>repo_names</code>，我们先改名为<code>repo_links</code>使程序更为清晰<br>修改处理结果的部分程序，并将data中x的数据源换为<code>repo_links</code></p><p><strong>最终完整程序</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># -!- coding: utf-8 -!-</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> plotly.graph_objs <span class="hljs-keyword">import</span> Bar<br><span class="hljs-keyword">from</span> plotly <span class="hljs-keyword">import</span> offline<br><br>url = <span class="hljs-string">&#x27;https://api.github.com/search/repositories?q=language:python&amp;sort=stars&#x27;</span><br>headers = &#123;<span class="hljs-string">&#x27;Accept&#x27;</span>: <span class="hljs-string">&#x27;application/vnd.github.v3+json&#x27;</span>&#125;<br>r = requests.get(url, headers=headers)<br>print(<span class="hljs-string">f&quot;Status cpde: <span class="hljs-subst">&#123;r.status_code&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># 处理结果</span><br>response_dict = r.json()<br>repo_dicts = response_dict[<span class="hljs-string">&#x27;items&#x27;</span>]<br>repo_links, stars, labels = [], [], [] <br><span class="hljs-keyword">for</span> repo_dict <span class="hljs-keyword">in</span> repo_dicts:<br>    repo_name = repo_dict[<span class="hljs-string">&#x27;name&#x27;</span>]<br>    repo_url = repo_dict[<span class="hljs-string">&#x27;html_url&#x27;</span>]<br>    repo_link = <span class="hljs-string">f&quot;&lt;a href=&#x27;<span class="hljs-subst">&#123;repo_url&#125;</span>&#x27;&gt;<span class="hljs-subst">&#123;repo_name&#125;</span>&lt;/a&gt;&quot;</span><br>    repo_links.append(repo_link)<br><br>    stars.append(repo_dict[<span class="hljs-string">&#x27;stargazers_count&#x27;</span>])<br><br>    owner = repo_dict[<span class="hljs-string">&#x27;owner&#x27;</span>][<span class="hljs-string">&#x27;login&#x27;</span>]<br>    description = repo_dict[<span class="hljs-string">&#x27;description&#x27;</span>]<br>    label = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;owner&#125;</span>&lt;br /&gt;<span class="hljs-subst">&#123;description&#125;</span>&quot;</span><br>    labels.append(label)<br><br><span class="hljs-comment"># 可视化</span><br>data = [&#123;<br>    <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;bar&#x27;</span>,<br>    <span class="hljs-string">&#x27;x&#x27;</span>: repo_links,<br>    <span class="hljs-string">&#x27;y&#x27;</span>: stars,<br>    <span class="hljs-string">&#x27;hovertext&#x27;</span>: labels, <br>    <span class="hljs-string">&#x27;marker&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;rgb(60, 100, 150)&#x27;</span>,<br>        <span class="hljs-string">&#x27;line&#x27;</span>: &#123;<span class="hljs-string">&#x27;width&#x27;</span>: <span class="hljs-number">1.5</span>, <span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;rgb(25, 25, 25)&#x27;</span>&#125;<br>    &#125;,<br>    <span class="hljs-string">&#x27;opacity&#x27;</span>: <span class="hljs-number">0.6</span>,<br>&#125;]<br>my_layout = &#123;<br>    <span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;GitHub上最受欢迎的Python项目&#x27;</span>,<br>    <span class="hljs-string">&#x27;xaxis&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;Repository&#x27;</span>,<br>        <span class="hljs-string">&#x27;titlefont&#x27;</span>: &#123;<span class="hljs-string">&#x27;size&#x27;</span>: <span class="hljs-number">24</span>&#125;,<br>        <span class="hljs-string">&#x27;tickfont&#x27;</span>: &#123;<span class="hljs-string">&#x27;size&#x27;</span>: <span class="hljs-number">14</span>&#125;,<br>    &#125;,<br>    <span class="hljs-string">&#x27;yaxis&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;Stars&#x27;</span>,<br>        <span class="hljs-string">&#x27;titlefont&#x27;</span>: &#123;<span class="hljs-string">&#x27;size&#x27;</span>: <span class="hljs-number">24</span>&#125;,<br>        <span class="hljs-string">&#x27;tickfont&#x27;</span>: &#123;<span class="hljs-string">&#x27;size&#x27;</span>: <span class="hljs-number">14</span>&#125;, <br>    &#125;,<br>&#125;<br><br>fig = &#123;<br>    <span class="hljs-string">&#x27;data&#x27;</span>: data,<br>    <span class="hljs-string">&#x27;layout&#x27;</span>: my_layout,<br>&#125;<br>offline.plot(fig, filename=<span class="hljs-string">&#x27;python_repos.html&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python学习笔记1</title>
    <link href="/2021/06/01/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/"/>
    <url>/2021/06/01/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</url>
    
    <content type="html"><![CDATA[<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">str</span>.title() <span class="hljs-comment">#首字母大写</span><br><span class="hljs-built_in">str</span>.upper() <span class="hljs-comment">#大写</span><br><span class="hljs-built_in">str</span>.lower() <span class="hljs-comment">#小写</span><br><br> <span class="hljs-comment">#f字符串(&quot;format&quot;)，字符串前加f，将要插入发变量放到&#123;&#125;里 （3.6之后）</span><br> first_name = <span class="hljs-string">&quot;aster&quot;</span><br> last_name = <span class="hljs-string">&quot;izayoi&quot;</span><br> print(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;first_name.title()&#125;</span><span class="hljs-subst">&#123;last_name.title()&#125;</span>&quot;</span>) <span class="hljs-comment">#IzayoiAster</span><br><br> <span class="hljs-comment">#删除空格 （strip：剥去，除去）</span><br> <span class="hljs-comment">#lstrip左空格 rstrip右 strip两侧</span><br> <span class="hljs-comment">#不改变原变量，若需要改变需要给原变量赋值</span><br> name = <span class="hljs-string">&quot;IzayoiAster   &quot;</span><br> print(name.strip()) <span class="hljs-comment">#IzayoiAster</span><br> print(name) <span class="hljs-comment">#IzayoiAster___</span><br></code></pre></td></tr></table></figure><h3 id="数"><a href="#数" class="headerlink" title="数"></a>数</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-number">3</span> ** <span class="hljs-number">2</span> <span class="hljs-comment">#乘方，9</span><br><br><span class="hljs-comment">#结果包含的小数位可能是不确定的</span><br><span class="hljs-comment">#将任意两个数相除时，结果总是浮点数，即使都是整数且能整除</span><br><br><span class="hljs-comment">#可以使用下划线将数字分组</span><br>age = <span class="hljs-number">114_514_1919_810</span><br>print(age) <span class="hljs-comment">#1145141919810</span><br><br><span class="hljs-comment">#同时给xyz赋值</span><br>x, y, z = <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py">eg = [<span class="hljs-string">&#x27;eg1&#x27;</span>, <span class="hljs-string">&#x27;eg2&#x27;</span>, <span class="hljs-string">&#x27;eg3&#x27;</span>]<br>eg[-<span class="hljs-number">1</span>] <span class="hljs-comment">#&#x27;eg3&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="列表加减"><a href="#列表加减" class="headerlink" title="列表加减"></a>列表加减</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py">eg.append(<span class="hljs-string">&#x27;eg4&#x27;</span>) <span class="hljs-comment">#[&#x27;eg1&#x27;, &#x27;eg2&#x27;, &#x27;eg3&#x27;, &#x27;eg4&#x27;]</span><br><span class="hljs-keyword">del</span> eg[<span class="hljs-number">1</span>] <span class="hljs-comment">#[&#x27;eg1&#x27;, &#x27;eg3&#x27;, &#x27;eg4&#x27;]</span><br>eg.insert(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;eg2&#x27;</span>) <span class="hljs-comment">#[&#x27;eg1&#x27;, &#x27;eg2&#x27;, &#x27;eg3&#x27;, &#x27;eg4&#x27;] (插入到第1位，原来的1及右边的，右移1)</span><br><br><span class="hljs-comment">#对比del，pop(id)可以在删除时获取值，若不加参数则为pop末尾元素</span><br>poped_eg = eg.pop() <span class="hljs-comment">#[&#x27;eg1&#x27;, &#x27;eg2&#x27;, &#x27;eg3&#x27;]</span><br><br><span class="hljs-comment">#remove: 根据值删除</span><br>eg.remove(<span class="hljs-string">&#x27;eg3&#x27;</span>) <span class="hljs-comment">#[&#x27;eg1&#x27;, &#x27;eg2&#x27;]</span><br><span class="hljs-comment">#注意：remove只删除 第一个 值，如果出现对此，需要循环remove</span><br></code></pre></td></tr></table></figure><h4 id="组织列表"><a href="#组织列表" class="headerlink" title="组织列表"></a>组织列表</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py">eg.sort() <span class="hljs-comment">#永久排序</span><br>eg.<span class="hljs-built_in">sorted</span>() <span class="hljs-comment">#临时（eg本身不变）</span><br>eg.reverse() <span class="hljs-comment">#永久倒序</span><br><br><span class="hljs-built_in">len</span>(eg) <span class="hljs-comment">#长度</span><br></code></pre></td></tr></table></figure><h4 id="创建数值列表"><a href="#创建数值列表" class="headerlink" title="创建数值列表"></a>创建数值列表</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>): <br><span class="hljs-comment">#range(a, b): [a, b)内的整数</span><br><br><span class="hljs-comment">#注意：range没有reverse成员函数，可以用list()先转为列表</span><br><br>even_nums = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">11</span>, <span class="hljs-number">2</span>)) <span class="hljs-comment">#第三个2 意为 步长为2</span><br>even_nums.reverse()<br>print(even_nums) <span class="hljs-comment">#[10, 8, 6, 4, 2]</span><br><br><span class="hljs-comment">#当然，上面的等价于这个</span><br>even_nums = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">2</span>))<br>print(even_nums) <span class="hljs-comment">#[10, 8, 6, 4, 2]</span><br><br><span class="hljs-comment">#列表统计</span><br><span class="hljs-built_in">min</span>(nums), <span class="hljs-built_in">max</span>(nums), <span class="hljs-built_in">sum</span>(nums)<br><br><span class="hljs-comment">#列表解析</span><br>square = [value ** <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">11</span>)]<br><span class="hljs-comment">#[表达式 为表达式提供值的循环]</span><br></code></pre></td></tr></table></figure><h4 id="使用列表的一部分"><a href="#使用列表的一部分" class="headerlink" title="使用列表的一部分"></a>使用列表的一部分</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#切片</span><br>eg = [<span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>]<br>eg[<span class="hljs-number">1</span> : <span class="hljs-number">3</span>] <span class="hljs-comment">#[&#x27;1&#x27;, &#x27;2&#x27;]，经典左开右闭</span><br>eg[ : <span class="hljs-number">3</span>] <span class="hljs-comment">#[&#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;]，从头开始</span><br>eg[<span class="hljs-number">3</span> : ] <span class="hljs-comment">#[&#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;]，直到最后</span><br>ed[-<span class="hljs-number">3</span> : ] <span class="hljs-comment">#[&#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;] </span><br><span class="hljs-comment">#切片可放在for里</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> eg[<span class="hljs-number">3</span> : ]:<br></code></pre></td></tr></table></figure><h5 id="赋值列表"><a href="#赋值列表" class="headerlink" title="赋值列表"></a>赋值列表</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py">eg1 = [......]<br>eg2 = eg1[:] <span class="hljs-comment">#eg2由eg1复制而来，修改eg1时，eg2不变</span><br><br><span class="hljs-comment">#注意区分 ↓</span><br>eg2 = eg1 <span class="hljs-comment">#可以理解成：eg2是指向eg1的一个“指针”，修改eg1时，eg2也改变</span><br></code></pre></td></tr></table></figure><h4 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h4><p>理解为不可变的列表即可</p><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">and</span>, <span class="hljs-keyword">or</span><br><br><span class="hljs-keyword">if</span> value <span class="hljs-keyword">in</span> nums:<br>    ... ...<br><span class="hljs-keyword">if</span> value <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> nums:<br>    ... ...<br><br><span class="hljs-keyword">if</span> - <span class="hljs-keyword">elif</span> - <span class="hljs-keyword">else</span><br>不强制有<span class="hljs-keyword">else</span>语句<br><br><span class="hljs-comment">#检查空列表</span><br>nums = [...]<br><span class="hljs-keyword">if</span> nums:<br>    ......<br><span class="hljs-keyword">else</span>:<br>    print(<span class="hljs-string">&quot;列表为空！&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><p>类比C++的<code>map</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs py">my_empty_dict = &#123;&#125; <span class="hljs-comment">#空字典</span><br>my_dict = &#123;<span class="hljs-string">&#x27;key1&#x27;</span>:<span class="hljs-string">&#x27;value1&#x27;</span>, <span class="hljs-string">&#x27;key2&#x27;</span>:<span class="hljs-string">&#x27;value2&#x27;</span>&#125;<br>print(my_dict) <span class="hljs-comment">#&#123;&#x27;key1&#x27;: &#x27;value1&#x27;, &#x27;key2&#x27;: &#x27;value2&#x27;&#125;</span><br><br><span class="hljs-comment">#添加键值对</span><br>my_dict[<span class="hljs-string">&#x27;key3&#x27;</span>] = <span class="hljs-string">&#x27;value3&#x27;</span><br>print(my_dict) <span class="hljs-comment">#&#123;&#x27;key1&#x27;: &#x27;value1&#x27;, &#x27;key2&#x27;: &#x27;value2&#x27;, &#x27;key3&#x27;: &#x27;value3&#x27;&#125;</span><br><span class="hljs-comment">#py3.7中，元素的排列顺序与定义时相同</span><br><br><span class="hljs-keyword">del</span> my_dict[<span class="hljs-string">&#x27;key3&#x27;</span>]<br><br>如果使用了 my_dict[<span class="hljs-string">&#x27;key4&#x27;</span>] 会报错，有需要的话可以用 my_dict.get(<span class="hljs-string">&#x27;key4&#x27;</span>)<br>会返回 No value assigned.<br>所以如果指定的key有可能不存在，应用get而不是[]<br></code></pre></td></tr></table></figure><h4 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#遍历键</span><br><span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> my_dict.items():<br><span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> my_dict.keys(): <span class="hljs-comment">#显式</span><br><span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> my_dict: <span class="hljs-comment">#隐式</span><br><span class="hljs-comment">#按序遍历键</span><br><span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> <span class="hljs-built_in">sorted</span>(my_dict.keys()):<br><br><span class="hljs-comment">#遍历值（有重复）</span><br><span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> my_dict.values():<br><span class="hljs-comment">#遍历值（去重！）</span><br><span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> my_dict.<span class="hljs-built_in">set</span>():<br></code></pre></td></tr></table></figure><p>列表和字典可以互相嵌套</p><h3 id="input"><a href="#input" class="headerlink" title="input"></a>input</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py">name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Input your name: &quot;</span>)<br>age = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Input your age: &quot;</span>))<br></code></pre></td></tr></table></figure><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><p>懂得都懂：<code>True, False, continue, break</code><br>例：在列表间移动元素</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">check</span>(<span class="hljs-params">data</span>):</span><br>    ...<br><br>unchecked_datas = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>checked_datas = []<br><br><span class="hljs-keyword">while</span> unchecked_datas:<br>    cur_data = unchecked_datas.pop()<br>    chekc(cur_data)<br>    check_data.append(cur_data)<br></code></pre></td></tr></table></figure><p>上文说过的 用remove删除全部重复元素：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">while</span> target <span class="hljs-keyword">in</span> list_:<br>    list_.remove(target)<br></code></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#关键字实参（不必有序）</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">my_func</span>(<span class="hljs-params">para2, para1</span>):</span><br>    ...<br><br>my_func(para1 = <span class="hljs-string">&#x27;para1&#x27;</span>, para2 = <span class="hljs-string">&#x27;para2&#x27;</span>)<br></code></pre></td></tr></table></figure><p>结合上文可知，传参为list时，<code>fun(list)</code>和<code>fun(list[:])</code>不同（略）</p><h4 id="传递任意数量的实参"><a href="#传递任意数量的实参" class="headerlink" title="传递任意数量的实参"></a>传递任意数量的实参</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># case 1</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">printNums</span>(<span class="hljs-params">*nums</span>):</span> <span class="hljs-comment">#创建了一个名为nums的元组</span><br>    <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> nums:<br>        ...<br><br>printNums(<span class="hljs-number">1</span>)<br>printNums(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br><br><span class="hljs-comment"># case 2</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">buildProfile</span>(<span class="hljs-params">first, last, **profile</span>):</span> <span class="hljs-comment">#名为profile的字典</span><br>    profile[<span class="hljs-string">&#x27;first_name&#x27;</span>] = first<br>    profile[<span class="hljs-string">&#x27;second_name&#x27;</span>] = second<br>    <span class="hljs-keyword">return</span> profile<br>    <span class="hljs-comment">#解释一下，必须提供名和姓，如果还有额外的属性，则也存进字典profile中，最后一并返回</span><br><br>user_profile = buildProfile(<span class="hljs-string">&#x27;Aster&#x27;</span>, <span class="hljs-string">&#x27;Izayoi&#x27;</span>, sister:<span class="hljs-string">&#x27;IzayoiLotus&#x27;</span>, age:<span class="hljs-string">&#x27;18&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="将函数存储在模块中"><a href="#将函数存储在模块中" class="headerlink" title="将函数存储在模块中"></a>将函数存储在模块中</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># ex.py</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">myFun</span>():</span><br>    ...<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># main.py</span><br><span class="hljs-keyword">import</span> ex<br><br>ex.myFun()<br></code></pre></td></tr></table></figure><p>ex.py即为一个模块；也可以从模块中导入特定函数：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> ex <span class="hljs-keyword">import</span> myFun<br><br>myFun()<br></code></pre></td></tr></table></figure><p>可以给模块或函数起别名，后加<code>as &lt;nickname&gt;</code>即可<br><code>from ex import *</code>：导入ex中的所有函数（不推荐）</p><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><h4 id="创建类"><a href="#创建类" class="headerlink" title="创建类"></a>创建类</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, age</span>):</span><br>        self.name = name<br>        self.age = age<br></code></pre></td></tr></table></figure><p><code>__init__</code>即构造函数，self类比C++ this</p><p>感觉OO语言都差不多，类这块儿也略着写了（逃）</p><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, age</span>):</span><br>        ...<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span>(<span class="hljs-params">Animal</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, age, <span class="hljs-built_in">type</span></span>):</span><br>        <span class="hljs-comment">#super()是其父类，可以理解成C++的 Animal::（？不确定）</span><br>        <span class="hljs-built_in">super</span>().__init__(name, age)<br>        self.<span class="hljs-built_in">type</span> = <span class="hljs-built_in">type</span><br></code></pre></td></tr></table></figure><h5 id="重写父类"><a href="#重写父类" class="headerlink" title="重写父类"></a>重写父类</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span>:</span><br>    ...<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">whatAnimal</span>():</span><br>        print(<span class="hljs-string">&quot;Unknown&quot;</span>)<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span>(<span class="hljs-params">Animal</span>):</span><br>    ...<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">whatAnimal</span>():</span> <span class="hljs-comment">#重写了</span><br>        print(<span class="hljs-string">&quot;I&#x27;m a dog!&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="将实例用作属性"><a href="#将实例用作属性" class="headerlink" title="将实例用作属性"></a>将实例用作属性</h4><blockquote><p>使用代码模拟实物时，可能会发现类的细节越来越多<br>这种情况下，可以将类的一部分提取出来，作为一个独立的类</p></blockquote><blockquote><p>例如，不断给ElectricCar类添加细节，可能发现很多和电瓶有关的属性和方法。这种情况下，可以将这些属性和方法提取出来，放到一个新的名为Battery的类中。<strong>并将一个Battery实例作为ElectricCar类的属性</strong></p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span>:</span><br>    ...<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Battery</span>:</span><br>    ...<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ElectricCar</span>(<span class="hljs-params">Car</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, model, year</span>):</span><br>        <span class="hljs-built_in">super</span>().__init__(model, year)<br>        self.battery = Battery() <span class="hljs-comment">#创建一个新的Battery实例，将其作为ECar类的属性</span><br></code></pre></td></tr></table></figure><h4 id="从模块中导入类"><a href="#从模块中导入类" class="headerlink" title="从模块中导入类"></a>从模块中导入类</h4><p>同函数<br>可导入多个类，用逗号分隔</p><h4 id="Py标准库"><a href="#Py标准库" class="headerlink" title="Py标准库"></a>Py标准库</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#eg</span><br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br>randint(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>) <span class="hljs-comment">#1，6间随机整数</span><br><br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> choice<br>members = [<span class="hljs-string">&#x27;Aster&#x27;</span>, <span class="hljs-string">&#x27;Lotus&#x27;</span>]<br>lucky_baby = choice(members) <span class="hljs-comment">#choice从元组或列表中随机选取一个元素</span><br></code></pre></td></tr></table></figure><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><p>只管打开文件就好，Python自会在合适的时候将其关闭</p><h4 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h4><blockquote><p>显示文件路径时，Windows使用反斜杠( \ )而不是斜杠( / )，但是在代码中依然可以使用斜杠( / )</p></blockquote><blockquote><p>读取文本文件时，Python全部是为字符串，如果要读取数值并使用，应使用 int( ) 或 float( )</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#eg</span><br>file_path = <span class="hljs-string">&#x27;/home/aster/test.txt&#x27;</span><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path) <span class="hljs-keyword">as</span> file_test:<br>    contents = file_test.read() <span class="hljs-comment">#read()可以读取文件的全部内容</span><br>    print(contents.rstrip())<br><br>    <span class="hljs-comment">#逐行读取</span><br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> file_test:<br>        print(line.rstrip())<br></code></pre></td></tr></table></figure><p>为什么上面两个print都要加<code>.rstrip()</code>：因为每行末尾都有隐含的换行符，如果再加上print的自动换行就会换两次行</p><p>使用关键字 <strong>with</strong> 时，<code>open()</code>返回的文件对象只在with代码块内可用。如果要在代码块之外访问文件，可以在with代码块内<strong>将文件的各行存储在一个列表里</strong><br><code>.readlines()</code>方法可以读取文件的每一行，并将他妈储存在一个列表里</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename) <span class="hljs-keyword">as</span> file_test:<br>    lines = file_test.readlines()<br><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>    print(line.rstrip()) <span class="hljs-comment">#在with代码块之外也可以使用啦</span><br></code></pre></td></tr></table></figure><p>例：圆周率里包含你的生日吗？</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(pi.txt) <span class="hljs-keyword">as</span> pi:<br>    lines = pi.readlines()<br><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>    pi_string += line.strip() <span class="hljs-comment">#将pi的每一行组成一串pi字符串</span><br><br>birthday = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Please input your birthday: &quot;</span>)<br><span class="hljs-keyword">if</span> birthday <span class="hljs-keyword">in</span> pi_string:<br>    print(<span class="hljs-string">&quot;Including!&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="文件写入"><a href="#文件写入" class="headerlink" title="文件写入"></a>文件写入</h4><p>写入使用<code>.write()</code></p><h5 id="open-的参数"><a href="#open-的参数" class="headerlink" title="open( )的参数"></a>open( )的参数</h5><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>空</td><td>默认只读</td></tr><tr><td>r</td><td>读取模式</td></tr><tr><td>w</td><td>写入模式</td></tr><tr><td>a</td><td>附加模式</td></tr><tr><td>r+</td><td>读写模式</td></tr></tbody></table><blockquote><p>  Python只能将字符串写入文本文件中，存储数值时，必须先用 str( ) 转为字符串</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> file_test:<br>    file_test.write(<span class="hljs-string">&quot;write不会自动换行\n&quot;</span>)<br>    file_test.write(<span class="hljs-string">&quot;所以不要忘了手动添加换行符哦\n&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="分析文本"><a href="#分析文本" class="headerlink" title="分析文本"></a>分析文本</h4><p>方法<code>spilt()</code>以空格为分隔符将字符串拆分，并将拆开的每一部分存储到一个列表中</p><h4 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h4><p>使用了JSON (JavaScript Object Notation)</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py">json.dump(data_list, target_file)  <span class="hljs-comment"># json存储，dump(数据列表, 目标文件)</span><br>json.load(data_list, target_file)  <span class="hljs-comment"># json读取，load(目标数据列表, 被读取的文件)</span><br></code></pre></td></tr></table></figure><p>不是很好说，直接看例子吧</p><p>例：编写一个程序，在用户首次运行程序时，提示输入自己的名字，并在再次运行程序的时候记住他</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 1.remember_user.py</span><br><span class="hljs-keyword">import</span> json<br><br>username = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;What&#x27;s your name? &quot;</span>)<br><br>filename = <span class="hljs-string">&#x27;username.json&#x27;</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    json.dump(username, f)<br>    print(<span class="hljs-string">f&quot;We&#x27;ll remember you when you come back, <span class="hljs-subst">&#123;username&#125;</span>!&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 2.greet_user.py</span><br><span class="hljs-keyword">import</span> json<br><br>filename = <span class="hljs-string">&#x27;username.json&#x27;</span><br><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename) <span class="hljs-keyword">as</span> f:<br>        username = json.load(f)<br><span class="hljs-keyword">except</span> FileNotFoundError: <span class="hljs-comment"># 以前并未存储用户名</span><br>    username = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;What is your name?&quot;</span>)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        json.dump(username, f) <br>        print(<span class="hljs-string">f&quot;We&#x27;ll remember you when you come back, <span class="hljs-subst">&#123;username&#125;</span>!&quot;</span>)<br><span class="hljs-keyword">else</span>: <span class="hljs-comment"># 若存储过用户名，会在try中打开了json并导入</span><br>    print(<span class="hljs-string">f&quot;Welcome back, <span class="hljs-subst">&#123;username&#125;</span>!&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="一些报错"><a href="#一些报错" class="headerlink" title="一些报错"></a>一些报错</h3><p>若报错<code>SyntaxError: Non-UTF-8 code starting with &#39;\xc8&#39; in file</code>，可能是因为xxxx.py文件里面有中文字符<br>解决方案：开头加上</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># -!- coding: utf-8 -!-</span><br></code></pre></td></tr></table></figure><p>若报错<code>(unicode error) &#39;utf-8&#39; codec can&#39;t decode byte 0xb7 in position xxx</code><br>解决方案：把编译环境的编码切换为UTF-8</p><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>（P174 有需求再看）</p>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hadoop学习笔记二</title>
    <link href="/2021/04/15/Hadoop%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/"/>
    <url>/2021/04/15/Hadoop%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<h4 id="客户端代码常见套路"><a href="#客户端代码常见套路" class="headerlink" title="客户端代码常见套路"></a>客户端代码常见套路</h4><p>1.获取一个客户端对象<br>2.执行相关的操作命令<br>3.关闭资源<br>eg: HDFS ZooKeeper</p><h4 id="IDEA技巧"><a href="#IDEA技巧" class="headerlink" title="IDEA技巧"></a>IDEA技巧</h4><p>抛异常：光标放上去后<code>Alt + Enter，↑↓</code><br>提示函数参数：<code>Ctrl + P</code><br>全部格式化：<code>Ctrl + Alt + L</code><br>变量变为属性（全局变量）：<code>Ctrl + Alt + F</code></p><h3 id="slf4j报错"><a href="#slf4j报错" class="headerlink" title="slf4j报错"></a>slf4j报错</h3><p>（未知解决方案）</p>]]></content>
    
    
    
    <tags>
      
      <tag>Hadoop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VSCode快捷编译</title>
    <link href="/2021/03/21/VSCode%E5%BF%AB%E6%8D%B7%E7%BC%96%E8%AF%91/"/>
    <url>/2021/03/21/VSCode%E5%BF%AB%E6%8D%B7%E7%BC%96%E8%AF%91/</url>
    
    <content type="html"><![CDATA[<p>之前用VSCode的时候，为了编译C++还配置了半天。一个寒假过去不知道咋回事，配置不好使了。<br>正打算再配置一遍，突然发现一个懒狗插件——<code>Code Runner</code></p><p><a href="https://zhuanlan.zhihu.com/p/54861567">贴一个原地址</a></p><p><strong>运行：</strong> Ctrl + Alt + N<br><strong>中止运行：</strong> Ctrl + Alt + M<br><strong>解决乱码 &amp; 输入：</strong><br>选择 文件 -&gt; 首选项 -&gt; 设置，打开VS Code设置页面，找到 Run Code configuration，勾上 Run In Terminal 选项。设置之后，代码就会在 Terminal 中运行了。<br><img src="https://pic4.zhimg.com/80/v2-f893e1b487feee43b5903c9cf2781ffb_720w.jpg"></p>]]></content>
    
    
    
    <tags>
      
      <tag>技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法课一</title>
    <link href="/2021/03/18/%E7%AE%97%E6%B3%95%E8%AF%BE%E4%B8%80/"/>
    <url>/2021/03/18/%E7%AE%97%E6%B3%95%E8%AF%BE%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<h4 id="鸽子数"><a href="#鸽子数" class="headerlink" title="鸽子数"></a>鸽子数</h4><blockquote><p>鸽子数由以下过程定义：从任何正整数开始，将数字替换为其各个数位的平方和，并重复该过程，直到该数字等于1。如果不能，则这个数字不是鸽子数。<br>例如7是鸽子数，因为7-&gt;49-&gt;97-&gt;130-&gt;10-&gt;1。（7<em>7=49,4</em>4+9<em>9=97,9</em>9+7*7=130….如此类推）<br>显然1是第一个鸽子数。<br>有Q个询问，每个询问给出一个数k，你需要输出第k个鸽子数。<br>Input<br>第一行一个Q，代表询问的个数（Q&lt;=100000）<br>接下来Q行，每行一个数字k（k&lt;150000）<br>Output<br>每行输出一个数，代表第k个鸽子数</p></blockquote><p>首先算了个6，发现会循环：</p><blockquote><p>6 36 117 51 26 40 16 37 56 61</p></blockquote><p>题目中的这个鸽子数就是自身每一位的数字平方相加，一直循环，看看会不会等于1，为1的就是鸽子数。其实基本的方法就是直接打表，然后直接找第k个鸽子数，我的想法也差不多。<br>k的数据范围是150000，那么我们可以让数字的范围开到2000000，可以说在1~2000000（我才没有打表证明）里一定找得到150000个鸽子数，然后1—2000000里每个位数的平方的和最大是为487，也就是1999999的时候，然后我们只要把487以内包括487的所有的鸽子数都标记起来就行，因为每个位数平方和不管怎么循环相加都不可能超过487了都是在487以内，也就是说487之后的数字判断是不是鸽子数只需要算一次各个位数的平方和再放到1—487里去找，如果找到了那这个数也是鸽子数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">int</span> a[<span class="hljs-number">500</span>], b[<span class="hljs-number">500005</span>];<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">memset</span>(a, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(a));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">487</span>; i++)&#123; <span class="hljs-comment">//找487以内的鸽子数</span><br>    <span class="hljs-keyword">int</span> n = i, m, l = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">1000</span>; j++)&#123; <span class="hljs-comment">//这个是各个位数之和，然后循环</span><br>    m = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(n)&#123;<br>    m += (n % <span class="hljs-number">10</span>) * (n % <span class="hljs-number">10</span>);<br>    n /= <span class="hljs-number">10</span>;<br>    &#125;<br>    n = m;<br>    <span class="hljs-keyword">if</span>(m == <span class="hljs-number">1</span>)&#123; <span class="hljs-comment">//和为1就标记是鸽子数</span><br>    a[i] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">int</span> ans = <span class="hljs-number">1</span>; <span class="hljs-comment">//用来标记为第几个</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">500000</span>; i++)&#123; <span class="hljs-comment">//找500000内的鸽子数，将每一个鸽子数是第几个存好</span><br><span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>, z = i;<br><span class="hljs-keyword">while</span>(z)&#123;<br>sum += (z % <span class="hljs-number">10</span>) * (z % <span class="hljs-number">10</span>);<br>z /= <span class="hljs-number">10</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(a[sum] == <span class="hljs-number">1</span>)&#123; <span class="hljs-comment">//一次的各个位数的平方和在487内找，是就标记是第几个</span><br>   b[ans++] = i;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">int</span> q, k;<br><span class="hljs-built_in">cin</span> &gt;&gt; q;<br><span class="hljs-keyword">while</span>(q--)&#123;<br><span class="hljs-built_in">cin</span> &gt;&gt; k;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; b[k] &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="Swiches-and-lamps"><a href="#Swiches-and-lamps" class="headerlink" title="Swiches and lamps"></a>Swiches and lamps</h4><blockquote><p>有n个开关和m盏灯，对于一盏灯，只要存在一个控制这个灯的开关是开着的，这个灯就会被点亮。然后给你n×mn×m的01矩阵，如果ii行jj列为1代表开关ii可以控制灯jj，问你能否删掉一个开关，使得所有的灯仍旧能被点亮。</p></blockquote><p>对于每一求和，如果对于某一行，如果去掉某一行后这一列的和会变成0，说明会有灯不受控制，这一行就不能删掉</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 2016</span><br><span class="hljs-keyword">int</span> <span class="hljs-built_in">map</span>[maxn][maxn], sum[maxn], n, m;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%1d&quot;</span>, <span class="hljs-built_in">map</span>[i] + j);<br>        sum[j] += <span class="hljs-built_in">map</span>[i][j];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, j; i &lt;= n; i++)&#123;<br>        <span class="hljs-keyword">for</span>(j = <span class="hljs-number">1</span>; j &lt;= m; j++)<br>            <span class="hljs-keyword">if</span>(sum[j] - <span class="hljs-built_in">map</span>[i][j] == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">if</span>(j &gt; m) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span> * <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;YES&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span> * <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;NO&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="权力指数"><a href="#权力指数" class="headerlink" title="权力指数"></a>权力指数</h4><blockquote><p>在选举问题中，总共有n个小团体，每个小团体拥有一定数量的选票数。如果其中m个小团体的票数和超过总票数的一半，则此组合为“获胜联盟”。n个团体可形成若干个获胜联盟。一个小团体要成为一个“关键加入者”的条件是：在其所在的获胜联盟中，如果缺少了这个小团体的加入，则此联盟不能成为获胜联盟。一个小团体的权利指数是指：一个小团体在所有获胜联盟中成为“关键加入者”的次数。请你计算每个小团体的权利指数。<br>Input<br>输入数据的第一行为一个正整数T，表示有T组测试数据。每一组测试数据的第一行为一个正整数n（0&lt;n&lt;=20）。第二行有n个正整数，分别表示1到n号小团体的票数。<br>Output<br>对每组测试数据，在同一个行按顺序输出1到n号小团体的权利指数。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">int</span> n, t, s, a[<span class="hljs-number">21</span>], ans[<span class="hljs-number">21</span>], flag[<span class="hljs-number">21</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; t;<br>    <span class="hljs-keyword">while</span>(t--)&#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; n;<br>        s = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; a[i];<br>            s += a[i];<br>        &#125;<br>        <span class="hljs-built_in">memset</span>(ans, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(ans));<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; (<span class="hljs-number">1</span>&lt;&lt;n); i++)&#123;<br>            <span class="hljs-keyword">int</span> tmp = <span class="hljs-number">0</span>;<br>            <span class="hljs-built_in">memset</span>(flag, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(flag));<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123;<br>                <span class="hljs-keyword">if</span>(i &amp; (<span class="hljs-number">1</span>&lt;&lt;j))&#123;<br>                    tmp += a[j];<span class="hljs-comment">//m个团体的总票数</span><br>                    flag[j] = <span class="hljs-number">1</span>;<span class="hljs-comment">//加一个tmp就标记一下</span><br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(tmp &lt;= s / <span class="hljs-number">2</span>)<span class="hljs-comment">//少一个团体就当不上</span><br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)<br>                    <span class="hljs-keyword">if</span>(tmp + a[j] &gt; s/<span class="hljs-number">2</span> &amp;&amp; flag[j] == <span class="hljs-number">0</span>)<span class="hljs-comment">//加上某个团体就当上了，然后当的代码就是flag没有标记的</span><br>                        ans[j]++;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n<span class="hljs-number">-2</span>; i++)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,ans[i]);<span class="hljs-comment">//输出格式</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans[n - <span class="hljs-number">1</span>]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于“SSH服务器拒绝了密码”</title>
    <link href="/2021/03/15/%E5%85%B3%E4%BA%8ESSH%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8B%92%E7%BB%9D%E4%BA%86%E5%AF%86%E7%A0%81/"/>
    <url>/2021/03/15/%E5%85%B3%E4%BA%8ESSH%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8B%92%E7%BB%9D%E4%BA%86%E5%AF%86%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>今天跟着学Hadoop，Xshell硬是连不上，搜到一个百度经验笑死我了——</p><blockquote><p>…（前面一堆指令）<br>5/7<br>如果走到这一步你发现你的配置并没有哪里错了那么我们就是道友了。。。<br>回到Xshell找到你的虚拟机右键进入属性<br>6/7<br>把大写用户名改成小写，确定<br>7/7<br>连接上了。。。</p></blockquote><p>没想到有人和我一样傻哈哈哈</p>]]></content>
    
    
    
    <tags>
      
      <tag>Hadoop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hadoop学习笔记一：序及准备</title>
    <link href="/2021/03/14/Hadoop%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
    <url>/2021/03/14/Hadoop%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<p>Hadoop分为<strong>存储</strong>和<strong>计算</strong></p><ul><li>存储：HDFS</li><li>计算：MapReduce</li></ul><h4 id="HDFS文件系统"><a href="#HDFS文件系统" class="headerlink" title="HDFS文件系统"></a>HDFS文件系统</h4><p>HDFS（Hadoop Distributed File System, Hadoop分布式文件系统）<br><strong>NameNode → 多个DataNodes</strong></p><ul><li>NameNode: 文件在哪</li><li>DataNodes: 存数据</li><li>2NN: 负责备份NN</li></ul><h4 id="Yarn架构"><a href="#Yarn架构" class="headerlink" title="Yarn架构"></a>Yarn架构</h4><p>YARN （Yet Another Resource Negotiator，另一种资源协调者）<br><strong>client → RM → NMs</strong></p><ul><li>ResourceManager(RM) : 整个集群资源（CPU, RAM）等的老大</li><li>NodeManager(NM) : 单个节点服务器的老大</li><li>单个节点服务器能虚拟出多个儿子，每个儿子相当于一个小电脑（服务器），称为Container容器，内含ApplicationManager(AM) : 单个任务的老大</li></ul><p><img src="./Hadoop%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/01.jpg"></p><h4 id="克隆虚拟机"><a href="#克隆虚拟机" class="headerlink" title="克隆虚拟机"></a>克隆虚拟机</h4><p>右键移除并不会真正删掉，可以通过原位置的vmx导入<br>右键管理从磁盘删除才是删掉</p><p>克隆之后，如下操作（直接用root用户登录更方便）：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/</span>sysconfig<span class="hljs-regexp">/network-scripts/i</span>fcfg-ens33<br>vim <span class="hljs-regexp">/etc/</span>hostname<br>reboot<br></code></pre></td></tr></table></figure><p>重启后进行检查</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ifconfig<br>ping www<span class="hljs-selector-class">.baidu</span>.com<br>hostname<br></code></pre></td></tr></table></figure><p>再在Xshell里导入，并输<code>hostname</code>再次检查</p><h4 id="安装JDK-Hadoop"><a href="#安装JDK-Hadoop" class="headerlink" title="安装JDK Hadoop"></a>安装JDK Hadoop</h4><p>（已经在hadoop100执行了<code>rpm -qa | grep -i java | xargs -n1 rpm -e --nodeps</code>）<br>一般在102安装即可<br>p.s.教程里写的是<br><code>tar -zxvf hadoop-3.1.3.tar.gz -C /opt/module/ </code><br>但是我在操作阿里云的服务器时，不知道为什么总是报错“无法open：没有那个文件或目录”，貌似是它不识别根目录/，用了相对路径之后就好使了。神秘<br>另外，提前cd到module也可以这样：<br><code>tar -zxvf ../software/hadoop-3.1.3.tar.gz</code></p><p>哦哦哦我知道了：</p><blockquote><p>/是文件系统的根目录，/root是超级用户root用户的个人目录<br>我一开始登的时候，是在root下了，还以为是根目录，各种操作也没加/  ……</p></blockquote><h4 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h4><ul><li>Xshell双击标签就能再开一个新的</li><li>Ctrl + L可以控制台换一页</li><li>Tab可以控制台智能补全， 也可以查看当前目录文件列表</li><li><code>ssh hostname</code>，<code>exit</code>退出</li><li>查公网IP：<code>curl httpbin.org/ip </code></li></ul><h4 id="配置完全分布"><a href="#配置完全分布" class="headerlink" title="配置完全分布"></a>配置完全分布</h4><p>scp / rsync / xsync</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">存一下xsync脚本</span><br><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br><span class="hljs-meta">#</span><span class="bash">1. 判断参数个数</span><br>if [ $# -lt 1 ]<br>then<br>    echo Not Enough Arguement!<br>    exit;<br>fi<br><br><span class="hljs-meta">#</span><span class="bash">2. 遍历集群所有机器</span><br>for host in hadoop102 hadoop103 hadoop104<br>do<br>    echo ==================== $host ====================<br>    #3. 遍历所有目录，挨个发送<br>    for file in $@<br>    do<br>        #4. 判断文件是否存在<br>        if [ -e $file ]<br>        then<br>            #5. 获取父目录 -P取消软链接<br>            pdir=$(cd -P $(dirname $file); pwd)<br>            #6. 获取当前文件的名称<br>            fname=$(basename $file)<br>            #7. -p无视是否已经存在<br>            ssh $host &quot;mkdir -p $pdir&quot;<br>            rsync -av $pdir/$fname $host:$pdir<br>        else<br>            echo $file does not exists!<br>        fi<br>    done<br>done<br></code></pre></td></tr></table></figure><h4 id="配置集群"><a href="#配置集群" class="headerlink" title="配置集群"></a>配置集群</h4><p>core-site.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 指定 NameNode 的地址 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>fs.defaultFS<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hdfs://hadoop102:8020<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 指定 hadoop 数据的存储目录 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hadoop.tmp.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>/opt/module/hadoop-3.1.3/data<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 配置 HDFS 网页登录使用的静态用户为 izayoiaster --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hadoop.http.staticuser.user<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>izayoiaster<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>hdfs-site.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- nn web 端访问地址--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.http-address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hadoop102:9870<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 2nn web 端访问地址--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hadoop104:9868<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>yarn-site.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 指定 MR 走 shuffle --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>mapreduce_shuffle<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 指定 ResourceManager 的地址--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hadoop103<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 环境变量的继承 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 尚硅谷的3.1说，这个是3.1的bug，3.2以上的不用写环境变量 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.env-whitelist<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>JAVA_HOME,HADOOP_COMMON_HOME,HADOOP_HDFS_HOME,HADOOP_CONF_DIR,CLASSPATH_PREPEND_DISTCACHE,HADOOP_YARN_HOME,HADOOP_MAPRED_HOME<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>mapred-site.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 指定 MapReduce 程序运行在 Yarn 上 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.framework.name<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>yarn<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>最后别忘了同步一下<br><code>xsync /opt/module/hadoop3.1.3/etc/hadoop/</code><br>然后在103 104检查一下<br><code>cat /opt/module/hadoop3.1.3/etc/hadoop/core-site.xml </code></p><h4 id="配置历史服务器"><a href="#配置历史服务器" class="headerlink" title="配置历史服务器"></a>配置历史服务器</h4><p>mapred-site.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 历史服务器内部地址 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hadoop102:10020<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 历史服务器 web 端地址 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hadoop102:19888<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>以及 同步一下<br>（在102）启动历史服务器</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada">mapred <span class="hljs-comment">--daemon start historyserver</span><br>虽然尚硅谷的pdf这么写的，但貌似有时候需要定位到hadoop的bin目录下才行……<br>（虽然那次我是不小心在<span class="hljs-number">103</span>启动了）<br></code></pre></td></tr></table></figure><blockquote><p><em>Daemon是守护神的意思哦</em></p></blockquote><h4 id="配置日志聚集"><a href="#配置日志聚集" class="headerlink" title="配置日志聚集"></a>配置日志聚集</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 开启日志聚集功能 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.log-aggregation-enable<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 设置日志聚集服务器地址 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.log.server.url<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>http://hadoop102:19888/jobhistory/logs<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 设置日志保留时间为 7 天 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.log-aggregation.retain-seconds<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>604800<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="集群启停脚本"><a href="#集群启停脚本" class="headerlink" title="集群启停脚本"></a>集群启停脚本</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br>if [ $# -lt 1 ]<br>then<br>    echo &quot;No Args Input...&quot;<br>    exit ;<br>fi<br>case $1 in<br>&quot;start&quot;)<br>    echo &quot; =================== 启动 hadoop 集群 ===================&quot;<br>    echo &quot; --------------- 启动 hdfs ---------------&quot;<br>    ssh hadoop102 &quot;/opt/module/hadoop-3.1.3/sbin/start-dfs.sh&quot;<br>    echo &quot; --------------- 启动 yarn ---------------&quot;<br>    ssh hadoop103 &quot;/opt/module/hadoop-3.1.3/sbin/start-yarn.sh&quot;<br>    echo &quot; --------------- 启动 historyserver ---------------&quot;<br>    ssh hadoop102 &quot;/opt/module/hadoop-3.1.3/bin/mapred --daemon start historyserver&quot;<br>;;<br>&quot;stop&quot;)<br>    echo &quot; =================== 关闭 hadoop 集群 ===================&quot;<br>    echo &quot; --------------- 关闭 historyserver ---------------&quot;<br>    ssh hadoop102 &quot;/opt/module/hadoop-3.1.3/bin/mapred --daemon stop historyserver&quot;<br>    echo &quot; --------------- 关闭 yarn ---------------&quot;<br>    ssh hadoop103 &quot;/opt/module/hadoop-3.1.3/sbin/stop-yarn.sh&quot;<br>    echo &quot; --------------- 关闭 hdfs ---------------&quot;<br>    ssh hadoop102 &quot;/opt/module/hadoop-3.1.3/sbin/stop-dfs.sh&quot;<br>;;<br>*)<br>    echo &quot;Input Args Error...&quot;<br>;;<br>esac<br></code></pre></td></tr></table></figure><h4 id="jpsall"><a href="#jpsall" class="headerlink" title="jpsall"></a>jpsall</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br>for host in hadoop102 hadoop103 hadoop104<br>do<br>    echo =============== $host ===============<br>    ssh $host jps<br>done<br></code></pre></td></tr></table></figure><h4 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h4><h5 id="误删除用户文件"><a href="#误删除用户文件" class="headerlink" title="误删除用户文件"></a>误删除用户文件</h5><p>比如我就不小心删掉了给我的那台服务器的/root里的所有东西（我真憨憨），重启之后没有那个[xxx@xxx]，变成bash了，那就输入这个：<br><code>-bash-4.2# cp -a /etc/skel/. /root</code><br>（<code>-a</code>是含隐藏文件，<code>/etc/skel/</code>是保命数据，后面的<code>.</code>别忘了，空格后接误删的目录，比如<code>/home/izayoiaster</code>）<br>弄好了可以<code>ls -a</code>检查一下，看看多没多几个bash，之后reboot一下就行了<br>（这都能弄好，牛逼）</p><h5 id="Hadoop找不到Java"><a href="#Hadoop找不到Java" class="headerlink" title="Hadoop找不到Java"></a>Hadoop找不到Java</h5><p>比如在给我的那台服务器上，照着教程配置好之后hadoop会报错：<br><code>ERROR: JAVA_HOME /opt/jdk/jdk1.8.0_144 does not exist.</code><br>照着网上，手动配置了一下hadoop-3.1.3/etc/hadoop/hadoop-env.sh，加了一句<br><code>export JAVA_HOME=/opt/module/jdk1.8.0_212</code><br>就好使啦！</p><h5 id="启动hadoop时报错"><a href="#启动hadoop时报错" class="headerlink" title="启动hadoop时报错"></a>启动hadoop时报错</h5><h6 id="case-1"><a href="#case-1" class="headerlink" title="case 1"></a>case 1</h6><p><code>nodemanager is running as process xxxx. Stop it first.</code><br>先stop-all.sh下，然后再start</p><h6 id="case-2"><a href="#case-2" class="headerlink" title="case 2"></a>case 2</h6><p><code>Hadoop ERROR: but there is no HDFS_NAMENODE_USER defined. Aborting operation. Starting datanodes</code><br>使用root配置的hadoop并启动会出现报错</p><p>方法：</p><p>1、对于start-dfs.sh和stop-dfs.sh文件，添加下列参数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/usr/bin/env bash</span><br>HDFS_DATANODE_USER=root<br>HADOOP_SECURE_DN_USER=hdfs<br>HDFS_NAMENODE_USER=root<br>HDFS_SECONDARYNAMENODE_USER=root<br></code></pre></td></tr></table></figure><p>2、对于start-yarn.sh和stop-yarn.sh文件，添加下列参数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/usr/bin/env bash</span><br>YARN_RESOURCEMANAGER_USER=root<br>HADOOP_SECURE_DN_USER=yarn<br>YARN_NODEMANAGER_USER=root<br></code></pre></td></tr></table></figure><h5 id="无法访问Hadoop"><a href="#无法访问Hadoop" class="headerlink" title="无法访问Hadoop"></a>无法访问Hadoop</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 如果是通过公网IP访问阿里云上内网搭建的集群 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.client.use.datanode.hostname<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>only cofig in clients<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Hadoop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>紫菀的第零篇博客</title>
    <link href="/2021/03/13/%E7%B4%AB%E8%8F%80%E7%9A%84%E7%AC%AC%E9%9B%B6%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <url>/2021/03/13/%E7%B4%AB%E8%8F%80%E7%9A%84%E7%AC%AC%E9%9B%B6%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>为什么是第零篇呢？因为算是一个全新开始吧</p><p>昨天受DH启发，去咨询了一下LCS，没想到直接就进了LCS的实验室？！研究方向是大数据，目前交给我的任务是搭建一个Hadoop</p><p>既是大数据，又是Java，好耶！<br>十六夜紫菀，冲冲冲💪</p><p>另外，虽然咨询哈深的学长说，ACM能搞就搞，但是结合我自身的竞赛体会以及知乎上众多回答，我还是决定不打ACM了 <em>（当然，算法课肯定是要上的，算法题也不能停下来）</em>。ACM这个东西，实在是<strong>热爱 &gt; 价值</strong>，知乎上有个人说得好，如果搞ACM是打算拿来保研的话，性价比是很低的，有这个时间不如搞好学习、做做项目，对以后更有帮助。</p><p>我这个人，数学思维显然是不太行的，况且ACM就算再努力，最后也有可能因为各种原因付诸东流。比起思考型，我更喜欢实验室这种研究型的，能让我享受学习新东西的快感 <em>（也不是说不思考啦，只是方向不太一样）</em></p><p>向着紫菀花开的明天，冲🦆！<br>（此处引用上一篇博客里制定的计划）</p>]]></content>
    
    
    
    <tags>
      
      <tag>紫菀</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>紫菀的第一篇博客</title>
    <link href="/2021/03/12/%E7%B4%AB%E8%8F%80%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <url>/2021/03/12/%E7%B4%AB%E8%8F%80%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h4 id="一些闲话："><a href="#一些闲话：" class="headerlink" title="一些闲话："></a>一些闲话：</h4><p>之前参加冰峰实验室的纳新，因为大一年度项目是微信小程序（实际上路子在这一步就走错了，我应该更有主见一点不应该顺着老师的意思），就想着要是加入实验室的微信小程序纳新方向，岂不是一石二鸟。</p><p>不过脑子一热上了贼船，做了好几次纳新作业之后，我才逐渐回过神来————首先我这个人对微信有一种说不上来的讨厌；其次，微信小程序被腾讯限制了生态，很多学到的东西只能用在微信上，学这玩意儿太亏了；最后，我虽然还没定好大方向，但是以后肯定是要主打至少Java/C++/Python三大语言之一的，到时候简历上的项目经历自然也是这几个方向的为好，微信小程序封闭不说，就算把它强行算到web前端，那也是个小项目，综合来看最有用的实验室还是安卓方向。</p><p>再者，塞翁失马焉知非福，虽然寒假捣鼓这几次微信作业，看起来是白费时间了（其实的确是吧……），不过起码大一年度项目做起来轻松多了（而且虽说之前我说我应该立项时更有主见一些，不过这个年度项目的确最适合用微信小程序来做），目前为止学的也充其量是个皮毛而已，大部分还是传统的HTML/CSS/JS，对于我写博客肯定是有用的。</p><p>那么，福是啥呢。记得之前刚开学晚上弹吉他时一位研究生学长很认真地告诉我大一一定要好好学习，坦白来讲，我大一也就中后期好好学习了，前期真是我都不忍直视……这学期是时候给自己创造<strong>福</strong>了。再一想，其实之前也有很多声音建议大一不要加入实验室，好好学习来着（不然，实验室纳新明明不难，为什么每次都有很多大二的参加）</p><h4 id="Plans："><a href="#Plans：" class="headerlink" title="Plans："></a>Plans：</h4><p>（这里原本是有计划的，但是自从我得知某热心群友竟然看过我的博客，再加上我发现这些计划的执行也和shi一样，所以就删掉了Orz）</p><p><strong>最终目标：哈尔滨工业大学（深圳）</strong></p><p>很难，但如果不考好，怎么能有自由选择的权力<br>目前意向发展方向：</p><ul><li>人工智能</li><li>大数据</li><li>云计算</li><li>算法</li><li>引擎（游戏）</li></ul><p>微信呢，学就学了，毕竟年轻的一大资本就是不怕重来嘛；Java作为学校的课程，在大数据云计算和游戏等方面也都有很强的应用，还是目前需求量最大的语言，研究研究Java肯定是错不了的</p><p>2021/3/12</p><p>嗨呀，纠结啊……昨天给冰峰微信的学长发邮件之后，学长也回复我了</p><details><summary>具体回复</summary><p>同学你好，你的邮件我们已经收到，是这样的，微信小程序他只是一个起点而已，仅此而已，说实话只学微信小程序将来是不好找工作的，但是你从微信小程序中学到的不仅仅是一些相关的技术，作为一个软件工程专业的学生，技术仅仅只是一部分而已，我们专业的学生很少能够吃技术饭吃一辈子的，将来肯定是要转管理层或者啥的，我从邮件中得知你的方向是算法人工智能之类的，这个主要还是研究生阶段的主要深入的方向，本科阶段这些是指皮毛性的说一说，不会深究。回到微信小程序，其一，不论是微信还是安卓还是前端后端，在实验室只是一个开始，一个萌芽阶段。在实验室的项目中，不仅能够锻炼你的技术，最重要的是能够锻炼你的业务能力，以及对软件工程这门学科的了解。开发软件的整个流程你会有一个大体的认识，从最初产品经理给出原型，前端绘制页面，于此同时后端也在写接口，然后前后端对接，最后测试，发布，然后后期的维护，你都能经历到。不只是微信，安卓 IOS web前端等开发流程都是这样的，虽然可能微信小程序在你以后的工作中用不到，但是这些开发经验一定会在你以后的开发中发挥中要作用。按照我的理解本科阶段工程性的东西还是比算法性的东西要重要一点，但也缺乏本科阶段算法也很牛的人。其次就是你学习了微信小程序他有一个好处就是，你再转别的方向就比较轻松，web 前端 后端都可以，你在开发过程中也会了解到后端的部分知识，一些业务逻辑。很好的一个案例就是我们实验室微信小程序组的陈笑宇学长，去年就拿到美团的offer,而且是美团后端的offer。我自己在学习之余也会了解一些web前端的框架，比如vue以及，这些方向的学习都是非常相似的。其三，实验室给你的是一个学习环境，实验室中有很多技术很牛的人，我大一进来时是一个小白，我高中从来没参加过什么关于计算机的比赛，大学才开始接触这部分的知识，说实在的，大一上学期结束我什么都不懂，也就学了个C语言，加入实验室后才知道有很多方向，很多知识可以学，才知道了什么前端后端，什么是vue，什么是springBoot，开阔了自己的视野，受周围人的影响，自己对这些方向也就感兴趣了，自己就会找一些视频观看，学习这方面的内容，不明白的话问一问实验室的其他同学也就明白了，知识面广了，能力也就提升了。实验室不能说能给你一个完美的大学生活，我觉得至少能够给你的大学生活打个90分吧。<br><br>原信：<br>其实我已经纠结了好久选择微信小程序方向是不是正确的……说来惭愧，一开始选择微信小程序方向只是因为导师分配的大一年度项目正好也是微信小程序，就想着学微信小程序一箭双雕岂不美哉，选择了微信方向。但我后来想了很久，不论是我将来期望的职业范围还是我感兴趣的研究方向，都和微信小程序没有太大联系（当然我只是个啥也不懂的大一新生，所以理解很可能有偏差，我目前想要发展的方向主要是算法、引擎、人工智能这种，是不是需要主攻Java C++这些……）而且说实在的，加实验室一方面是为了提升能力，一方面是也为了丰富自己的项目经历，我感觉如果做微信小程序项目好像不能成为我以后的方向上有用的项目经历，微信小程序的被腾讯局限起来的生态学起来也感觉好亏……所以我还是决定不参加微信小程序纳新了，虽然我明明还没被冰峰录取却还发封邮件来说明自己不参加，或多或少会显得很内啥，但学长这么多天来认真看了我的作业并给出了建议，我也是应该写封邮件的。实在实在是非常抱歉！如果我的理解不对的话，还请学长告知一下，我还会考虑加入的</p></details><p>怎么说呢，我觉得有点道理，但又不是很能打动我……</p><p>刚才加了一个考研哈深的学长咨询了一下（学长好冷漠555），学长说ACM能参加的话一定要参加，比项目啥的有用多了，那我觉得吧，还是不参加实验室，或者摸个鱼就好。</p><p>总之面试还是去看看吧，再问问实验室学长的意见。</p>]]></content>
    
    
    
    <tags>
      
      <tag>紫菀</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
