<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>记一下高中的一些代码</title>
    <link href="/2021/10/28/%E8%AE%B0%E4%B8%80%E4%B8%8B%E9%AB%98%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BB%A3%E7%A0%81/"/>
    <url>/2021/10/28/%E8%AE%B0%E4%B8%80%E4%B8%8B%E9%AB%98%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>高中时期的一些板子一直存在电脑里<br>虽然 这些板子一点也不全 &amp; 以前的代码习惯并不咋地 &amp; 感觉放电脑里也用不太上，但还是不太舍得删，干脆放博客里得了</p><p>姑且格式化了一下</p><p>哎，现在都不一定看得懂了……</p><hr><h3 id="二分图匹配"><a href="#二分图匹配" class="headerlink" title="二分图匹配"></a>二分图匹配</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1.树是二分图，奇数深度一侧，偶数深度一侧</span><br><span class="hljs-comment"> * 2.网格图也是二分图</span><br><span class="hljs-comment"> * 匈牙利算法：</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 2018</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">int</span> n, m, E, cnt;<br><span class="hljs-keyword">int</span> e[maxn][maxn], asked[maxn], matched[maxn];<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">found</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;  <span class="hljs-comment">//寻找增广路</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        <span class="hljs-keyword">if</span> (!e[x][i] || asked[i])<br>            <span class="hljs-keyword">continue</span>;  <span class="hljs-comment">//两点间没有关系 或 已经被之前的点申请重新匹配了</span><br>        asked[i] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (!matched[i] || found(matched[i])) &#123;  <span class="hljs-comment">//如果没被匹配或者能腾出位置</span><br>            matched[i] = x;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">match</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(matched, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(matched));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-built_in">memset</span>(asked, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(asked));<br>        <span class="hljs-keyword">if</span> (found(i))<br>            ++cnt;  <span class="hljs-comment">//找到了就加1</span><br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;E);  <span class="hljs-comment">//结点个数分别为n,m，边数为e</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= E; i++) &#123;<br>        <span class="hljs-keyword">int</span> x, y;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);<br>        e[x][y] = <span class="hljs-number">1</span>;<br>    &#125;<br>    match();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, cnt);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="二分图最大匹配"><a href="#二分图最大匹配" class="headerlink" title="二分图最大匹配"></a>二分图最大匹配</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// luogu-judger-enable-o2</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 2010</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">int</span> n, m, E, ans;<br><span class="hljs-keyword">int</span> e[maxn][maxn], asked[maxn], matched[maxn];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> ret = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> ch;<br>    <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(ch = getchar()))<br>        <span class="hljs-keyword">continue</span>;<br>    ret = ch - <span class="hljs-string">&#x27;0&#x27;</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(ch = getchar()))<br>        ret = ret * <span class="hljs-number">10</span> + ch - <span class="hljs-string">&#x27;0&#x27;</span>;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">found</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;  <span class="hljs-comment">//寻找增广路</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>        <span class="hljs-keyword">if</span> (e[x][i]) &#123;     <span class="hljs-comment">//两点间有关系</span><br>            <span class="hljs-keyword">if</span> (asked[i])  <span class="hljs-comment">//已经被之前的点申请重新匹配了</span><br>                <span class="hljs-keyword">continue</span>;<br>            asked[i] = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (!matched[i] ||<br>                found(matched[i])) &#123;  <span class="hljs-comment">//如果没被匹配或者能腾出位置</span><br>                matched[i] = x;<br>                matched[x] = i;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">match</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;  <span class="hljs-comment">// cnt是计数器</span><br>    <span class="hljs-built_in">memset</span>(matched, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(matched));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-built_in">memset</span>(asked, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(asked));<br>        <span class="hljs-keyword">if</span> (found(i))<br>            cnt++;  <span class="hljs-comment">//找到了就加1</span><br>    &#125;<br>    ans = cnt;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;E);  <span class="hljs-comment">//结点个数分别为n,m，边数为e</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= E; i++) &#123;<br>        <span class="hljs-keyword">int</span> x, y;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);<br>        e[x][y] = <span class="hljs-number">1</span>;<br>    &#125;<br>    match();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="分层图"><a href="#分层图" class="headerlink" title="分层图"></a>分层图</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 题解 P2939【改造路】（模板 分层图）</span><br><span class="hljs-comment">// 分层图板子题，第一次做分层图感觉还好qwq</span><br><span class="hljs-comment">// 注意：每一层的vis单独设立，不要共用一个vis</span><br><span class="hljs-comment">// 顺带，优先队列虽然默认大根堆但是实现里用到的是小于号，因此重载要重载小于号</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 10018</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">int</span> n, m, k, vis[maxn][<span class="hljs-number">24</span>], f[maxn][<span class="hljs-number">24</span>];  <span class="hljs-comment">// f[i][j] 到了点i且用了j次的最短路</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-built_in">vector</span>&lt;pii&gt; G[maxn];<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Point</span> &#123;</span><br>    <span class="hljs-keyword">int</span> p, dis, level;  <span class="hljs-comment">// level 第几层（用几次）</span><br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> Point&amp; b) <span class="hljs-keyword">const</span> &#123; <span class="hljs-keyword">return</span> dis &gt; b.dis; &#125;<br>&#125;;<br><span class="hljs-built_in">priority_queue</span>&lt;Point&gt; q;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Dij</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(f, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span>(f));<br>    f[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    q.push((Point)&#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;);<br>    <span class="hljs-keyword">while</span> (q.size()) &#123;<br>        <span class="hljs-keyword">int</span> u = q.top().p;<br>        <span class="hljs-keyword">int</span> l = q.top().level;<br>        <span class="hljs-keyword">int</span> d = q.top().dis;<br>        q.pop();<br>        <span class="hljs-keyword">if</span> (vis[u][l])<br>            <span class="hljs-keyword">continue</span>;<br>        vis[u][l] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; G[u].size(); i++) &#123;<br>            <span class="hljs-keyword">int</span> v = G[u][i].first;<br>            <span class="hljs-keyword">int</span> d = G[u][i].second;<br>            <span class="hljs-keyword">if</span> (f[v][l] &gt; f[u][l] + d) &#123;  <span class="hljs-comment">// u -&gt; d 不用</span><br>                f[v][l] = f[u][l] + d;<br>                q.push((Point)&#123;v, f[v][l], l&#125;);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (f[v][l + <span class="hljs-number">1</span>] &gt; f[u][l] &amp;&amp; l &lt; k) &#123;  <span class="hljs-comment">// u -&gt; d 用</span><br>                f[v][l + <span class="hljs-number">1</span>] = f[u][l];<br>                q.push((Point)&#123;v, f[v][l + <span class="hljs-number">1</span>], l + <span class="hljs-number">1</span>&#125;);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;k);<br>    <span class="hljs-keyword">while</span> (m--) &#123;<br>        <span class="hljs-keyword">int</span> a, b, t;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;t);<br>        G[a].push_back(<span class="hljs-built_in">make_pair</span>(b, t));<br>        G[b].push_back(<span class="hljs-built_in">make_pair</span>(a, t));<br>    &#125;<br>    Dij();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, f[n][k]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="高精度"><a href="#高精度" class="headerlink" title="高精度"></a>高精度</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-comment">// compare比较函数：相等返回0，大于返回1，小于返回-1</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(<span class="hljs-built_in">string</span> str1, <span class="hljs-built_in">string</span> str2)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (str1.length() &gt; str2.length())<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (str1.length() &lt; str2.length())<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> str1.compare(str2);<br>&#125;<br><span class="hljs-comment">//高精度加法</span><br><span class="hljs-comment">//只能是两个正数相加</span><br><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-built_in">string</span> str1, <span class="hljs-built_in">string</span> str2)</span>  <span class="hljs-comment">//高精度加法</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">string</span> str;<br>    <span class="hljs-keyword">int</span> len1 = str1.length();<br>    <span class="hljs-keyword">int</span> len2 = str2.length();<br>    <span class="hljs-comment">//前面补0，弄成长度相同</span><br>    <span class="hljs-keyword">if</span> (len1 &lt; len2) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= len2 - len1; i++)<br>            str1 = <span class="hljs-string">&quot;0&quot;</span> + str1;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= len1 - len2; i++)<br>            str2 = <span class="hljs-string">&quot;0&quot;</span> + str2;<br>    &#125;<br>    len1 = str1.length();<br>    <span class="hljs-keyword">int</span> cf = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> temp;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = len1 - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        temp = str1[i] - <span class="hljs-string">&#x27;0&#x27;</span> + str2[i] - <span class="hljs-string">&#x27;0&#x27;</span> + cf;<br>        cf = temp / <span class="hljs-number">10</span>;<br>        temp %= <span class="hljs-number">10</span>;<br>        str = <span class="hljs-keyword">char</span>(temp + <span class="hljs-string">&#x27;0&#x27;</span>) + str;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (cf != <span class="hljs-number">0</span>)<br>        str = <span class="hljs-keyword">char</span>(cf + <span class="hljs-string">&#x27;0&#x27;</span>) + str;<br>    <span class="hljs-keyword">return</span> str;<br>&#125;<br><span class="hljs-comment">//高精度减法</span><br><span class="hljs-comment">//只能是两个正数相减，而且要大减小</span><br><span class="hljs-comment">/*string sub(string str1,string str2)//高精度减法</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">    string str;</span><br><span class="hljs-comment">    int tmp=str1.length()-str2.length();</span><br><span class="hljs-comment">    int cf=0;</span><br><span class="hljs-comment">    for(int i=str2.length()-1;i&gt;=0;i--)</span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">        if(str1[tmp+i]&lt;str2[i]+cf)</span><br><span class="hljs-comment">        &#123;</span><br><span class="hljs-comment">            str=char(str1[tmp+i]-str2[i]-cf+&#x27;0&#x27;+10)+str;</span><br><span class="hljs-comment">            cf=1;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        else</span><br><span class="hljs-comment">        &#123;</span><br><span class="hljs-comment">            str=char(str1[tmp+i]-str2[i]-cf+&#x27;0&#x27;)+str;</span><br><span class="hljs-comment">            cf=0;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    for(int i=tmp-1;i&gt;=0;i--)</span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">        if(str1[i]-cf&gt;=&#x27;0&#x27;)</span><br><span class="hljs-comment">        &#123;</span><br><span class="hljs-comment">            str=char(str1[i]-cf)+str;</span><br><span class="hljs-comment">            cf=0;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        else</span><br><span class="hljs-comment">        &#123;</span><br><span class="hljs-comment">            str=char(str1[i]-cf+10)+str;</span><br><span class="hljs-comment">            cf=1;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    str.erase(0,str.find_first_not_of(&#x27;0&#x27;));//去除结果中多余的前导0</span><br><span class="hljs-comment">    return str;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">//高精度乘法</span><br><span class="hljs-comment">//只能是两个正数相乘</span><br><span class="hljs-comment">string mul(string str1,string str2)</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">    string str;</span><br><span class="hljs-comment">    int len1=str1.length();</span><br><span class="hljs-comment">    int len2=str2.length();</span><br><span class="hljs-comment">    string tempstr;</span><br><span class="hljs-comment">    for(int i=len2-1;i&gt;=0;i--)</span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">        tempstr=&quot;&quot;;</span><br><span class="hljs-comment">        int temp=str2[i]-&#x27;0&#x27;;</span><br><span class="hljs-comment">        int t=0;</span><br><span class="hljs-comment">        int cf=0;</span><br><span class="hljs-comment">        if(temp!=0)</span><br><span class="hljs-comment">        &#123;</span><br><span class="hljs-comment">            for(int j=1;j&lt;=len2-1-i;j++)</span><br><span class="hljs-comment">              tempstr+=&quot;0&quot;;</span><br><span class="hljs-comment">            for(int j=len1-1;j&gt;=0;j--)</span><br><span class="hljs-comment">            &#123;</span><br><span class="hljs-comment">                t=(temp*(str1[j]-&#x27;0&#x27;)+cf)%10;</span><br><span class="hljs-comment">                cf=(temp*(str1[j]-&#x27;0&#x27;)+cf)/10;</span><br><span class="hljs-comment">                tempstr=char(t+&#x27;0&#x27;)+tempstr;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">            if(cf!=0) tempstr=char(cf+&#x27;0&#x27;)+tempstr;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        str=add(str,tempstr);</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    str.erase(0,str.find_first_not_of(&#x27;0&#x27;));</span><br><span class="hljs-comment">    return str;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">//高精度除法</span><br><span class="hljs-comment">//两个正数相除，商为quotient,余数为residue</span><br><span class="hljs-comment">//需要高精度减法和乘法</span><br><span class="hljs-comment">void div(string str1,string str2,string &amp;quotient,string &amp;residue)</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">    quotient=residue=&quot;&quot;;//清空</span><br><span class="hljs-comment">    if(str2==&quot;0&quot;)//判断除数是否为0</span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">        quotient=residue=&quot;ERROR&quot;;</span><br><span class="hljs-comment">        return;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    if(str1==&quot;0&quot;)//判断被除数是否为0</span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">        quotient=residue=&quot;0&quot;;</span><br><span class="hljs-comment">        return;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    int res=compare(str1,str2);</span><br><span class="hljs-comment">    if(res&lt;0)</span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">        quotient=&quot;0&quot;;</span><br><span class="hljs-comment">        residue=str1;</span><br><span class="hljs-comment">        return;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    else if(res==0)</span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">        quotient=&quot;1&quot;;</span><br><span class="hljs-comment">        residue=&quot;0&quot;;</span><br><span class="hljs-comment">        return;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    else</span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">        int len1=str1.length();</span><br><span class="hljs-comment">        int len2=str2.length();</span><br><span class="hljs-comment">        string tempstr;</span><br><span class="hljs-comment">        tempstr.append(str1,0,len2-1);</span><br><span class="hljs-comment">        for(int i=len2-1;i&lt;len1;i++)</span><br><span class="hljs-comment">        &#123;</span><br><span class="hljs-comment">            tempstr=tempstr+str1[i];</span><br><span class="hljs-comment">            tempstr.erase(0,tempstr.find_first_not_of(&#x27;0&#x27;));</span><br><span class="hljs-comment">            if(tempstr.empty())</span><br><span class="hljs-comment">              tempstr=&quot;0&quot;;</span><br><span class="hljs-comment">            for(char ch=&#x27;9&#x27;;ch&gt;=&#x27;0&#x27;;ch--)//试商</span><br><span class="hljs-comment">            &#123;</span><br><span class="hljs-comment">                string str,tmp;</span><br><span class="hljs-comment">                str=str+ch;</span><br><span class="hljs-comment">                tmp=mul(str2,str);</span><br><span class="hljs-comment">                if(compare(tmp,tempstr)&lt;=0)//试商成功</span><br><span class="hljs-comment">                &#123;</span><br><span class="hljs-comment">                    quotient=quotient+ch;</span><br><span class="hljs-comment">                    tempstr=sub(tempstr,tmp);</span><br><span class="hljs-comment">                    break;</span><br><span class="hljs-comment">                &#125;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        residue=tempstr;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    quotient.erase(0,quotient.find_first_not_of(&#x27;0&#x27;));</span><br><span class="hljs-comment">    if(quotient.empty()) quotient=&quot;0&quot;;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">string</span> str1, str2;<br>    <span class="hljs-comment">// string str3,str4;</span><br>    <span class="hljs-built_in">cin</span> &gt;&gt; str1 &gt;&gt; str2;<br>    <span class="hljs-comment">// while()</span><br>    <span class="hljs-comment">//&#123;</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; add(str1, str2) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-comment">// cout&lt;&lt;sub(str1,str2)&lt;&lt;endl;</span><br>    <span class="hljs-comment">// cout&lt;&lt;mul(str1,str2)&lt;&lt;endl;</span><br>    <span class="hljs-comment">// div(str1,str2,str3,str4);</span><br>    <span class="hljs-comment">// cout&lt;&lt;str3&lt;&lt;&quot;  &quot;&lt;&lt;str4&lt;&lt;endl;</span><br>    <span class="hljs-comment">//&#125;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1000001</span>;<br><span class="hljs-keyword">int</span> n, k, a[maxn];<br><span class="hljs-keyword">int</span> q[maxn], head, tail, p[maxn];<br><span class="hljs-comment">// q是单调队列，p是q中的元素在a中对应的编号（用于计算区间长度）。</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">qmin</span><span class="hljs-params">()</span> </span>&#123;<br>    head = <span class="hljs-number">0</span>;<br>    tail = <span class="hljs-number">-1</span>;                                           <span class="hljs-comment">//为啥要这样呢?因为head要严格对应首元素，tail要严格对应尾元素，所以当tail&gt;=head时，说明有元素。而一开始队列为空，说一要这样赋值。其实这跟普通队列一样。</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;                       <span class="hljs-comment">// a[i]表示当前要处理的值</span><br>        <span class="hljs-keyword">while</span> (head &lt;= tail &amp;&amp; q[tail] &gt;= a[i]) --tail;  <span class="hljs-comment">//只要队列里有元素，并且尾元素比待处理值大，即表示尾元素已经不可能出场，所以出队。直到尾元素小于待处理值，满足&quot;单调&quot;。</span><br>        q[++tail] = a[i];                                <span class="hljs-comment">//待处理值入队。</span><br>        p[tail] = i;                                     <span class="hljs-comment">//同时存下其编号</span><br>        <span class="hljs-keyword">while</span> (p[head] &lt;= i - k) ++head;                 <span class="hljs-comment">//如果队首元素已经&quot;过时&quot;，出队。</span><br>        <span class="hljs-keyword">if</span> (i &gt;= k) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, q[head]);              <span class="hljs-comment">//输出最值，即队首元素。i&gt;=k表示该输出。</span><br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">qmax</span><span class="hljs-params">()</span> </span>&#123;<br>    head = <span class="hljs-number">0</span>;<br>    tail = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">while</span> (head &lt;= tail &amp;&amp; q[tail] &lt;= a[i]) tail--;<br>        q[++tail] = a[i];<br>        p[tail] = i;<br>        <span class="hljs-keyword">while</span> (p[head] &lt;= i - k) ++head;<br>        <span class="hljs-keyword">if</span> (i &gt;= k) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, q[head]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;n, &amp;k);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>    qmin();<br>    qmax();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="矩阵乘法"><a href="#矩阵乘法" class="headerlink" title="矩阵乘法"></a>矩阵乘法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br>ll n, p;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Mat</span> &#123;</span><br>    ll m[<span class="hljs-number">108</span>][<span class="hljs-number">108</span>];<br>&#125;;<br>Mat a, e;  <span class="hljs-comment">// a:输入矩阵，e:单位矩阵</span><br><br><span class="hljs-function">Mat <span class="hljs-title">mul</span><span class="hljs-params">(Mat x, Mat y)</span> </span>&#123;<br>    Mat c;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>            c.m[i][j] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt;= n; k++)<br>                c.m[i][j] = c.m[i][j] % mod + x.m[i][k] * y.m[k][j] % mod;<br>    <span class="hljs-keyword">return</span> c;<br>&#125;<br><br><span class="hljs-function">Mat <span class="hljs-title">qpow</span><span class="hljs-params">(Mat x, ll y)</span> </span>&#123;  <span class="hljs-comment">// x^y</span><br>    Mat ans = e;<br>    <span class="hljs-keyword">while</span> (y) &#123;<br>        <span class="hljs-keyword">if</span> (y &amp; <span class="hljs-number">1</span>)<br>            ans = mul(ans, x);<br>        x = mul(x, x);<br>        y &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; p;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>            <span class="hljs-built_in">cin</span> &gt;&gt; a.m[i][j];<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        e.m[i][i] = <span class="hljs-number">1</span>;<br>    Mat ans = qpow(a, p);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>            <span class="hljs-built_in">cout</span> &lt;&lt; ans.m[i][j] % mod &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="普通平衡树"><a href="#普通平衡树" class="headerlink" title="普通平衡树"></a>普通平衡树</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">1000018</span>, INF = <span class="hljs-number">1e9</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> ret = <span class="hljs-number">0</span>, f = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">char</span> ch;<br>    <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(ch = getchar()))<br>        <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;-&#x27;</span>) f = <span class="hljs-number">0</span>;<br>    ret = ch ^ <span class="hljs-string">&#x27;0&#x27;</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(ch = getchar())) ret = (ret &lt;&lt; <span class="hljs-number">1</span>) + (ret &lt;&lt; <span class="hljs-number">3</span>) + (ch ^ <span class="hljs-string">&#x27;0&#x27;</span>);<br>    <span class="hljs-keyword">return</span> f ? ret : -ret;<br>&#125;<br><br><span class="hljs-keyword">int</span> n;<br><span class="hljs-keyword">int</span> ch[maxn][<span class="hljs-number">2</span>];  <span class="hljs-comment">//[i][0]代表i左儿子，[i][1]代表i右儿子</span><br><span class="hljs-keyword">int</span> val[maxn], dat[maxn];<br><span class="hljs-keyword">int</span> size[maxn], cnt[maxn];<br><span class="hljs-keyword">int</span> tot, root;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">New</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v)</span> </span>&#123;        <span class="hljs-comment">//新增节点，</span><br>    val[++tot] = v;     <span class="hljs-comment">//节点赋值</span><br>    dat[tot] = rand();  <span class="hljs-comment">//随机优先级</span><br>    size[tot] = <span class="hljs-number">1</span>;      <span class="hljs-comment">//目前是新建叶子节点，所以子树大小为1</span><br>    cnt[tot] = <span class="hljs-number">1</span>;       <span class="hljs-comment">//新建节点同理副本数为1</span><br>    <span class="hljs-keyword">return</span> tot;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;  <span class="hljs-comment">//和线段树的pushup更新一样</span><br>    size[id] = size[ch[id][<span class="hljs-number">0</span>]] + size[ch[id][<span class="hljs-number">1</span>]] + cnt[id];<br>    <span class="hljs-comment">//本节点子树大小 = 左儿子子树大小 + 右儿子子树大小 + 本节点副本数</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">()</span> </span>&#123;<br>    root = New(-INF);<br>    ch[root][<span class="hljs-number">1</span>] = New(INF);  <span class="hljs-comment">//先加入正无穷和负无穷，便于之后操作(貌似不加也行)</span><br>    pushup(root);            <span class="hljs-comment">//因为INF &gt; -INF,所以是右子树，</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Rotate</span><span class="hljs-params">(<span class="hljs-keyword">int</span>&amp; id, <span class="hljs-keyword">int</span> d)</span> </span>&#123;     <span class="hljs-comment">// id是引用传递，d(irection)为旋转方向，0为左旋，1为右旋</span><br>    <span class="hljs-keyword">int</span> temp = ch[id][d ^ <span class="hljs-number">1</span>];     <span class="hljs-comment">//旋转理解：找个动图看一看就好(或参见其他OIer的blog)</span><br>    ch[id][d ^ <span class="hljs-number">1</span>] = ch[temp][d];  <span class="hljs-comment">//这里讲一个记忆技巧，这些数据都是被记录后马上修改</span><br>    ch[temp][d] = id;             <span class="hljs-comment">//所以像“Z”一样</span><br>    id = temp;                    <span class="hljs-comment">//比如这个id，在上一行才被记录过，ch[temp][d]、ch[id][d ^ 1]也是一样的</span><br>    pushup(ch[id][d]);<br>    pushup(id);  <span class="hljs-comment">//旋转以后size会改变，看图就会发现只更新自己和转上来的点，pushup一下,注意先子节点再父节点</span><br>&#125;  <span class="hljs-comment">//旋转实质是(&#123;在满足BST的性质的基础上比较优先级&#125;通过交换本节点和其某个叶子节点)把链叉开成二叉形状(从而控制深度)，可以看图理解一下</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span>&amp; id, <span class="hljs-keyword">int</span> v)</span> </span>&#123;  <span class="hljs-comment">// id依然是引用，在新建节点时可以体现</span><br>    <span class="hljs-keyword">if</span> (!id) &#123;<br>        id = New(v);  <span class="hljs-comment">//若节点为空，则新建一个节点</span><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (v == val[id])<br>        cnt[id]++;                                        <span class="hljs-comment">//若节点已存在，则副本数++;</span><br>    <span class="hljs-keyword">else</span> &#123;                                                <span class="hljs-comment">//要满足BST性质，小于插到左边，大于插到右边</span><br>        <span class="hljs-keyword">int</span> d = v &lt; val[id] ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>;                      <span class="hljs-comment">//这个d是方向的意思，按照BST的性质，小于本节点则向左，大于向右</span><br>        insert(ch[id][d], v);                             <span class="hljs-comment">//递归实现</span><br>        <span class="hljs-keyword">if</span> (dat[id] &lt; dat[ch[id][d]]) Rotate(id, d ^ <span class="hljs-number">1</span>);  <span class="hljs-comment">//(参考一下图)与左节点交换右旋，与右节点交换左旋</span><br>    &#125;<br>    pushup(id);  <span class="hljs-comment">//现在更新一下本节点的信息</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Remove</span><span class="hljs-params">(<span class="hljs-keyword">int</span>&amp; id, <span class="hljs-keyword">int</span> v)</span> </span>&#123;  <span class="hljs-comment">//最难的部分了</span><br>    <span class="hljs-keyword">if</span> (!id) <span class="hljs-keyword">return</span>;           <span class="hljs-comment">//到这了发现查不到这个节点，该点不存在，直接返回</span><br>    <span class="hljs-keyword">if</span> (v == val[id]) &#123;        <span class="hljs-comment">//检索到了这个值</span><br>        <span class="hljs-keyword">if</span> (cnt[id] &gt; <span class="hljs-number">1</span>) &#123;<br>            cnt[id]--;<br>            pushup(id);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;                                                         <span class="hljs-comment">//若副本不止一个，减去一个就好</span><br>        <span class="hljs-keyword">if</span> (ch[id][<span class="hljs-number">0</span>] || ch[id][<span class="hljs-number">1</span>]) &#123;                             <span class="hljs-comment">//发现只有一个值，且有儿子节点,我们只能把值旋转到底部删除</span><br>            <span class="hljs-keyword">if</span> (!ch[id][<span class="hljs-number">1</span>] || dat[ch[id][<span class="hljs-number">0</span>]] &gt; dat[ch[id][<span class="hljs-number">1</span>]]) &#123;  <span class="hljs-comment">//当前点被移走之后，会有一个新的点补上来(左儿子或右儿子)，按照优先级，优先级大的补上来</span><br>                Rotate(id, <span class="hljs-number">1</span>);<br>                Remove(ch[id][<span class="hljs-number">1</span>], v);  <span class="hljs-comment">//我们会发现，右旋是与左儿子交换，当前点变成右节点；左旋则是与右儿子交换，当前点变为左节点</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                Rotate(id, <span class="hljs-number">0</span>);<br>                Remove(ch[id][<span class="hljs-number">0</span>], v);<br>            &#125;<br>            pushup(id);<br>        &#125; <span class="hljs-keyword">else</span><br>            id = <span class="hljs-number">0</span>;  <span class="hljs-comment">//发现本节点是叶子节点，直接删除</span><br>        <span class="hljs-keyword">return</span>;      <span class="hljs-comment">//这个return对应的是检索到值de所有情况</span><br>    &#125;<br>    v &lt; val[id] ? Remove(ch[id][<span class="hljs-number">0</span>], v) : Remove(ch[id][<span class="hljs-number">1</span>], v);  <span class="hljs-comment">//继续BST性质</span><br>    pushup(id);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">get_rank</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, <span class="hljs-keyword">int</span> v)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (!id) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">//若查询值不存在，返回</span><br>    <span class="hljs-keyword">if</span> (v == val[id])<br>        <span class="hljs-keyword">return</span> size[ch[id][<span class="hljs-number">0</span>]] + <span class="hljs-number">1</span>;  <span class="hljs-comment">//查询到该值，由BST性质可知：该点左边值都比该点的值(查询值)小，故rank为左儿子大小 + 1</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (v &lt; val[id])<br>        <span class="hljs-keyword">return</span> get_rank(ch[id][<span class="hljs-number">0</span>], v);  <span class="hljs-comment">//发现需查询的点在该点左边，往左边递归查询</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> size[ch[id][<span class="hljs-number">0</span>]] + cnt[id] + get_rank(ch[id][<span class="hljs-number">1</span>], v);  <span class="hljs-comment">//若查询值大于该点值。说明询问点在当前点的右侧，且此点的值都小于查询值，所以要加上cnt[id]</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">get_val</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, <span class="hljs-keyword">int</span> rank)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (!id) <span class="hljs-keyword">return</span> INF;  <span class="hljs-comment">//一直向右找找不到，说明是正无穷</span><br>    <span class="hljs-keyword">if</span> (rank &lt;= size[ch[id][<span class="hljs-number">0</span>]])<br>        <span class="hljs-keyword">return</span> get_val(ch[id][<span class="hljs-number">0</span>], rank);  <span class="hljs-comment">//左边排名已经大于rank了，说明rank对应的值在左儿子那里</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rank &lt;= size[ch[id][<span class="hljs-number">0</span>]] + cnt[id])<br>        <span class="hljs-keyword">return</span> val[id];  <span class="hljs-comment">//上一步排除了在左区间的情况，若是rank在左与中(目前节点)中，则直接返回目前节点(中区间)的值</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> get_val(ch[id][<span class="hljs-number">1</span>], rank - size[ch[id][<span class="hljs-number">0</span>]] - cnt[id]);  <span class="hljs-comment">//剩下只能在右区间找了，rank减去左区间大小和中区间，继续递归</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">get_pre</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> id = root, pre;  <span class="hljs-comment">//递归不好返回，以循环求解</span><br>    <span class="hljs-keyword">while</span> (id) &#123;         <span class="hljs-comment">//查到节点不存在为止</span><br>        <span class="hljs-keyword">if</span> (val[id] &lt; v) &#123;<br>            pre = val[id];<br>            id = ch[id][<span class="hljs-number">1</span>];  <span class="hljs-comment">//满足当前节点比目标小，往当前节点的右侧寻找最优值</span><br>        &#125; <span class="hljs-keyword">else</span><br>            id = ch[id][<span class="hljs-number">0</span>];  <span class="hljs-comment">//无论是比目标节点大还是等于目标节点，都不满足前驱条件，应往更小处靠近</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> pre;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">get_next</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> id = root, nxt;<br>    <span class="hljs-keyword">while</span> (id) &#123;<br>        <span class="hljs-keyword">if</span> (val[id] &gt; v) &#123;<br>            nxt = val[id];<br>            id = ch[id][<span class="hljs-number">0</span>];  <span class="hljs-comment">//同理，满足条件向左寻找更小解(也就是最优解)</span><br>        &#125; <span class="hljs-keyword">else</span><br>            id = ch[id][<span class="hljs-number">1</span>];  <span class="hljs-comment">//与上方同理</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> nxt;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    build();  <span class="hljs-comment">//不要忘记初始化 [运行build()会连同root一并初始化，所以很重要]</span><br>    n = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">int</span> cmd = rd(), x = rd();<br>        <span class="hljs-keyword">if</span> (cmd == <span class="hljs-number">1</span>)<br>            insert(root, x);  <span class="hljs-comment">//函数都写好了，注意：需要递归的函数都从根开始，不需要递归的函数直接查询</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cmd == <span class="hljs-number">2</span>)<br>            Remove(root, x);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cmd == <span class="hljs-number">3</span>)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, get_rank(root, x) - <span class="hljs-number">1</span>);  <span class="hljs-comment">//注意：因为初始化时插入了INF和-INF,所以查询排名时要减1(-INF不是第一小，是“第零小”)</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cmd == <span class="hljs-number">4</span>)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, get_val(root, x + <span class="hljs-number">1</span>));  <span class="hljs-comment">//同理，用排名查询值得时候要查x + 1名，因为第一名(其实不是)是-INF</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cmd == <span class="hljs-number">5</span>)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, get_pre(x));<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cmd == <span class="hljs-number">6</span>)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, get_next(x));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="强连通缩点"><a href="#强连通缩点" class="headerlink" title="强连通缩点"></a>强连通缩点</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 208</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">int</span> n, dfn[maxn], low[maxn], idx, stk[maxn], top, clr[maxn], numc, ind[maxn];<br><span class="hljs-comment">//ixd index时间戳</span><br><span class="hljs-keyword">bool</span> ins[maxn];<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; G[maxn];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Tarjan</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;<br>    dfn[u] = low[u] = ++idx;<br>    stk[++top] = u;<br>    ins[u] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; G[u].size(); i++) &#123;<br>        <span class="hljs-keyword">int</span> v = G[u][i];<br>        <span class="hljs-keyword">if</span> (!dfn[v]) &#123;<br>            Tarjan(v);<br>            low[u] = min(low[u], low[v]);  <span class="hljs-comment">//找父亲（环的开头）最小的</span><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ins[v]) &#123;<br>            low[u] = min(low[u], dfn[v]);  <span class="hljs-comment">//判断谁才是父亲</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (dfn[u] == low[u]) &#123;  <span class="hljs-comment">//更新完一轮了，发现自己竟然就是父亲</span><br>        ++numc;<br>        <span class="hljs-keyword">while</span> (stk[top + <span class="hljs-number">1</span>] != u) &#123;<br>            clr[stk[top]] = numc;  <span class="hljs-comment">//出栈 &amp; 染色</span><br>            ins[stk[top--]] = <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">int</span> x;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-built_in">cin</span> &gt;&gt; x) G[i].push_back(x);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">if</span> (!dfn[i]) Tarjan(i);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; G[i].size(); j++)<br>            <span class="hljs-keyword">if</span> (clr[i] != clr[G[i][j]])<br>                ++ind[clr[G[i][j]]];<br><br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= numc; i++)<br>        <span class="hljs-keyword">if</span> (!ind[i]) ++ans;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXN = <span class="hljs-number">500008</span>;<br><span class="hljs-keyword">int</span> c[MAXN], n, m;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> x &amp; (-x);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> v)</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> (x &lt;= n) &#123;<br>        c[x] += v;<br>        x += lowbit(x);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> ret = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (x &gt; <span class="hljs-number">0</span>) &#123;<br>        ret += c[x];<br>        x -= lowbit(x);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> p;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;p);<br>        update(i, p);<br>    &#125;<br>    <span class="hljs-keyword">while</span> (m--) &#123;<br>        <span class="hljs-keyword">int</span> k, a, b;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;k, &amp;a, &amp;b);<br>        <span class="hljs-keyword">if</span> (k == <span class="hljs-number">1</span>)<br>            update(a, b);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, sum(b) - sum(a - <span class="hljs-number">1</span>));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//树状数组ver2</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lowbit(x) x &amp; -x</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br>ll tree[<span class="hljs-number">500005</span>];<br><span class="hljs-keyword">int</span> n, m;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, ll num)</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> (x &lt;= n) &#123;<br>        tree[x] += num;<br>        x += lowbit(x);<br>    &#125;<br>&#125;<br><br><span class="hljs-function">ll <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    ll ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (x) &#123;<br>        ans += tree[x];<br>        x -= lowbit(x);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    ll last = <span class="hljs-number">0</span>, now;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;now);<br>        add(i, now - last);<br>        last = now;<br>    &#125;<br>    <span class="hljs-keyword">int</span> flg;<br>    <span class="hljs-keyword">while</span> (m--) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;flg);<br>        <span class="hljs-keyword">if</span> (flg == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">int</span> x, y;<br>            ll k;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%lld&quot;</span>, &amp;x, &amp;y, &amp;k);<br>            add(x, k);<br>            add(y + <span class="hljs-number">1</span>, -k);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (flg == <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">int</span> x;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, query(x));<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="线段树1"><a href="#线段树1" class="headerlink" title="线段树1"></a>线段树1</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 1000016</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">int</span> n, m, a[maxn], t[maxn &lt;&lt; <span class="hljs-number">2</span>], tag[maxn &lt;&lt; <span class="hljs-number">2</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p, <span class="hljs-keyword">int</span> pl, <span class="hljs-keyword">int</span> pr)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (pl == pr) &#123;<br>        t[p] = a[pl];<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> mid = (pl + pr) &gt;&gt; <span class="hljs-number">1</span>;<br>    build(p &lt;&lt; <span class="hljs-number">1</span>, pl, mid);<br>    build(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, pr);<br>    t[p] = t[p &lt;&lt; <span class="hljs-number">1</span>] + t[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push_down</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p, <span class="hljs-keyword">int</span> pl, <span class="hljs-keyword">int</span> pr)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (!tag[p]) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">int</span> mid = (pl + pr) &gt;&gt; <span class="hljs-number">1</span>;<br>    tag[p &lt;&lt; <span class="hljs-number">1</span>] += tag[p];<br>    t[p &lt;&lt; <span class="hljs-number">1</span>] += (mid - pl + <span class="hljs-number">1</span>) * tag[p];<br>    tag[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>] += tag[p];<br>    t[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>] += (pr - mid) * tag[p];<br>    tag[p] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p, <span class="hljs-keyword">int</span> pl, <span class="hljs-keyword">int</span> pr, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (l &lt;= pl &amp;&amp; pr &lt;= r) &#123;<br>        tag[p] += k;<br>        t[p] += k * (pr - pl + <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    push_down(p, pl, pr);<br>    <span class="hljs-keyword">int</span> mid = (pl + pr) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (l &lt;= mid) update(p &lt;&lt; <span class="hljs-number">1</span>, pl, mid, l, r, k);<br>    <span class="hljs-keyword">if</span> (r &gt; mid) update(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, pr, l, r, k);<br>    t[p] = t[p &lt;&lt; <span class="hljs-number">1</span>] + t[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p, <span class="hljs-keyword">int</span> pl, <span class="hljs-keyword">int</span> pr, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> ret = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (l &lt;= pl &amp;&amp; pr &lt;= r) <span class="hljs-keyword">return</span> t[p];<br>    <span class="hljs-keyword">int</span> mid = (pl + pr) &gt;&gt; <span class="hljs-number">1</span>;<br>    push_down(p, pl, pr);<br>    <span class="hljs-keyword">if</span> (l &lt;= mid) ret += query(p &lt;&lt; <span class="hljs-number">1</span>, pl, mid, l, r);<br>    <span class="hljs-keyword">if</span> (r &gt; mid) ret += query(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, pr, l, r);<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> c, l, r, d;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) <span class="hljs-built_in">cin</span> &gt;&gt; a[i];<br>    build(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);<br>    <span class="hljs-keyword">while</span> (m--) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;c);<br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; l &gt;&gt; r &gt;&gt; d;<br>            update(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, l, r, d);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; l &gt;&gt; r;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; query(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, l, r) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="线段树2"><a href="#线段树2" class="headerlink" title="线段树2"></a>线段树2</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// Code by ex-Aster</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn = <span class="hljs-number">100008</span>;<br>ll n, m, a[maxn], t[maxn &lt;&lt; <span class="hljs-number">2</span>], tagp[maxn &lt;&lt; <span class="hljs-number">2</span>], tagm[maxn &lt;&lt; <span class="hljs-number">2</span>], P;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(ll p, ll l, ll r)</span> </span>&#123;<br>    tagp[p] = <span class="hljs-number">0</span>;<br>    tagm[p] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (l == r) &#123;<br>        t[p] = a[l];<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    ll mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    build(p &lt;&lt; <span class="hljs-number">1</span>, l, mid);<br>    build(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r);<br>    t[p] = (t[p &lt;&lt; <span class="hljs-number">1</span>] + t[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>]) % P;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push_down</span><span class="hljs-params">(ll p, ll l, ll r)</span> </span>&#123;  <span class="hljs-comment">//标记下传</span><br>    ll mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;          <span class="hljs-comment">//注意各种操作的 加 乘 的顺序</span><br><br>    t[p &lt;&lt; <span class="hljs-number">1</span>] = (t[p &lt;&lt; <span class="hljs-number">1</span>] * tagm[p] + (mid - l + <span class="hljs-number">1</span>) * tagp[p]) % P;  <span class="hljs-comment">// tagp该乘的在之前已经乘过了</span><br>    t[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>] = (t[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>] * tagm[p] + (r - mid) * tagp[p]) % P;<br><br>    tagm[p &lt;&lt; <span class="hljs-number">1</span>] = (tagm[p &lt;&lt; <span class="hljs-number">1</span>] * tagm[p]) % P;<br>    tagp[p &lt;&lt; <span class="hljs-number">1</span>] = (tagp[p &lt;&lt; <span class="hljs-number">1</span>] * tagm[p] + tagp[p]) % P;<br><br>    tagm[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>] = (tagm[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>] * tagm[p]) % P;<br>    tagp[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>] = (tagp[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>] * tagm[p] + tagp[p]) % P;<br><br>    tagp[p] = <span class="hljs-number">0</span>;<br>    tagm[p] = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">updatep</span><span class="hljs-params">(ll p, ll pl, ll pr, ll l, ll r, ll k)</span> </span>&#123;  <span class="hljs-comment">//区间加</span><br>    <span class="hljs-keyword">if</span> (pr &lt; l || pl &gt; r) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span> (l &lt;= pl &amp;&amp; pr &lt;= r) &#123;<br>        t[p] = (t[p] + k * (pr - pl + <span class="hljs-number">1</span>)) % P;<br>        tagp[p] = (tagp[p] + k) % P;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    push_down(p, pl, pr);<br>    ll mid = (pl + pr) &gt;&gt; <span class="hljs-number">1</span>;<br>    updatep(p &lt;&lt; <span class="hljs-number">1</span>, pl, mid, l, r, k);  <span class="hljs-comment">//继续更新儿子</span><br>    updatep(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, pr, l, r, k);<br>    t[p] = (t[p &lt;&lt; <span class="hljs-number">1</span>] + t[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>]) % P;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">updatem</span><span class="hljs-params">(ll p, ll pl, ll pr, ll l, ll r, ll k)</span> </span>&#123;  <span class="hljs-comment">//区间乘 注意给已有tagp乘k</span><br>    <span class="hljs-keyword">if</span> (pr &lt; l || pl &gt; r) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span> (l &lt;= pl &amp;&amp; pr &lt;= r) &#123;<br>        t[p] = (t[p] * k) % P;<br>        tagp[p] = (tagp[p] * k) % P;<br>        tagm[p] = (tagm[p] * k) % P;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    push_down(p, pl, pr);<br>    ll mid = (pl + pr) &gt;&gt; <span class="hljs-number">1</span>;<br>    updatem(p &lt;&lt; <span class="hljs-number">1</span>, pl, mid, l, r, k);  <span class="hljs-comment">//继续更新儿子</span><br>    updatem(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, pr, l, r, k);<br>    t[p] = (t[p &lt;&lt; <span class="hljs-number">1</span>] + t[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>]) % P;<br>&#125;<br><br><span class="hljs-function">ll <span class="hljs-title">query</span><span class="hljs-params">(ll p, ll pl, ll pr, ll l, ll r)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (pr &lt; l || pl &gt; r) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (l &lt;= pl &amp;&amp; pr &lt;= r) <span class="hljs-keyword">return</span> t[p];<br>    push_down(p, pl, pr);<br>    ll mid = (pl + pr) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> (query(p &lt;&lt; <span class="hljs-number">1</span>, pl, mid, l, r) + query(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, pr, l, r)) % P;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ll C, x, y, k;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; P;<br>    <span class="hljs-keyword">for</span> (ll i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;a[i]);<br>    build(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);<br>    <span class="hljs-keyword">while</span> (m--) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;C);<br>        <span class="hljs-keyword">switch</span> (C) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: &#123;<br>                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld%lld&quot;</span>, &amp;x, &amp;y, &amp;k);<br>                updatem(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, x, y, k);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: &#123;<br>                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld%lld&quot;</span>, &amp;x, &amp;y, &amp;k);<br>                updatep(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, x, y, k);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>: &#123;<br>                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld&quot;</span>, &amp;x, &amp;y);<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, query(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, x, y));<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="线性筛素数"><a href="#线性筛素数" class="headerlink" title="线性筛素数"></a>线性筛素数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> pos = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; maxn; i++) &#123;<br>        <span class="hljs-keyword">if</span> (notprime[i] == <span class="hljs-number">0</span>) prime[++pos] = i;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= pos &amp;&amp; i * prime[j] &lt; maxn; j++) &#123;<br>            notprime[i * prime[j]] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (i % prime[j] == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> pos = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; maxn; i++) &#123;<br>        <span class="hljs-keyword">if</span> (!notprime[i]) prime[++pos] = i;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; i &lt;= pos &amp;&amp; i * prime[j] &lt; maxn; j++) &#123;<br>            notprime[i * prime[j]] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (i % prime[j] == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="质因数分解"><a href="#质因数分解" class="headerlink" title="质因数分解"></a>质因数分解</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 1016</span><br><span class="hljs-keyword">int</span> c[maxn], n;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">divide</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> (x != <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= x; i++) &#123;<br>            <span class="hljs-keyword">while</span> (x % i == <span class="hljs-number">0</span>) &#123;<br>                x /= i;<br>                ++c[i];<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x, x0;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; x;<br>    x0 = x;<br>    divide(x);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= x0; i++)<br>        <span class="hljs-keyword">if</span> (c[i]) <span class="hljs-built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; c[i] &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAXN = <span class="hljs-number">580000</span>;<br><span class="hljs-keyword">int</span> n, m, fa[MAXN], rank_[MAXN];<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span> &#123;</span><br>    <span class="hljs-keyword">int</span> u, v, cost;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> edge &amp;x) <span class="hljs-keyword">const</span> &#123;<br>        <span class="hljs-keyword">return</span> cost &lt; x.cost;<br>    &#125;<br>&#125; es[MAXN];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (fa[a] == a)<br>        <span class="hljs-keyword">return</span> a;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> fa[a] = find(fa[a]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">unite</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = find(a);<br>    <span class="hljs-keyword">int</span> y = find(b);<br>    <span class="hljs-keyword">if</span> (x == y) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span> (rank_[x] &lt; rank_[y])<br>        fa[x] = y;<br>    <span class="hljs-keyword">else</span> &#123;<br>        fa[y] = x;<br>        <span class="hljs-keyword">if</span> (rank_[x] == rank_[y]) rank_[x]++;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">same</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> find(a) == find(b);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>        <span class="hljs-built_in">cin</span> &gt;&gt; es[i].u &gt;&gt; es[i].v &gt;&gt; es[i].cost;<br>    sort(es, es + m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) fa[i] = i;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>        edge e = es[i];<br>        <span class="hljs-keyword">if</span> (!same(e.u, e.v)) &#123;<br>            unite(e.u, e.v);<br>            ans += e.cost;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    system(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 100008</span><br><span class="hljs-keyword">int</span> n, a[maxn], f[maxn], ans = <span class="hljs-number">-1</span>, b[maxn + <span class="hljs-number">2018</span>];<br><span class="hljs-comment">//f[i] 长度为i的LIS的末尾元素最小值</span><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> ret = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">char</span> ch;<br>    <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(ch = getchar())); ret = ch - <span class="hljs-string">&#x27;0&#x27;</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(ch = getchar())) ret = ret * <span class="hljs-number">10</span> + ch - <span class="hljs-string">&#x27;0&#x27;</span>;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    n = rd();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">register</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        a[i] = rd();<br>        b[a[i]] = i;<br>        f[i] = <span class="hljs-number">0x3f3f3f3f</span>;<br>    &#125;  <span class="hljs-comment">//cout&lt;&lt;endl;</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">register</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        a[i] = rd();<br>        a[i] = b[a[i]];<br>        <span class="hljs-comment">//cout&lt;&lt;a[i]&lt;&lt;&#x27; &#x27;;</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">register</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        *lower_bound(f + <span class="hljs-number">1</span>, f + n + <span class="hljs-number">1</span>, a[i]) = a[i];<br>    <span class="hljs-comment">//cout&lt;&lt;endl; for(int i=1 ; i&lt;=n ; i++) cout&lt;&lt;f[i]&lt;&lt;&#x27; &#x27;;cout&lt;&lt;endl;</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, lower_bound(f + <span class="hljs-number">1</span>, f + n + <span class="hljs-number">1</span>, <span class="hljs-number">0x3f3f3f3f</span>) - f - <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title="???"></a>???</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs cpp">八、Dij相关细节:<br><br><span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">127</span>, <span class="hljs-keyword">sizeof</span>(dis)); <span class="hljs-comment">//double dis[maxn]</span><br><br><span class="hljs-keyword">while</span>(q.size())&#123;<br>    ...<br>    q.pop(); <span class="hljs-comment">//别忘了pop！</span><br>    <span class="hljs-keyword">if</span>(vis[u]) <span class="hljs-keyword">continue</span>; <span class="hljs-comment">//注意这两句话写在外面！</span><br>    vis[u] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(...)&#123;<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 600016</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">int</span> m, a, b;<br><br><span class="hljs-comment">//等比数列求和 1 + x^1 + ... + x^n</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> x * (<span class="hljs-number">1</span> - <span class="hljs-built_in">pow</span>(x, n)) / (<span class="hljs-number">1</span> - x);<br>&#125;<br><br><span class="hljs-comment">//质因数分解并求约数和</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">divide</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> ret = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(x != <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= x; i++)&#123;<br>            <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>; <span class="hljs-comment">//质因数x的次数</span><br>            <span class="hljs-keyword">while</span>(x % i == <span class="hljs-number">0</span>)&#123;<br>                x /= i;<br>                ++cnt;<br>            &#125;<br>            ret += sum(i, cnt);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; m;<br>    <span class="hljs-keyword">while</span>(m--)&#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; a &gt;&gt; b;<br>        <span class="hljs-keyword">if</span>(get(a) == b &amp;&amp; get(b) == a) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;YES&quot;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;NO&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>        ...<br>&#125;<br>九、二分千万别错了：<br><br><span class="hljs-keyword">while</span>(l &lt;= r)&#123;<br>    mid = (l + r)/<span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span>(check(mid)) ans = mid, l = mid + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> r = mid - <span class="hljs-number">1</span>;<br>&#125;   <br></code></pre></td></tr></table></figure><h3 id="bitset"><a href="#bitset" class="headerlink" title="bitset"></a>bitset</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp">像这种求组成某个体积的题，都能用<span class="hljs-built_in">bitset</span>水过去，自带常数优化<br><br>b[i]代表能否组成体积i，易知如果b[i] = <span class="hljs-literal">true</span>，有一个物品体积为v，则b[i + v] = <span class="hljs-literal">true</span><br><br>找到最大的b[i] == <span class="hljs-literal">true</span>的i即为最大体积<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">int</span> h, c, v, ans;<br><span class="hljs-built_in">std</span>::<span class="hljs-built_in">bitset</span> &lt;50018&gt; b;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    b[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cin</span> &gt;&gt; c &gt;&gt; h;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= h; i++) &#123;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cin</span> &gt;&gt; v; b |= b &lt;&lt; v;&#125;<br>    <span class="hljs-keyword">for</span>(ans = c; ans&gt;= <span class="hljs-number">0</span>; ans--) <span class="hljs-keyword">if</span>(b[ans]) <span class="hljs-keyword">break</span>;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; ans;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 100008</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">int</span> n, m, s, dis[maxn], vis[maxn];<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-built_in">vector</span>&lt;pii&gt; G[maxn];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">register</span> <span class="hljs-keyword">int</span> ret = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">register</span> <span class="hljs-keyword">char</span> ch;<br>    <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(ch = getchar()))<br>        ;<br>    ret = ch ^ <span class="hljs-number">48</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(ch = getchar())) ret = (ret &lt;&lt; <span class="hljs-number">1</span>) + (ret &lt;&lt; <span class="hljs-number">3</span>) + (ch ^ <span class="hljs-number">48</span>);<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Dijkstra</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span>(dis));<br>    <span class="hljs-built_in">priority_queue</span>&lt;pii, <span class="hljs-built_in">vector</span>&lt;pii&gt;, greater&lt;pii&gt; &gt; q;<br>    dis[s] = <span class="hljs-number">0</span>, q.push(<span class="hljs-built_in">make_pair</span>(<span class="hljs-number">0</span>, s));<br>    <span class="hljs-keyword">while</span> (q.size()) &#123;<br>        <span class="hljs-keyword">int</span> u = q.top().second;<br>        q.pop();<br>        <span class="hljs-keyword">if</span> (vis[u]) <span class="hljs-keyword">continue</span>;<br>        vis[u] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; G[u].size(); i++) &#123;<br>            <span class="hljs-keyword">int</span> v = G[u][i].first;<br>            <span class="hljs-keyword">int</span> d = G[u][i].second;<br>            <span class="hljs-keyword">if</span> (dis[v] &gt; dis[u] + d) &#123;<br>                dis[v] = dis[u] + d;<br>                q.push(<span class="hljs-built_in">make_pair</span>(dis[v], v));<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    n = rd();<br>    m = rd();<br>    s = rd();<br>    <span class="hljs-keyword">int</span> u, v, d;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        u = rd();<br>        v = rd();<br>        d = rd();<br>        G[u].push_back(<span class="hljs-built_in">make_pair</span>(v, d));<br>    &#125;<br>    Dijkstra();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) <span class="hljs-built_in">cout</span> &lt;&lt; (dis[i] == <span class="hljs-number">0x3f3f3f3f</span> ? <span class="hljs-number">2147483647</span> : dis[i]) &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//ver2</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 100008</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxm 200008</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp make_pair</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pii;<br><span class="hljs-keyword">int</span> n, m, s, dis[maxn], vis[maxn], head[maxn], cnt;<br><span class="hljs-built_in">priority_queue</span>&lt;pii, <span class="hljs-built_in">vector</span>&lt;pii&gt;, greater&lt;pii&gt; &gt; q;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span> &#123;</span><br>    <span class="hljs-keyword">int</span> from, to, dist, nxt;<br>&#125; e[maxm];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add_edge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> d)</span> </span>&#123;<br>    e[++cnt] = Edge&#123;u, v, d, head[u]&#125;;  <span class="hljs-comment">// &lt;- C++ Standard</span><br>    head[u] = cnt;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Dijkstra</span><span class="hljs-params">()</span> </span>&#123;<br>    dis[s] = <span class="hljs-number">0</span>;<br>    q.push(mp(<span class="hljs-number">0</span>, s));<br>    <span class="hljs-keyword">int</span> u, v, d;<br>    <span class="hljs-keyword">while</span> (q.size()) &#123;<br>        u = q.top().second;<br>        q.pop();<br>        <span class="hljs-keyword">if</span> (vis[u]) <span class="hljs-keyword">continue</span>;<br>        vis[u] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = head[u]; i; i = e[i].nxt) &#123;<br>            v = e[i].to;<br>            d = e[i].dist;<br>            <span class="hljs-keyword">if</span> (dis[v] &gt; dis[u] + d) &#123;<br>                dis[v] = dis[u] + d;<br>                q.push(mp(dis[v], v));<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; s;<br>    <span class="hljs-keyword">int</span> u, v, d;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; d;<br>        add_edge(u, v, d);<br>    &#125;<br>    <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0x7F</span>, <span class="hljs-keyword">sizeof</span>(dis));<br>    Dijkstra();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, dis[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="exgcd"><a href="#exgcd" class="headerlink" title="exgcd"></a>exgcd</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*</span><br><span class="hljs-comment">int gcd(int a, int b)&#123;</span><br><span class="hljs-comment">    return b == 0 ? a : gcd(b, a % b);</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">ax + by = d, d = gcd(a, b)</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">exgcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> &amp;x, <span class="hljs-keyword">int</span> &amp;y)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (b == <span class="hljs-number">0</span>) &#123;<br>        d = a;<br>        x = <span class="hljs-number">1</span>;<br>        y = <span class="hljs-number">0</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        exgcd(b, a % b, y, x);<br>        y -= x * (a / b);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">char</span> a[<span class="hljs-number">1000020</span>], b[<span class="hljs-number">1000020</span>];<br><span class="hljs-keyword">int</span> nxt[<span class="hljs-number">1000020</span>], lena, lenb;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>    nxt[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; lenb; i++) &#123;<br>        <span class="hljs-keyword">while</span> (j &gt; <span class="hljs-number">0</span> &amp;&amp; b[j + <span class="hljs-number">1</span>] != b[i + <span class="hljs-number">1</span>])<br>            j = nxt[j];<br>        <span class="hljs-keyword">if</span> (b[i + <span class="hljs-number">1</span>] == b[j + <span class="hljs-number">1</span>]) j++;<br>        nxt[i + <span class="hljs-number">1</span>] = j;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; a + <span class="hljs-number">1</span> &gt;&gt; b + <span class="hljs-number">1</span>;<br>    lena = <span class="hljs-built_in">strlen</span>(a + <span class="hljs-number">1</span>);<br>    lenb = <span class="hljs-built_in">strlen</span>(b + <span class="hljs-number">1</span>);<br>    init();<br>    <span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; lena; i++) &#123;<br>        <span class="hljs-keyword">while</span> (j &gt; <span class="hljs-number">0</span> &amp;&amp; b[j + <span class="hljs-number">1</span>] != a[i + <span class="hljs-number">1</span>])<br>            j = nxt[j];<br>        <span class="hljs-keyword">if</span> (b[j + <span class="hljs-number">1</span>] == a[i + <span class="hljs-number">1</span>]) j++;<br>        <span class="hljs-keyword">if</span> (j == lenb) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, i + <span class="hljs-number">1</span> - lenb + <span class="hljs-number">1</span>);<br>            j = nxt[j];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= lenb; i++)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, nxt[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="LIS"><a href="#LIS" class="headerlink" title="LIS"></a>LIS</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3F3F3F3F</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 100016</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">int</span> n, a[maxn], f[maxn];<br><span class="hljs-comment">//f[i] 长度为i的LIS的末尾元素的最小值（本模板为严格小于）</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(f, <span class="hljs-number">0x3F</span>, <span class="hljs-keyword">sizeof</span>(f));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) <span class="hljs-built_in">cin</span> &gt;&gt; a[i];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        *lower_bound(f + <span class="hljs-number">1</span>, f + n + <span class="hljs-number">1</span>, a[i]) = a[i];<br>    <span class="hljs-built_in">cout</span> &lt;&lt; lower_bound(f + <span class="hljs-number">1</span>, f + n + <span class="hljs-number">1</span>, INF) - f - <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="mapset"><a href="#mapset" class="headerlink" title="mapset"></a>mapset</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//会用真是爽到：P1097 统计数字，求一堆数中每个数的出现次数</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">int</span> n, x;<br><span class="hljs-built_in">map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; m;  <span class="hljs-comment">//存出现次数</span><br><span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; s;       <span class="hljs-comment">//存出现过什么数（输入保证有序）</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n;<br>    <span class="hljs-keyword">while</span> (n--) &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; x;<br>        ++m[x];<br>        s.insert(x);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = s.begin(); it != s.end(); it++)<br>        <span class="hljs-built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; m[*it] &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="mat-qpow"><a href="#mat-qpow" class="headerlink" title="mat_qpow"></a>mat_qpow</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Mat</span> &#123;</span><br>    ll m[<span class="hljs-number">108</span>][<span class="hljs-number">108</span>];<br>&#125;;<br>Mat a, e;  <span class="hljs-comment">//a:输入矩阵，e:单位矩阵</span><br>ll n, p;<br><br><span class="hljs-function">Mat <span class="hljs-title">mul</span><span class="hljs-params">(Mat x, Mat y)</span> </span>&#123;<br>    Mat c;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>            c.m[i][j] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt;= n; k++)<br>                c.m[i][j] = c.m[i][j] % mod + x.m[i][k] * y.m[k][j] % mod;<br>    <span class="hljs-keyword">return</span> c;<br>&#125;<br><br><span class="hljs-function">Mat <span class="hljs-title">qpow</span><span class="hljs-params">(Mat x, ll y)</span> </span>&#123;<br>    Mat ans = e;<br>    <span class="hljs-keyword">while</span> (y) &#123;<br>        <span class="hljs-keyword">if</span> (y &amp; <span class="hljs-number">1</span>)<br>            ans = mul(ans, x);<br>        x = mul(x, x);<br>        y &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; p;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>            <span class="hljs-built_in">cin</span> &gt;&gt; a.m[i][j];<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        e.m[i][i] = <span class="hljs-number">1</span>;<br>    Mat ans = qpow(a, p);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>            <span class="hljs-built_in">cout</span> &lt;&lt; ans.m[i][j] % mod &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="nim"><a href="#nim" class="headerlink" title="nim"></a>nim</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">int</span> T, n, a[<span class="hljs-number">10018</span>], X;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; T;<br>    <span class="hljs-keyword">while</span> (T--) &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; n;<br>        X = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; a[i];<br>            X ^= a[i];  <span class="hljs-comment">//求异或和</span><br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (!X)<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;No\n&quot;</span>;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Yes\n&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="qpow"><a href="#qpow" class="headerlink" title="qpow"></a>qpow</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll x, ll y, ll P)</span></span>&#123;<br>    ll ret = <span class="hljs-number">1</span>, a = x;<br>    <span class="hljs-keyword">for</span>( ; y ; y &gt;&gt;= <span class="hljs-number">1</span>, a = (a*a)%P) <span class="hljs-comment">//第一个y意为y&gt;0</span><br>        <span class="hljs-keyword">if</span>(y &amp; <span class="hljs-number">1</span>) ret = (ret*a)%P;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="string输入"><a href="#string输入" class="headerlink" title="string输入"></a>string输入</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">string</span> s;<br>    getline(<span class="hljs-built_in">cin</span>, s);<br>    <span class="hljs-built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    system(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VSCode设置C++格式化大括号不换行</title>
    <link href="/2021/10/28/VSCode%E8%AE%BE%E7%BD%AECpp%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%A4%A7%E6%8B%AC%E5%8F%B7%E4%B8%8D%E6%8D%A2%E8%A1%8C/"/>
    <url>/2021/10/28/VSCode%E8%AE%BE%E7%BD%AECpp%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%A4%A7%E6%8B%AC%E5%8F%B7%E4%B8%8D%E6%8D%A2%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<p><del>没错，我就是传说中的异端不换行党！</del></p><p>Ctrl + P，找到settings.json</p><p>加入这一句</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">&quot;C_Cpp.clang_format_style&quot;: &quot;&#123; BasedOnStyle: Google, IndentWidth: 4&#125;&quot;,<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决IDEA新建项目时总是使用自带Maven的问题</title>
    <link href="/2021/10/28/%E8%A7%A3%E5%86%B3IDEA%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%97%B6%E6%80%BB%E6%98%AF%E4%BD%BF%E7%94%A8%E8%87%AA%E5%B8%A6Maven%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2021/10/28/%E8%A7%A3%E5%86%B3IDEA%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%97%B6%E6%80%BB%E6%98%AF%E4%BD%BF%E7%94%A8%E8%87%AA%E5%B8%A6Maven%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>网上的方法（修改project.defalt.xml / Default Settings）都是过时的方法，我的版本（2021.2.3）已经不能用了，最后自己给摸索出来了：</p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/Other/image.4ulnuwqnf8g0.png" alt="image" style="zoom:40%;" />]]></content>
    
    
    
    <tags>
      
      <tag>Maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决spring-boot-maven-plugin报错</title>
    <link href="/2021/10/28/%E8%A7%A3%E5%86%B3spring-boot-maven-plugin%E6%8A%A5%E9%94%99/"/>
    <url>/2021/10/28/%E8%A7%A3%E5%86%B3spring-boot-maven-plugin%E6%8A%A5%E9%94%99/</url>
    
    <content type="html"><![CDATA[<p>今天遇到这个问题，很烦：<br><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/Other/image.zxmwi2kg0jk.png" alt="image"></p><p>解决办法：加上和springboot一致的version即可</p><p>可能是因为maven找错版本了？</p>]]></content>
    
    
    
    <tags>
      
      <tag>Maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>捣鼓Linux的一些笔记</title>
    <link href="/2021/10/26/%E6%8D%A3%E9%BC%93Linux%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/10/26/%E6%8D%A3%E9%BC%93Linux%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>前言：最近正好又用到了服务器，给笔记本装个Linux玩玩</p><p>（反正是玩玩，装了个最简单(?)的Ubuntu 20.04）</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/Linux/image.8rvznry95v8.png" alt="半天的成果"></p><p>首先在<strong>软件与更新</strong>里换上清华的源 <del>（什么？你说我是哈工大的学生为什么不用哈工大的源？）</del></p><p>然后下载一个Chrome，对于deb格式要这么安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo dpkg -i xxxx.deb<br></code></pre></td></tr></table></figure><p>既然我在写这个文章，说明我已经安装了Typora</p><p>在Typora官网下载压缩包之后解压（tar -zxvf），解压出来的bin目录里面有个typora的文件夹挪到（草，这个自带的输入法是真的<del>男用</del>难用，写完这个我装完KDE第一件事一定要去装个搜狗输入法（虽然之前说🐶都不用，那是因为微软的输入法还行）</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/Linux/2021-10-26-10-14-28-%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.qoc2uo6mops.png" alt="2021-10-26-10-14-28-的屏幕截图"></p><p>挪到/opt里，我看网上说什么还要配置权限但是我的并不需要</p><p>接下来把他添加到应用列表里：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">izayoiaster@Aster-Laptop:/opt/Typora-linux-x64$ vim typora.desktop <br>izayoiaster@Aster-Laptop:/opt/Typora-linux-x64$ sudo cp typora.desktop /usr/share/applications/<br>izayoiaster@Aster-Laptop:/opt/Typora-linux-x64$ cat typora.desktop <br>[Desktop Entry]<br>Name=Typora<br>Exec=/opt/Typora-linux-x64/Typora<br>Type=Application<br>Icon=/opt/Typora-linux-x64/resources/assets/icon/icon_512x512.png<br></code></pre></td></tr></table></figure><p>算了，太难受了这个输入法，先安个搜狗再安KDE吧……</p><p>发现<a href="https://pinyin.sogou.com/linux/help.php">官网</a>有，我就不赘述了（好评！搜狗好感+1）</p><p>不过官网说的是注销，据我测试要重启才有搜狗</p><p>安装KDE</p><p><a href="https://blog.csdn.net/weixin_41413372/article/details/109410552">参考</a>（不过我没有按照文章说的下载AMD的支持）</p><p>肯定需要一个好看的终端咯~安装oh-my-zsh</p><p>首先需要cat /etc/shells发现没有zsh，安装一下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt-get install zsh<br></code></pre></td></tr></table></figure><p>本来想用官方的curl方式直接安装的，但是新系统没安梯子，没办法只能自己下载了</p><p>顺便安上git，我直接无师自通输入下面的指令，安装成功（linux NB）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt-get install git<br></code></pre></td></tr></table></figure><p>继续安装ohmyzsh</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> https://github.com/ohmyzsh/ohmyzsh.git<br></code></pre></td></tr></table></figure><p><strong>绷不住了，git clone也连不上……被迫安了个梯子</strong></p><p>安装clash：</p><p>首先，去官网下载gz</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">gunzip clash-linux-amd64-v1.7.0.gz<br><br>mv clash-linux-amd64-v1.7.0.gz clash<br>mkdir Clash<br>mv clash ./Clash<br><br>chmod +x clash<br></code></pre></td></tr></table></figure><p>然后挪到opt去，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/.config/clash/ <span class="hljs-comment">#配置文件在这里</span><br>curl [订阅连接] &gt;&gt; config.yaml <span class="hljs-comment">#替换掉原来的文件</span><br></code></pre></td></tr></table></figure><p>不过我用的这个梯子好像并不能curl？总之是把梯子提供的<a href="https://mxwljsq.com/user/tutorial?os=linux&client=clash">东西</a>放进yaml里</p><p><a href="https://zhuanlan.zhihu.com/p/396272999">参考文章</a></p><p>虽然上面那个并没有成功，不过好像是梯子的问题，步骤是对的</p><p>但是我又成功git clone了！<a href="https://blog.csdn.net/u014375643/article/details/115826506">修改hosts</a></p><p>继续弄oh-my-zsh，按照官网的方法curl：</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/Linux/image.7k3bak4k5ss0.png" alt="image"></p><p>不过，启用zsh之后，要ll -a / ls -a才能显示隐藏文件了，别忘了</p><p> 然后换一个喜欢的主题就好，（注意换主题如果安字体，别用gnome安装，KDE设置里同样能安装字体）</p><p>安装：<a href="https://zhuanlan.zhihu.com/p/58073103">参考文章1</a> <a href="https://zhuanlan.zhihu.com/p/63585679">参考文章2</a></p><p>美化：<a href="https://www.jianshu.com/p/b8a80dd59414">参考</a></p><p>输入这个可以重新配置power10k:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs b">p10k configure<br></code></pre></td></tr></table></figure><p>关于KDE图标包，<a href="https://store.kde.org/p/1166289">我用的这个</a>，解压之后在KDE的设置里直接就能导入</p><p>主题用了Adapta，左边栏是latte</p><p>neofetch可以搞出Ubuntu的图标，Ctrl + L可以清屏</p><p>安装QQ，那个LinuxQQ实在是UI太丑了，还对缩放的支持很奇怪，所以安装wine吧，<a href="https://www.cnblogs.com/hskcool/p/14227695.html">这里</a>；但是由于我的笔记本是2.5k屏所以默认窗口非常小，改一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">WINEPREFIX=~/.deepinwine/Deepin-QQ deepin-wine winecfg<br></code></pre></td></tr></table></figure><p>（我这个最后测的是180左右合适）</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/Linux/image.1wp8gi8m24u8.png" alt="image"></p><p><a href="https://blog.csdn.net/qq_40843987/article/details/105934480?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link">QQ不显示头像的解决办法</a></p><p>为了避免之后wineQQ修复了这个问题后改不回来设置凑巧这个博客还没了，我还是记一下我怎么修改的吧：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo vim /etc/default/grub<br><br>GRUB_CMDLINE_LINUX_DEFAULT=<span class="hljs-string">&quot;splash quiet&quot;</span>                 <span class="hljs-comment"># 修改前</span><br>GRUB_CMDLINE_LINUX_DEFAULT=<span class="hljs-string">&quot;ipv6.disable=1 splash quiet&quot;</span>  <span class="hljs-comment"># 修改后</span><br><br>sudo update-grub  <span class="hljs-comment"># 使刚才的修改生效</span><br></code></pre></td></tr></table></figure><p>大不了多重启几次，就能正常显示头像了，第一次显示可能会挺慢的，但既然是Linux，又不是不能用嘛</p><p>安装VSC很简单，有deb，安装IDEA解压之后老规矩放在opt下喜欢的目录，然后运行解压出来的文件夹里的bin的idea.sh就行</p><p>然后，之前那个clash，果然是梯子的问题，不管clash的事。刚才依然是在/opt/Clash（我安装在这里）下用梯子给的链接更新了一下config.yaml，然后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./clash -d . <span class="hljs-comment">#最后那个.代表用当前目录下的配置文件</span><br></code></pre></td></tr></table></figure><p>成功连上外网啦！开心~</p><p><del>由于Linux在某些方面实在不是很人性化（虽然我想怪Clash为什么不做一个GUI啦），加上Linux不是主力系统，就不配置梯子的服务自启动自更新啥的了。</del></p><p>然后配置一下开机自启clash：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo vim /etc/systemd/system/clash.service<br><br>[Unit]<br>Description=clash daemon<br><br>[Service]<br>Type=simple<br>User=izayoiaster<br>ExecStart=/opt/Clash/clash -d .<br>Restart=on-failure<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl daemon-reload <span class="hljs-comment">#重新加载systemctl deamon</span><br>sudo systemctl start clash.sevice <span class="hljs-comment">#启动clash</span><br>sudo systemctl <span class="hljs-built_in">enable</span> clash.service <span class="hljs-comment">#开机启动</span><br></code></pre></td></tr></table></figure><p>输入下面的指令可以查看运行状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl status clash.service<br></code></pre></td></tr></table></figure><p>（貌似还是不太好用555）（好用啦！）</p><p>可以访问下列任意一个网址来可视化配置：</p><p><a href="http://clash.razord.top/#/proxies">http://clash.razord.top/#/proxies</a> （←这个网址每次都要清缓存才能登上去我不知道为什么）</p><p><a href="http://yacd.haishan.me/#/proxies">http://yacd.haishan.me/#/proxies</a></p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/Linux/image.4htn013c0eg0.png" alt="image"></p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/Linux/image.2b6p7mhc8tgk.png" alt="image"></p><p>可以设置一个切换窗口特效，我觉得自带的一个就不错，稍微设置一下就行（强烈吐槽微软取消了win7/vista那种切换窗口的特效！）</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/Linux/image.1cxjc4n6qpgg.png" alt="image"></p><p>然后自带的grub实在是太丑了，搞个美化</p><p><a href="https://github.com/vinceliuice/grub2-themes">https://github.com/vinceliuice/grub2-themes</a></p><p>虽然网上有一些教程，不过我这个主题貌似能自动安装配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo ./install.sh -b -t tela -s 2k <br></code></pre></td></tr></table></figure><p>本来还想弄个xshell的，发现没有linux版，但是又一想，我都已经是有zsh的linux了，直接<strong>ssh root@ip地址</strong>不比xshell香多了；于是我直接把服务器里配好的环境变量给拷过来了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">JAVA_HOME=/usr/<span class="hljs-built_in">local</span>/java/jdk1.8.0_311<br>CLASSPATH=<span class="hljs-variable">$JAVA_HOME</span>/lib/<br>PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$JAVA_HOME</span>/bin<br><span class="hljs-built_in">export</span> PATH JAVA_HOME CLASSPATH<br><br><span class="hljs-built_in">export</span> MAVEN_HOME=/usr/<span class="hljs-built_in">local</span>/maven/apache-maven-3.6.3<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$MAVEN_HOME</span>/bin:<span class="hljs-variable">$PATH</span> <br><br>PATH=/data/mysql/bin:/data/mysql/lib:<span class="hljs-variable">$PATH</span><br><span class="hljs-built_in">export</span> PATH<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/Linux/image.qcf64ds0yww.png" alt="image"></p><p>顺便，安装C/C++竟然这么简单：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install gcc<br>sudo apt-get install g++<br></code></pre></td></tr></table></figure><p>（然后写了个HelloWorld后才发现如今的VSC的配置已经能自动给编译生成可执行文件了？！）</p><p>收工！（暂时？）</p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot整合Redis的一些问题</title>
    <link href="/2021/10/24/SpringBoot%E6%95%B4%E5%90%88Redis%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
    <url>/2021/10/24/SpringBoot%E6%95%B4%E5%90%88Redis%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>把<code>@Autowired</code>改成<code>@Resource</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Resource</span><br><span class="hljs-keyword">private</span> RedisTemplate&lt;String, String&gt; redisTemplate;<br></code></pre></td></tr></table></figure><p>果然auto的不一定稳？</p><p>改了之后，确实能存进去了，但是有奇怪的前缀：</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/Other/image.6e2igifub5o0.png" alt="image"></p><p>这是产生原因：<a href="https://blog.csdn.net/hunger_wang/article/details/118713579?spm=1001.2014.3001.5501">RedisTemplate写入Redis数据出现无意义乱码前缀\xac\xed\x00\x05</a></p><p>解决方法——自己重写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ices.waimai.config;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.annotation.JsonTypeInfo;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.jsontype.impl.LaissezFaireSubTypeValidator;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedisTemplateConfig</span> </span>&#123;<br>    <span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="hljs-title">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory factory)</span> </span>&#123;<br>        RedisTemplate&lt;String, Object&gt; template = <span class="hljs-keyword">new</span> RedisTemplate&lt;String, Object&gt;();<br>        template.setConnectionFactory(factory);<br><br>        <span class="hljs-comment">//Json序列化配置</span><br>        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="hljs-keyword">new</span> Jackson2JsonRedisSerializer(Object.class);<br>        ObjectMapper om = <span class="hljs-keyword">new</span> ObjectMapper();<br>        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);<br>        om.activateDefaultTyping(LaissezFaireSubTypeValidator.instance,<br>                ObjectMapper.DefaultTyping.NON_FINAL,<br>                JsonTypeInfo.As.WRAPPER_ARRAY);<br>        jackson2JsonRedisSerializer.setObjectMapper(om);<br><br>        <span class="hljs-comment">//String序列化配置</span><br>        StringRedisSerializer stringRedisSerializer = <span class="hljs-keyword">new</span> StringRedisSerializer();<br>        <span class="hljs-comment">//key和hash的key都采用String的序列化配置</span><br>        template.setKeySerializer(stringRedisSerializer);<br>        template.setHashKeySerializer(stringRedisSerializer);<br><br>        <span class="hljs-comment">//value和hash的value采用Json的序列化配置</span><br>        template.setValueSerializer(jackson2JsonRedisSerializer);<br>        template.setHashValueSerializer(jackson2JsonRedisSerializer);<br>        template.afterPropertiesSet();<br>        <span class="hljs-keyword">return</span> template;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>欸嘿，好使了~</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/Other/image.6w08mmj5b6g0.png" alt="image"></p><p>顺带再来个好文：<a href="https://www.cnblogs.com/xsj1989/p/15151392.html">https://www.cnblogs.com/xsj1989/p/15151392.html</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Swagger3生成接口文档</title>
    <link href="/2021/10/23/%E4%BD%BF%E7%94%A8Swagger3%E7%94%9F%E6%88%90%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/"/>
    <url>/2021/10/23/%E4%BD%BF%E7%94%A8Swagger3%E7%94%9F%E6%88%90%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<p>1.导坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.在Application上面加入 <strong>@EnableOpenApi</strong> 注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableOpenApi</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WaimaiApp</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(WaimaiApp.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.编写配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ices.waimai.config<br><br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiOperation;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.PathSelectors;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;<br><span class="hljs-keyword">import</span> springfox.documentation.service.ApiInfo;<br><span class="hljs-keyword">import</span> springfox.documentation.service.Contact;<br><span class="hljs-keyword">import</span> springfox.documentation.spi.DocumentationType;<br><span class="hljs-keyword">import</span> springfox.documentation.spring.web.plugins.Docket;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Swagger3Config</span> </span>&#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">createRestApi</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.OAS_30)<br>                .apiInfo(apiInfo())<br>                .select()<br>                .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class))<br>                .paths(PathSelectors.any())<br>                .build();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title">apiInfo</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ApiInfoBuilder()<br>                .title(<span class="hljs-string">&quot;ICES-Waimai接口文档&quot;</span>)<br>                .description(<span class="hljs-string">&quot;Author: IzayoiAster&quot;</span>)<br>                .contact(<span class="hljs-keyword">new</span> Contact(<span class="hljs-string">&quot;GitHub&quot;</span>, <span class="hljs-string">&quot;https://github.com/IzayoiAster&quot;</span>, <span class="hljs-string">&quot;[email protected]&quot;</span>))<br>                .version(<span class="hljs-string">&quot;1.0&quot;</span>)<br>                .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.添加相关注解：</p><p>其实主要就是 <strong>@Api和@ApiOperation</strong> 啦</p><p>@Api要编辑tags属性才有效果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Api</span>：用在请求的类上，表示对类的说明<br>    tags=<span class="hljs-string">&quot;说明该类的作用，可以在UI界面上看到的注解&quot;</span><br>    value=<span class="hljs-string">&quot;该参数没什么意义，在UI界面上也看到，所以不需要配置&quot;</span><br><br><span class="hljs-meta">@ApiOperation</span>：用在请求的方法上，说明方法的用途、作用<br>    value=<span class="hljs-string">&quot;说明方法的用途、作用&quot;</span><br>    notes=<span class="hljs-string">&quot;方法的备注说明&quot;</span><br><br><span class="hljs-meta">@ApiImplicitParams</span>：用在请求的方法上，表示一组参数说明<br>    <span class="hljs-meta">@ApiImplicitParam</span>：用在<span class="hljs-meta">@ApiImplicitParams</span>注解中，指定一个请求参数的各个方面<br>        name：参数名<br>        value：参数的汉字说明、解释<br>        required：参数是否必须传<br>        paramType：参数放在哪个地方<br>            · header --&gt; 请求参数的获取：<span class="hljs-meta">@RequestHeader</span><br>            · query --&gt; 请求参数的获取：<span class="hljs-meta">@RequestParam</span><br>            · path（用于restful接口）--&gt; 请求参数的获取：<span class="hljs-meta">@PathVariable</span><br>            · body（不常用）<br>            · form（不常用）    <br>        dataType：参数类型，默认String，其它值dataType=<span class="hljs-string">&quot;Integer&quot;</span>       <br>        defaultValue：参数的默认值<br><br><span class="hljs-meta">@ApiResponses</span>：用在请求的方法上，表示一组响应<br>    <span class="hljs-meta">@ApiResponse</span>：用在<span class="hljs-meta">@ApiResponses</span>中，一般用于表达一个错误的响应信息<br>        code：数字，例如<span class="hljs-number">400</span><br>        message：信息，例如<span class="hljs-string">&quot;请求参数没填好&quot;</span><br>        response：抛出异常的类<br><br><span class="hljs-meta">@ApiModel</span>：用于响应类上，表示一个返回响应数据的信息<br>            （这种一般用在post创建的时候，使用<span class="hljs-meta">@RequestBody</span>这样的场景，<br>            请求参数无法使用<span class="hljs-meta">@ApiImplicitParam</span>注解进行描述的时候）<br>    <span class="hljs-meta">@ApiModelProperty</span>：用在属性上，描述响应类的属性<br></code></pre></td></tr></table></figure><p>然后，访问<code>http://localhost:8080/swagger-ui/index.html</code>即可：</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/%E6%9D%82%E5%9B%BE/image.4tmphl2fxoq0.png" alt="image"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Swagger</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux部署jar包</title>
    <link href="/2021/10/22/Linux%E9%83%A8%E7%BD%B2jar%E5%8C%85/"/>
    <url>/2021/10/22/Linux%E9%83%A8%E7%BD%B2jar%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<p>Java MySQL这些环境的配置就不说了<br>SpringBoot导够那些依赖之后，IDEA右边那个maven选项卡在Lifecircle里运行package，会生成一个jar包，传到linux里喜欢的地方</p><p>（顺便要是部署的时候想关闭程序，输<code>ps aux</code>就能列出进程和进程号；不过如果是简单的控制台java -jar的话Ctrl + C就行）</p><p><code>ps -ef|grep xxx.jar</code>，或者像下面这样，列出所有java进程</p><p>然后<code>kill -9 进程号</code></p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/Other/image.51wrb33gweg0.png" alt="image"></p><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><h4 id="方法1："><a href="#方法1：" class="headerlink" title="方法1："></a>方法1：</h4><p>1.使用命令 <code>firewall-cmd --state</code>查看防火墙状态。得到结果是running或者not running<br>2.在running 状态下，向firewall 添加需要开放的端口：<br><code>firewall-cmd --permanent --zone=public --add-port=8080/tcp</code>  永久添加端口，去掉 –permanent 则表示临时<br>3.<code>firewall-cmd --reload</code>  加载配置，使得修改有效。<br>4.<code>firewall-cmd --permanent --zone=public --list-ports</code> 查看开启的端口里是否成功添加</p><blockquote><p>p.s.CentOS7以下有专门的防火墙操作命令（我的那个阿里云也是）</p><p>开启防火墙：<code>systemctl start firewalld.service</code><br>关闭防火墙：<code>systemctl stop firewalld.service</code><br>开机自动启动： <code>systemctl enable firewalld.service</code><br>关闭开机自动启动： <code>systemctl disable firewalld.service</code><br>查看防火墙状态：<code>systemctl status firewalld</code></p></blockquote><p>但是发现还是没法从外界访问<code>服务器ip地址:端口号</code></p><p>然后想起来，哦，阿里云那边的安全组放行我还没配来着</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/%E6%9D%82%E5%9B%BE/image.4wil5g4gglk0.png" alt="image"></p><p>哟西！！！</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/%E6%9D%82%E5%9B%BE/image.462fv1e8hks0.png" alt="image"></p><h4 id="方法2：（次选）"><a href="#方法2：（次选）" class="headerlink" title="方法2：（次选）"></a>方法2：（次选）</h4><p>首先确保有iptables</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install iptables-services<br></code></pre></td></tr></table></figure><p>然后开放对应的端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> sample configuration <span class="hljs-keyword">for</span> iptables service</span><br><span class="hljs-meta">#</span><span class="bash"> you can edit this manually or use system-config-firewall</span><br><span class="hljs-meta">#</span><span class="bash"> please <span class="hljs-keyword">do</span> not ask us to add additional ports/services to this default configuration</span><br>*filter<br>:INPUT ACCEPT [0:0]<br>:FORWARD ACCEPT [0:0]<br>:OUTPUT ACCEPT [0:0]<br>-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT<br>-A INPUT -p icmp -j ACCEPT<br>-A INPUT -i lo -j ACCEPT<br>-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT<br>-A INPUT -P tcp -m state --state NEW -m tcp --dport 8080 -j ACCEPT<br>-A INPUT -P tcp -m state --state NEW -m tcp --dport 8888 -j ACCEPT<br>-A INPUT -j REJECT --reject-with icmp-host-prohibited<br>-A FORWARD -j REJECT --reject-with icmp-host-prohibited<br>COMMIT<br></code></pre></td></tr></table></figure><p>重启防火墙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl restart iptables<br></code></pre></td></tr></table></figure><p>但是报错了Orz：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ0jl38ljn8gs6phcrziyjZ waimai]# systemctl restart iptables<br>Job for iptables.service failed because the control process exited with error code.<br>See &quot;systemctl status iptables.service&quot; and &quot;journalctl -xe&quot; for details.<br></code></pre></td></tr></table></figure><p>搜了半天发现是和原有的firewalld冲突了好像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">service iptables save<br>systemctl stop firewalld<br>systemctl disable  firewalld<br>systemctl start iptables<br>systemctl status iptables<br>systemctl enable iptables<br></code></pre></td></tr></table></figure><p>（注意啦，这样一来/etc/sysconfig/iptables会重置，记得重写一下）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">预防：想要改回firewalld防火墙用下面命令<br>1）开机自动启动firewalld防火墙<br>systemctl enable firewalld.service<br>2）关闭开机制动启动<br>systemctl disable firewalld.service<br>3）查看状态<br>systemctl status firewalld<br>4）启用防火墙firewalld<br>systemctl start firewalld.service<br></code></pre></td></tr></table></figure><h4 id="配置后台运行"><a href="#配置后台运行" class="headerlink" title="配置后台运行"></a>配置后台运行</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nohup java -jar jarName-0.0.1-SNAPSHOT.jar &gt;msg.log 2&gt;&amp;1 &amp;<br></code></pre></td></tr></table></figure><p>参考<a href="https://blog.csdn.net/chen_2890/article/details/90520517">这里</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux安装配置MySQL（含远程连接）</title>
    <link href="/2021/10/22/Linux%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEMySQL%EF%BC%88%E5%90%AB%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%EF%BC%89/"/>
    <url>/2021/10/22/Linux%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEMySQL%EF%BC%88%E5%90%AB%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>这不最近在写外卖小程序的后台嘛，前端的兄弟问我要接口了，不过他那个机子还没怎么配那一堆环境，我把项目发给他让他连localhost似乎有点麻烦，干脆就先搞了个服务器研究研究部署项目，反正以后也要这么干。</p><p>网上的教程实在是……令人无语，搜出来10篇8篇都是抄来抄去一模一样的文章，剩下的还有一堆过时的，稍微记一下安装吧。</p><p>首先这是个全新的干干净净的服务器</p><p><a href="https://blog.csdn.net/u011421988/article/details/107234718">挖个坑，下次配置再写</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决MyBatis在浏览器返回json非null的值显示为null的问题</title>
    <link href="/2021/10/22/%E8%A7%A3%E5%86%B3MyBatis%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%94%E5%9B%9Ejson%E9%9D%9Enull%E7%9A%84%E5%80%BC%E6%98%BE%E7%A4%BA%E4%B8%BAnull%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2021/10/22/%E8%A7%A3%E5%86%B3MyBatis%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%94%E5%9B%9Ejson%E9%9D%9Enull%E7%9A%84%E5%80%BC%E6%98%BE%E7%A4%BA%E4%B8%BAnull%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/%E6%9D%82%E5%9B%BE/image.png" alt="image"></p><p>比如这种情况，一开始也不知道为啥，也没搜出来</p><p>后来换了换关键词才发现不是mysql的问题，是mybatis的问题</p><p>而导致这个mybatis问题的原因是那个MyBatisX的代码生成插件的问题</p><p><strong>对于sql中小写字母+下划线形式的表命名，在实体类中需要改为对应的驼峰命名形式才能被MyBatis正确映射</strong></p><p>那两个ActualColumn的选项，关上之后就是驼峰形式的了</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/%E6%9D%82%E5%9B%BE/image.5or87zb42us0.png" alt="image"></p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/%E6%9D%82%E5%9B%BE/image.5pw39uzmdps0.png" alt="image"></p>]]></content>
    
    
    
    <tags>
      
      <tag>MyBatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot学习笔记2</title>
    <link href="/2021/10/14/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/"/>
    <url>/2021/10/14/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>为什么又开了个2呢……</p><p>和SSM的不同，这个是因为那个SpringBoot1的课实在是条理太乱了，讲得也太深入，不是很适合……</p><p>但是删是不可能删的，开个2得了</p><p>（经典弹射起步）<br>（也主要是因为这之前的没必要写了）</p><h1 id="SpringBoot整合MyBatis"><a href="#SpringBoot整合MyBatis" class="headerlink" title="SpringBoot整合MyBatis"></a>SpringBoot整合MyBatis</h1><p>经典Initializr（当然这里只导了mybatis用到的）</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/SpringBoot2/image.78jegnjqhno0.png" alt="image"></p><p>（直接就用SSM2最后的那个account表来测试了）</p><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> money;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置配置文件（输入datasource就自动有提示补全了，SpringBoot1笔记里那个课还要配置补全，太过时了……）</p><p>（jdbc:mysql:///ssm 是那个典中典地址的简单写法）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql:///springboot</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br></code></pre></td></tr></table></figure><p>注解开发不用写MyBatis的配置信息，因为我是注解，就不写了，xml用到再回来看</p><p>UserMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.aster.testbatis.mapper;<br><br><span class="hljs-keyword">import</span> ...<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>&#123;<br><br>    <span class="hljs-meta">@Select(&quot;SELECT * FROM account&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-meta">@Insert(&quot;INSERT INTO account VALUES(#&#123;id&#125;, #&#123;name&#125;, #&#123;money&#125;)&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(User user)</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.aster.testbatis;<br><br><span class="hljs-keyword">import</span> ...<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestbatisApplicationTests</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindAll</span><span class="hljs-params">()</span> </span>&#123;<br>        List&lt;User&gt; userList = userMapper.findAll();<br>        System.out.println(userList); <span class="hljs-comment">// [User(id=1, name=aster, money=16.66)]</span><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testInsert</span><span class="hljs-params">()</span> </span>&#123;<br>        userMapper.insert(<span class="hljs-keyword">new</span> User(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;aster&quot;</span>, <span class="hljs-number">16.66</span>));<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/SpringBoot2/image.6dtx2q8g8tc.png" alt="image"></p><p><strong>上面这些就是所有的代码了</strong></p><p><strong>太他妈爽了！SpringBoot真是让SSM简单太太太太太太太太太多了！！！</strong></p><h1 id="SpringBoot原理分析"><a href="#SpringBoot原理分析" class="headerlink" title="SpringBoot原理分析"></a>SpringBoot原理分析</h1><h2 id="自动配置"><a href="#自动配置" class="headerlink" title="自动配置"></a>自动配置</h2><h3 id="Condition"><a href="#Condition" class="headerlink" title="Condition"></a>Condition</h3><p>Condition是条件判断，通过它可以<strong>选择性地</strong>创建Bean</p><p>例如：<strong>如果有Jeids坐标，就不注入User，否则注入User</strong></p><p>建一个空的springboot项目</p><p>实体类（略）</p><p><strong>配置类：</strong>（以前没怎么这样写，所以加粗了）</p><p>（再次注意哦，要在配置类里定义Bean）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.aster.test.config;<br><br><span class="hljs-keyword">import</span> ...<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserConfig</span> </span>&#123;<br><br>    <span class="hljs-meta">@Bean</span> <span class="hljs-comment">// 放入容器</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">user</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> User();<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.aster.test;<br><br><span class="hljs-keyword">import</span> ...<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestApplication</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 启动SpringBoot应用，获取IOC容器</span><br>        ConfigurableApplicationContext context = SpringApplication.run(TestApplication.class, args);<br><br>        User user = (User) context.getBean(<span class="hljs-string">&quot;user&quot;</span>);<br>        System.out.println(user);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>显然，上面的程序是能输出一个user实体的</p><p>我们在UserConfig上加一个**@Conditional<strong>注解，在注解内需要放置</strong>实现了Condition接口**的类字节码（是context包里的，别导错了）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.aster.test.config;<br><br><span class="hljs-keyword">import</span> ...<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@Conditional(ClassCondition.class)</span> <span class="hljs-comment">// &lt;----</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserConfig</span> </span>&#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">user</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> User();<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.aster.test.condition;<br><br><span class="hljs-keyword">import</span> ...<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassCondition</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Condition</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">matches</span><span class="hljs-params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> </span>&#123;<br>        <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">try</span> &#123; <span class="hljs-comment">// 判断redis.clients.jedis.Jedis.class是否存在</span><br>            Class&lt;?&gt; cls = Class.forName(<span class="hljs-string">&quot;redis.clients.jedis.Jedis&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            flag = <span class="hljs-keyword">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> flag;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>显然，当有下面的依赖的时候，能找到user，当没有的时候，就找不到了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>redis.clients<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jedis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>更进一步，<strong>将类的判断定义为动态的。即判断哪个字节码文件存在可以动态指定。</strong></p><p><strong>自定义一个注解</strong>@ConditionOnClass</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.aster.test.condition;<br><br><span class="hljs-keyword">import</span> ...<br><br><span class="hljs-comment">// 以下三个是直接复制过来的@Conditinal内的注解</span><br><span class="hljs-meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span> <span class="hljs-comment">// 作用在类和方法上</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span> <span class="hljs-comment">// 运行时生效</span><br><span class="hljs-meta">@Documented</span><br><br><span class="hljs-meta">@Conditional(ClassCondition.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> ConditionOnClass &#123;<br>    String[] value(); <span class="hljs-comment">// 可能有多个条件，所以用数组</span><br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>随记两个小知识：1.在方法上敲/**回车，自动生成方法说明的模板；2.敲iter自动生成迭代形式的for</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.aster.test.condition;<br><br><span class="hljs-keyword">import</span> ...<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassCondition</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Condition</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> context 上下文对象，用于获取环境、IOC容器、ClassLoader对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> metadata 注解元对象，可以用于获取注解定义的属性值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">matches</span><span class="hljs-params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> </span>&#123;<br>        <span class="hljs-comment">// 需求：导入通过注解属性值value指定的坐标后才创建Bean</span><br>        <br>        <span class="hljs-comment">// 获取注解属性值value</span><br>        Map&lt;String, Object&gt; map = metadata.getAnnotationAttributes(ConditionOnClass.class.getName());<br>        String[] value = (String[]) map.get(<span class="hljs-string">&quot;value&quot;</span>);<br>        <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">true</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">for</span> (String className : value) &#123;<br>                Class&lt;?&gt; cls = Class.forName(className);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            flag = <span class="hljs-keyword">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> flag;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>那么，说回原理分析，SpringBoot是如何帮我们自动创建Bean的呢？当我们引入对应的starter之后，SpringBoot就会通过Condition对应的starter从而得知要创建Bean</p><p>然后你就会发现，上面的东西白学了（典中典），SpringBoot提供了一堆类似的注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-meta">@ConditionalOnClass(&quot;xxxxx&quot;)</span><br><span class="hljs-meta">@ConditionalOnProperty(name = &quot;xxx&quot;, havingValue = &quot;xxx&quot;)</span> <span class="hljs-comment">// 当配置文件里有name: value后再执行</span><br></code></pre></td></tr></table></figure><h3 id="切换内置web服务器"><a href="#切换内置web服务器" class="headerlink" title="切换内置web服务器"></a>切换内置web服务器</h3><p>（暂略）</p><h3 id="Enable…"><a href="#Enable…" class="headerlink" title="@Enable…"></a>@Enable…</h3><p> springboot中有很多Enable开头的注解，用于动态启动某些功能。底层原理是使用@Import导入一些配置类，实现Bean的动态加载</p><p>SpringBoot工程是<strong>不可以</strong>直接获取别的jar包中定义的Bean的</p><p>因为@SpringBootApplication内的@ComponentScan的范围是当前引导类所在包及其子包，就算在pom.xml里导坐标了，也扫不到外面的东西</p><p><strong>解决方案1：</strong>使用**@Import**注解加载类，被加载的类都会被Spring创建，并被放入IOC容器</p><p>但是这个方案也挺麻烦，和配置一堆@ComponentScan没多大区别</p><p><strong>解决方案2：</strong>声明注解@EnableUser（假如说是在外面定义了个User类想要注入），在这个注解内写好@Import等，然后在需要用到的其他地方@EnableUser即可</p><h3 id="Import"><a href="#Import" class="headerlink" title="@Import"></a>@Import</h3><p>既然上面的Enable底层是Import，来看一下Import</p><p>Import有四种用法：</p><ul><li>导入Bean</li><li>导入配置类</li><li>导入ImportSelector实现类，一般用于加载配置文件中的类</li><li>导入ImportBeanDefinitionRegistrar实现类</li></ul><h4 id="直接导入bean"><a href="#直接导入bean" class="headerlink" title="直接导入bean"></a>直接导入bean</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Import(User.class)</span><br></code></pre></td></tr></table></figure><p>导入后的名称是类的全限定名</p><h4 id="导入配置类"><a href="#导入配置类" class="headerlink" title="导入配置类"></a>导入配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Import(MyConfig.class)</span><br></code></pre></td></tr></table></figure><p>这样一来，MyConfig内所有声明的Bean都会被导入（这种情况下，配置类的@Configuration注解可以不写）</p><h4 id="导入ImportSelector的实现类"><a href="#导入ImportSelector的实现类" class="headerlink" title="导入ImportSelector的实现类"></a>导入ImportSelector的实现类</h4><p>（暂略）</p><h2 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h2><p>SpringBoot的监听机制其实是对Java的监听机制的封装</p><p>Java中的事件监听机制定义了以下的几个角色：</p><ol><li>事件Event：继承java.util.EventObject类的对象</li><li>事件源Source：任意对象Object</li><li>监听器Listener：实现java.util.EventListener接口的对象</li></ol><p>SpringBoot在项目启动的时候，会对几个监听器进行回调，我们可以实现这些监听器接口，在项目启动时完成一些操作：ApplicationContextInitializer, SpringApplicationRunListener, CommandLineRunner, ApplicationRunner</p><p>[（看了，暂不记）](<a href="https://www.bilibili.com/video/BV1Lq4y1J77x?p=28">黑马程序员SpringBoot教程，6小时快速入门Java微服务架构Spring Boot_哔哩哔哩_bilibili</a>)</p><h2 id="启动流程分析"><a href="#启动流程分析" class="headerlink" title="启动流程分析"></a>启动流程分析</h2><h1 id="SpringBoot项目部署"><a href="#SpringBoot项目部署" class="headerlink" title="SpringBoot项目部署"></a>SpringBoot项目部署</h1><p>支持两种方式部署到服务器：jar（官方推荐） /  war</p><p>在笔记1里也学过，在右边的Maven选项里执行package</p><p>然后，java -jar .\xxxxxx.jar 就行了</p><p>（war暂略）</p>]]></content>
    
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于IDEA的Unable to resolve table</title>
    <link href="/2021/10/14/%E5%85%B3%E4%BA%8EIDEA%E7%9A%84Unable%20to%20resolve%20table/"/>
    <url>/2021/10/14/%E5%85%B3%E4%BA%8EIDEA%E7%9A%84Unable%20to%20resolve%20table/</url>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title="."></a>.</h1><p>一时没有一个看起来靠谱的方案</p><p>但是有个凑合的：写table的全限定名</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/Other/image.7kuyd0dezi0.png" alt="image"></p>]]></content>
    
    
    
    <tags>
      
      <tag>IDEA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建校园外卖小程序</title>
    <link href="/2021/10/07/%E6%90%AD%E5%BB%BA%E6%A0%A1%E5%9B%AD%E5%A4%96%E5%8D%96%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    <url>/2021/10/07/%E6%90%AD%E5%BB%BA%E6%A0%A1%E5%9B%AD%E5%A4%96%E5%8D%96%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>怕以后维护的时候忘了，边做边记一下，就不起小标题了，也不删导包了</p><p>后注：发现还是有点长，起小标题吧……</p><p><strong>p.s. 杂记罢了，很乱，也不完整，可能写到后面改了东西也懒得改前面，里面充满了各种错误</strong></p><p><strong>（比如前面的Service都注入成了实现类……虽然没啥大区别？）</strong></p><p>（不会真有人闲的没事找到我博客翻着看吧）</p><h4 id="一些快捷键"><a href="#一些快捷键" class="headerlink" title="一些快捷键"></a>一些快捷键</h4><p>Ctrl + Alt + B 由controller快速创建service</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>改一改配置文件</p><p>因为前端端口是8080（我猜的，前端的兄弟还没写完应该），我们把后端换成8888</p><p>然后配一下数据源、mybatisplus之类的</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8888</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">ices_waimai</span><br>  <span class="hljs-comment"># datasource</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/waimai?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimeZone=UTC</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><br><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-comment"># 配置sql日志</span><br>    <span class="hljs-attr">log-impl:</span> <span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span><br></code></pre></td></tr></table></figure><p>两个config：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ices.waimai.config;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;<br><span class="hljs-keyword">import</span> org.mybatis.spring.annotation.MapperScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@MapperScan(&quot;com.ices.waimai.dao.mapper&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBatisPlusConfig</span> </span>&#123;<br><br>    <span class="hljs-comment">// 分页插件</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> MybatisPlusInterceptor <span class="hljs-title">mybatisPlusInterceptor</span><span class="hljs-params">()</span> </span>&#123;<br>        MybatisPlusInterceptor interceptor = <span class="hljs-keyword">new</span> MybatisPlusInterceptor();<br>        interceptor.addInnerInterceptor(<span class="hljs-keyword">new</span> PaginationInnerInterceptor());<br>        <span class="hljs-keyword">return</span> interceptor;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ices.waimai.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.CorsRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebMVCConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">WebMvcConfigurer</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addCorsMappings</span><span class="hljs-params">(CorsRegistry registry)</span> </span>&#123;<br>        <span class="hljs-comment">// 跨域配置</span><br>        <span class="hljs-comment">// 前端8080访问后端8888相当于两个域名之间的访问，是不同服务器，要允许8080访问我们的8888的api</span><br>        <span class="hljs-comment">// 复习：域名 = IP地址 + 端口</span><br>        registry.addMapping(<span class="hljs-string">&quot;/**&quot;</span>).allowedOrigins(<span class="hljs-string">&quot;http://localhost:8080&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>返回的json一般都是这样的：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;success&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">&quot;code&quot;</span>: <span class="hljs-number">200</span>,<br>    <span class="hljs-attr">&quot;msg&quot;</span>: <span class="hljs-string">&quot;success&quot;</span>,<br>    <span class="hljs-attr">&quot;data&quot;</span>: []<br>&#125;<br></code></pre></td></tr></table></figure><p>然后以用户为例吧，需要建立mapper和对应mapper的实体类</p><p>这里穿插一个小插件——MyBatisPlusX，可以自动根据数据库生成实体类之类的东西：</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/ices-waimai/image.4fa2fbtzpsa0.png" alt="image"></p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/ices-waimai/image.2gvpaa78lhw0.png" alt="image"></p><p>这样就会生成一个和数据库里的表对应的实体类啦！</p><p>MyBatisPlus提供了mapper的父类BaseMapper&lt; &gt;，用的时候继承即可</p><p>MyBatisPlus会自动将User类和数据库中名为user的表做关联</p><p>（当然这里只是搭架子）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ices.waimai.dao.pojo;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String username;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ices.waimai.dao.mapper;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;<br><span class="hljs-keyword">import</span> com.ices.waimai.dao.pojo.User;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseMapper</span>&lt;<span class="hljs-title">User</span>&gt; </span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>json返回值封装一下，在vo下建立一个Result封装类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ices.waimai.vo;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Result</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> success;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> code;<br>    <span class="hljs-keyword">private</span> String msg;<br>    <span class="hljs-keyword">private</span> Object data;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Result <span class="hljs-title">success</span><span class="hljs-params">(Object data)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result(<span class="hljs-keyword">true</span>, <span class="hljs-number">200</span>, <span class="hljs-string">&quot;success&quot;</span>, data);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Result <span class="hljs-title">fail</span><span class="hljs-params">(<span class="hljs-keyword">int</span> code, String msg)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result(<span class="hljs-keyword">false</span>, code, msg, <span class="hljs-keyword">null</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ices.waimai.controller;<br><br><span class="hljs-keyword">import</span> com.ices.waimai.vo.params.PageParams;<br><span class="hljs-keyword">import</span> com.ices.waimai.vo.params.Result;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PostMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestBody;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShopController</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 首页 店铺列表</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pageParams</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostMapping</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">listShop</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> PageParams pageParams)</span></span>&#123;<br>        <br>        <span class="hljs-keyword">return</span> shopController.listShop(pageParams);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>上面这个也还是个架子</p><p>listShop里的东西，需要交给service去实现，标准的实现形式是<strong>service的接口和实现类</strong></p><p><del>感觉上面的接口命名很乱……改用RESTful风格的接口命名规范</del></p><p><a href="https://www.cnblogs.com/MTRD/p/12153561.html"><del>RESTful风格的接口命名规范 - 快速突围 - 博客园 (cnblogs.com)</del></a></p><p><del>由于Controller里的方法名的命名规范并没有找到，所以自己定了一套</del></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs txt">getUser<br>getUserById<br>getAllUsers<br><br>updateUser<br><br>addUser<br><br>deleteUser<br></code></pre></td></tr></table></figure><p>我逐渐理解为什么要用RESTful风格了，因为我一开始url也是按照上面自己写的那个规范来写的，但是起名依然是很混乱</p><p><strong>url里不出现动词！仅仅表示这是一个对应的资源！操作方式由method来实现</strong></p><p>登录使用一下JWT</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>JWT由三部分组成：</p><ul><li>头部Header：<code>&#123;&quot;type&quot;: &quot;JWT&quot;, &quot;alg&quot;: &quot;HS256&quot;&#125;</code></li><li>载荷Payload：存放信息，比如用户id、过期时间等，可以被解密，不能存敏感信息</li><li>签证Signature：头部和载荷加上密钥加密而成，只要密钥不丢失，可以认为是安全的</li></ul><p>JWT验证主要就是验证C部分是否合法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ices.waimai.utils;<br><br><span class="hljs-keyword">import</span> io.jsonwebtoken.Jwt;<br><span class="hljs-keyword">import</span> io.jsonwebtoken.JwtBuilder;<br><span class="hljs-keyword">import</span> io.jsonwebtoken.Jwts;<br><span class="hljs-keyword">import</span> io.jsonwebtoken.SignatureAlgorithm;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JWTUtils</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String jwtToken = <span class="hljs-string">&quot;I2ay01@sT3RsJwTT0k3N.&quot;</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">creatToken</span><span class="hljs-params">(<span class="hljs-keyword">int</span> userid)</span> </span>&#123;<br>        Map&lt;String, Object&gt; claims = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        claims.put(<span class="hljs-string">&quot;userid&quot;</span>, userid); <span class="hljs-comment">// Payload</span><br>        JwtBuilder jwtBuilder = Jwts.builder()<br>                .signWith(SignatureAlgorithm.HS256, jwtToken) <span class="hljs-comment">// Header，签发算法，密钥为jwtToken</span><br>                .setClaims(claims) <span class="hljs-comment">// 设置Payload，要唯一，比如userid</span><br>                .setIssuedAt(<span class="hljs-keyword">new</span> Date()) <span class="hljs-comment">// 设置签发时间</span><br>                .setExpiration(<span class="hljs-keyword">new</span> Date(System.currentTimeMillis() + <span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>)); <span class="hljs-comment">// 设置过期时间</span><br>        <span class="hljs-keyword">return</span> jwtBuilder.compact();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map&lt;String, Object&gt; <span class="hljs-title">checkToken</span><span class="hljs-params">(String token)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Jwt parse = Jwts.parser().setSigningKey(jwtToken).parse(token);<br>            <span class="hljs-keyword">return</span> (Map&lt;String, Object&gt;) parse.getBody();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String token = JWTUtils.creatToken(<span class="hljs-number">114154</span>);<br>        System.out.println(token);<br>        Map&lt;String, Object&gt; map = JWTUtils.checkToken(token);<br>        <span class="hljs-keyword">assert</span> map != <span class="hljs-keyword">null</span>;<br>        System.out.println(map.get(<span class="hljs-string">&quot;userid&quot;</span>));<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>因为最好一个Service负责一种事务，所以在LoginController里最好不是注入UserService，而是注入一个专门的LoginService</p><p>这里，isBlank用到了apache的common-lang</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.commons/commons-lang3 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-lang3<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.12.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后还需要用到redis</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># redis</span><br><span class="hljs-attr">redis:</span><br>  <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/fastjson --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.78<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>md5加密：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-codec<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-codec<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ices.waimai.controller;<br><br><span class="hljs-keyword">import</span> com.ices.waimai.service.LoginService;<br><span class="hljs-keyword">import</span> com.ices.waimai.service.impl.LoginServiceImpl;<br><span class="hljs-keyword">import</span> com.ices.waimai.vo.Result;<br><span class="hljs-keyword">import</span> com.ices.waimai.vo.params.LoginParam;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PostMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestBody;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> LoginServiceImpl loginService;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/login&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">login</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> LoginParam loginParam)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> loginService.login(loginParam);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ices.waimai.service.impl;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.ices.waimai.dao.domain.TUser;<br><span class="hljs-keyword">import</span> com.ices.waimai.service.LoginService;<br><span class="hljs-keyword">import</span> com.ices.waimai.service.UserService;<br><span class="hljs-keyword">import</span> com.ices.waimai.utils.JWTUtils;<br><span class="hljs-keyword">import</span> com.ices.waimai.vo.Result;<br><span class="hljs-keyword">import</span> com.ices.waimai.vo.params.LoginParam;<br><span class="hljs-keyword">import</span> org.apache.commons.codec.digest.DigestUtils;<br><span class="hljs-keyword">import</span> org.apache.commons.lang3.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">LoginService</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate&lt;String, String&gt; redisTemplate;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String salt = <span class="hljs-string">&quot;不告诉你&quot;</span>; <span class="hljs-comment">// 加密盐 防止MD5破解</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">login</span><span class="hljs-params">(LoginParam loginParam)</span> </span>&#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 1.检查参数是否合法</span><br><span class="hljs-comment">         * 2.根据电话和openid去用户表中查询是否存在</span><br><span class="hljs-comment">         * 3.如果不存在，登录失败</span><br><span class="hljs-comment">         * 4.如果存在，使用jwt生成token返回前端</span><br><span class="hljs-comment">         * 5.token放入redis当中，设置过期时间</span><br><span class="hljs-comment">         * （登录认证的时候， 先认证token是否合法，再去redis认证是否存在）</span><br><span class="hljs-comment">         */</span><br>        String phone = loginParam.getPhone();<br>        String openid = loginParam.getOpenid();<br>        <span class="hljs-keyword">if</span>(StringUtils.isBlank(phone) || StringUtils.isBlank(openid)) &#123;<br>            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-number">10001</span>, <span class="hljs-string">&quot;参数不合法&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 数据库里存的是加密后的openid，所以也要用加密的openid来找</span><br>        openid = DigestUtils.md5Hex(openid + salt);<br>        TUser user = userService.findUser(phone, openid);<br>        <span class="hljs-keyword">if</span>(user == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-number">10002</span>, <span class="hljs-string">&quot;手机号或openid不存在&quot;</span>);<br>        &#125;<br>        String token = JWTUtils.creatToken(user.getId());<br>        <span class="hljs-comment">// 存到redis，过期时间一天</span><br>        redisTemplate.opsForValue().set(<span class="hljs-string">&quot;TOKEN_&quot;</span> + token, JSON.toJSONString(user), <span class="hljs-number">1</span>, TimeUnit.DAYS);<br>        <span class="hljs-keyword">return</span> Result.success(token);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后，是登录之后获取用户相关信息</p><p> UserController</p><p>token存在请求头里</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 凭借token取得用户信息</span><br><span class="hljs-meta">@RequestMapping(&quot;getInfo&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">getInfo</span><span class="hljs-params">(<span class="hljs-meta">@RequestHeader</span> String token)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> userService.findUserByToken(token);<br>&#125;<br></code></pre></td></tr></table></figure><p>UserService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 请求用户信息</span><br><span class="hljs-comment"> * 请求前进行token合法性校验</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">findUserByToken</span><span class="hljs-params">(String token)</span> </span>&#123;<br>    TUser user = loginService.checkToken(token);<br>    <span class="hljs-keyword">return</span> Result.success(user);<br>&#125;<br></code></pre></td></tr></table></figure><p>LoginService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> TUser <span class="hljs-title">checkToken</span><span class="hljs-params">(String token)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(StringUtils.isBlank(token)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>    Map&lt;String, Object&gt; map = JWTUtils.checkToken(token);<br>    <span class="hljs-comment">// 解析失败</span><br>    <span class="hljs-keyword">if</span>(map == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>    <span class="hljs-comment">// 解析成功</span><br>    String userJson = redisTemplate.opsForValue().get(<span class="hljs-string">&quot;TOKEN_&quot;</span> + token);<br>    <span class="hljs-keyword">if</span>(StringUtils.isBlank(userJson)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>    TUser user = JSON.parseObject(userJson, TUser.class);<br>    <span class="hljs-keyword">return</span> user;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>我发现这玩意儿笔记记的还是太详细了……并不是很有用</strong></p><p><strong>只记知识点吧</strong></p><p>可以建立枚举方便报错：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ices.waimai.vo;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">ErrorCode</span> </span>&#123;<br><br>    PARAMS_ERROR(<span class="hljs-number">10001</span>,<span class="hljs-string">&quot;参数有误&quot;</span>),<br>    ACCOUNT_PWD_NOT_EXIST(<span class="hljs-number">10002</span>,<span class="hljs-string">&quot;电话或openid不存在&quot;</span>),<br>    NO_PERMISSION(<span class="hljs-number">70001</span>,<span class="hljs-string">&quot;无访问权限&quot;</span>),<br>    SESSION_TIME_OUT(<span class="hljs-number">90001</span>,<span class="hljs-string">&quot;会话超时&quot;</span>),<br>    NO_LOGIN(<span class="hljs-number">90002</span>,<span class="hljs-string">&quot;未登录&quot;</span>),;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> code;<br>    <span class="hljs-keyword">private</span> String msg;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getCode</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> code;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getMsg</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> msg;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这里有个mybatisplus的生成id的<strong>雪花算法</strong>，之后记得研究一下</p><p>在RegisterService前加上@Transactional声明<strong>事务控制</strong>，这样一来如果注册途中出错了可以回滚而不是添加了用户</p><p><strong>登录拦截器</strong>：如果遇到需要登录才能访问的接口，未登录的情况下直接返回，并跳转登录页面</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ices.waimai.handler;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.toolkit.StringUtils;<br><span class="hljs-keyword">import</span> com.ices.waimai.dao.domain.TUser;<br><span class="hljs-keyword">import</span> com.ices.waimai.service.LoginService;<br><span class="hljs-keyword">import</span> com.ices.waimai.utils.UserThreadLocal;<br><span class="hljs-keyword">import</span> com.ices.waimai.vo.ErrorCode;<br><span class="hljs-keyword">import</span> com.ices.waimai.vo.Result;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.web.method.HandlerMethod;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> LoginService loginService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 在执行controller方法之前执行</span><br><span class="hljs-comment">     * 1.判断请求的接口路径是否是要拦截的HandlerMethod（因为有可能是比如访问静态资源的controller）</span><br><span class="hljs-comment">     * 2.判断token是否为空，如果为空，说明未登录</span><br><span class="hljs-comment">     * 3.如果token不为空，验证登录是否合法：loginService.checkToken</span><br><span class="hljs-comment">     * 4.如果认证成功，放行</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">if</span>(!(handler <span class="hljs-keyword">instanceof</span> HandlerMethod)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>; <span class="hljs-comment">// 不是要拦截的controller，放行</span><br>        &#125;<br>        String token = request.getHeader(<span class="hljs-string">&quot;Authorization&quot;</span>); <span class="hljs-comment">// 获取请求头里的token</span><br><br>        <span class="hljs-comment">// 检验token是否为空</span><br>        <span class="hljs-keyword">if</span>(StringUtils.isBlank(token))&#123;<br>            Result result = Result.fail(ErrorCode.NOT_LOGIN.getCode(), <span class="hljs-string">&quot;未登录&quot;</span>);<br>            response.setContentType(<span class="hljs-string">&quot;application/json;charset=utf-8&quot;</span>); <span class="hljs-comment">// 返回json</span><br>            response.getWriter().print(JSON.toJSONString(result)); <span class="hljs-comment">// result转为json</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 检验登录是否合法</span><br>        TUser user = loginService.checkToken(token);<br>        <span class="hljs-keyword">if</span> (user == <span class="hljs-keyword">null</span>) &#123;<br>            Result result = Result.fail(ErrorCode.NOT_LOGIN.getCode(), <span class="hljs-string">&quot;未登录&quot;</span>);<br>            response.setContentType(<span class="hljs-string">&quot;application/json;charset=utf-8&quot;</span>);<br>            response.getWriter().print(JSON.toJSONString(result));<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 登录验证成功，放行</span><br>        <span class="hljs-comment">// 存在ThreadLocal中，以便在controller中能直接获取用户的信息</span><br>        UserThreadLocal.put(user);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">// 用完删除，避免内存泄漏</span><br>        UserThreadLocal.remove();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ices.waimai.config;<br><br><span class="hljs-keyword">import</span> com.ices.waimai.handler.LoginInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.CorsRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebMVCConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">WebMvcConfigurer</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> LoginInterceptor loginInterceptor;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addCorsMappings</span><span class="hljs-params">(CorsRegistry registry)</span> </span>&#123;<br>        <span class="hljs-comment">// 跨域配置</span><br>        <span class="hljs-comment">// 前端8080访问后端8888相当于两个域名之间的访问，是不同服务器，要允许8080访问我们的8888的api</span><br>        <span class="hljs-comment">// 复习：域名 = IP地址 + 端口</span><br>        registry.addMapping(<span class="hljs-string">&quot;/**&quot;</span>).allowedOrigins(<span class="hljs-string">&quot;http://localhost:8080&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> </span>&#123;<br>        <span class="hljs-comment">//这里假设拦截test，后续实际遇到拦截的接口时要配置真正的拦截接口</span><br>        registry.addInterceptor(loginInterceptor)<br>                .addPathPatterns(<span class="hljs-string">&quot;/test&quot;</span>);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>拷贝属性</strong>：比如说，实体类和controller里包装的参数类，可能关键属性是一样的，但是实体类比参数类（vo）多了一些东西，不能直接强行赋值，这时候需要拷贝它们相同的属性，有很多种方法，这里使用spring的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">addShop</span><span class="hljs-params">(ShopParam shopParam)</span> </span>&#123;<br>    TShop newShop = <span class="hljs-keyword">new</span> TShop();<br>    BeanUtils.copyProperties(shopParam, newShop);<br>    newShop.setTotSales(<span class="hljs-number">0</span>);<br>    shopMapper.insert(newShop);<br>    <span class="hljs-keyword">return</span> Result.success(<span class="hljs-string">&quot;添加店铺&quot;</span> + newShop.getId());<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>ThreadLocal</strong></p><p>类似于微信的setStorage?</p><p>LoginInterceptor.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> LoginService loginService;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>        ...<span class="hljs-comment">// 不是要拦截的controller，放行</span><br>        <br>        ...<span class="hljs-comment">// 获取请求头里的token</span><br><br>        <span class="hljs-comment">// 检验token是否为空</span><br>        ...<br><br>        <span class="hljs-comment">// 检验登录是否合法</span><br>...<br><br>        <span class="hljs-comment">// 登录验证成功，放行</span><br>        <span class="hljs-comment">// 存在ThreadLocal中，以便在controller中能直接获取用户的信息</span><br>        UserThreadLocal.put(user);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">// 用完删除，避免内存泄漏</span><br>        UserThreadLocal.remove();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ices.waimai.utils;<br><br><span class="hljs-keyword">import</span> com.ices.waimai.dao.domain.TUser;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserThreadLocal</span> </span>&#123;<br>    <span class="hljs-comment">// 线程变量隔离</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;TUser&gt; LOCAL = <span class="hljs-keyword">new</span> ThreadLocal&lt;&gt;();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">put</span><span class="hljs-params">(TUser user)</span> </span>&#123;<br>        LOCAL.set(user);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> TUser <span class="hljs-title">get</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> LOCAL.get();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">()</span> </span>&#123;<br>        LOCAL.remove();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这样，在需要用到当前登录的用户的地方，UserThreadLocal.get()就能获取当前用户的实例了</p><p><strong>线程池</strong></p><p>MySQL在更新数据（emm，比如，更新销量？）的时候会加<strong>写锁</strong>，如果这时候有其他的读操作，性能会降低</p><p>写锁是没法避免的，我们可以对更新操作做文章 —— 一旦更新出问题，不能让他影响其他操作</p><p><strong>把更新操作扔到线程池中去执行，和主线程就不相关了</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ices.waimai.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.scheduling.annotation.EnableAsync;<br><span class="hljs-keyword">import</span> org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.Executor;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableAsync</span> <span class="hljs-comment">//开启多线程</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadPoolConfig</span> </span>&#123;<br><br>    <span class="hljs-meta">@Bean(&quot;taskExecutor&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Executor <span class="hljs-title">asyncServiceExecutor</span><span class="hljs-params">()</span> </span>&#123;<br>        ThreadPoolTaskExecutor executor = <span class="hljs-keyword">new</span> ThreadPoolTaskExecutor();<br>        <span class="hljs-comment">// 设置核心线程数</span><br>        executor.setCorePoolSize(<span class="hljs-number">5</span>);<br>        <span class="hljs-comment">// 设置最大线程数</span><br>        executor.setMaxPoolSize(<span class="hljs-number">20</span>);<br>        <span class="hljs-comment">//配置队列大小</span><br>        executor.setQueueCapacity(Integer.MAX_VALUE);<br>        <span class="hljs-comment">// 设置线程活跃时间（秒）</span><br>        executor.setKeepAliveSeconds(<span class="hljs-number">60</span>);<br>        <span class="hljs-comment">// 设置默认线程名称</span><br>        executor.setThreadNamePrefix(<span class="hljs-string">&quot;ICESWaimai&quot;</span>);<br>        <span class="hljs-comment">// 等待所有任务结束后再关闭线程池</span><br>        executor.setWaitForTasksToCompleteOnShutdown(<span class="hljs-keyword">true</span>);<br>        <span class="hljs-comment">//执行初始化</span><br>        executor.initialize();<br>        <span class="hljs-keyword">return</span> executor;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对应的service（注意：MyBatisPlus的update，传入的新实体类设定了什么值才会去更新什么值，对于没设置值的属性，不会去动）</p><p>乐观锁，见<a href="https://blog.csdn.net/qq_37113604/article/details/81582784">https://blog.csdn.net/qq_37113604/article/details/81582784</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ices.waimai.service.impl;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.conditions.update.LambdaUpdateWrapper;<br><span class="hljs-keyword">import</span> com.ices.waimai.dao.domain.TDish;<br><span class="hljs-keyword">import</span> com.ices.waimai.dao.domain.TShop;<br><span class="hljs-keyword">import</span> com.ices.waimai.dao.mapper.DishMapper;<br><span class="hljs-keyword">import</span> com.ices.waimai.dao.mapper.ShopMapper;<br><span class="hljs-keyword">import</span> com.ices.waimai.service.ThreadService;<br><span class="hljs-keyword">import</span> org.springframework.scheduling.annotation.Async;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ThreadService</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 更新店铺月总销量</span><br><span class="hljs-comment">     * 此操作在线程池执行，不会影响原有的主线程</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Async(&quot;taskExecutor&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateTotSales</span><span class="hljs-params">(ShopMapper shopMapper, TShop shop)</span> </span>&#123;<br><br>        <span class="hljs-keyword">int</span> totSales = shop.getTotSales();<br>        TShop shopUpdated = <span class="hljs-keyword">new</span> TShop();<br>        shopUpdated.setTotSales(totSales + <span class="hljs-number">1</span>);<br><br>        LambdaUpdateWrapper&lt;TShop&gt; updateWrapper = <span class="hljs-keyword">new</span> LambdaUpdateWrapper&lt;&gt;();<br>        updateWrapper.eq(TShop::getId, shop.getId());<br>        <span class="hljs-comment">//乐观锁；这个查询条件是确保多线程下的线程安全，改之前再次确认这个值没被其他线程抢先修改</span><br>        updateWrapper.eq(TShop::getTotSales, totSales);<br><br>        <span class="hljs-comment">// UPDATE t_shop SET tot_sales=100 WHERE tot_sales=99 AND id=16</span><br>        shopMapper.update(shopUpdated, updateWrapper);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 更新菜品月销量</span><br><span class="hljs-comment">     * 此操作在线程池执行，不会影响原有的主线程</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateMonthlySales</span><span class="hljs-params">(DishMapper dishMapper, TDish dish)</span> </span>&#123;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>注意：这里生成的实体类，int转成了Integer所以没问题。如果是基本类型int的话，会有默认值0，MyBatisPlus会认为0也是一个set了的值，从而覆盖原本的值—— <strong>一定要在实体类中使用封装类型，从而在未设定值的时候值为null</strong></p><p><strong>AOP日志</strong> </p><p>毕竟日志代码嵌入在项目代码里不是很合适</p><p>别忘了导入坐标：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ices.waimai.common.aop;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.*;<br><br><span class="hljs-comment">// TYPE代表可以放在类上，METHOD代表可以放在方法上</span><br><span class="hljs-meta">@Target(&#123;ElementType.METHOD&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> LogAnnotation &#123;<br><br>    <span class="hljs-function">String <span class="hljs-title">module</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> &quot;&quot;</span>;<br><br>    <span class="hljs-function">String <span class="hljs-title">operation</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> &quot;&quot;</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ices.waimai.common.aop;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.ices.waimai.utils.HttpContextUtils;<br><span class="hljs-keyword">import</span> com.ices.waimai.utils.IpUtils;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Around;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Aspect;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Pointcut;<br><span class="hljs-keyword">import</span> org.aspectj.lang.reflect.MethodSignature;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span> <span class="hljs-comment">// 声明这是一个定义了通知（advice）和切点的关系的切面类</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LogAspect</span> </span>&#123;<br><br>    <span class="hljs-meta">@Pointcut(&quot;@annotation(com.ices.waimai.common.aop.LogAnnotation)&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pt</span><span class="hljs-params">()</span></span>&#123;&#125;<br><br>    <span class="hljs-comment">//环绕通知</span><br>    <span class="hljs-meta">@Around(&quot;pt()&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">log</span><span class="hljs-params">(ProceedingJoinPoint point)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br><br>        <span class="hljs-keyword">long</span> beginTime = System.currentTimeMillis();<br>        <span class="hljs-comment">//执行方法</span><br>        Object result = point.proceed();<br>        <span class="hljs-comment">//执行时长(毫秒)</span><br>        <span class="hljs-keyword">long</span> time = System.currentTimeMillis() - beginTime;<br>        <span class="hljs-comment">//保存日志</span><br>        recordLog(point, time);<br>        <span class="hljs-keyword">return</span> result;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">recordLog</span><span class="hljs-params">(ProceedingJoinPoint joinPoint, <span class="hljs-keyword">long</span> time)</span> </span>&#123;<br>        MethodSignature signature = (MethodSignature) joinPoint.getSignature();<br>        Method method = signature.getMethod();<br>        LogAnnotation logAnnotation = method.getAnnotation(LogAnnotation.class);<br>        log.info(<span class="hljs-string">&quot;=====================log start================================&quot;</span>);<br>        log.info(<span class="hljs-string">&quot;module:&#123;&#125;&quot;</span>,logAnnotation.<span class="hljs-keyword">module</span>());<br>        log.info(<span class="hljs-string">&quot;operation:&#123;&#125;&quot;</span>,logAnnotation.operation());<br><br>        <span class="hljs-comment">//请求的方法名</span><br>        String className = joinPoint.getTarget().getClass().getName();<br>        String methodName = signature.getName();<br>        log.info(<span class="hljs-string">&quot;request method:&#123;&#125;&quot;</span>,className + <span class="hljs-string">&quot;.&quot;</span> + methodName + <span class="hljs-string">&quot;()&quot;</span>);<br><br>        <span class="hljs-comment">//请求的参数</span><br>        Object[] args = joinPoint.getArgs();<br>        String params = JSON.toJSONString(args[<span class="hljs-number">0</span>]);<br>        log.info(<span class="hljs-string">&quot;params:&#123;&#125;&quot;</span>,params);<br><br>        <span class="hljs-comment">//获取request 设置IP地址</span><br>        HttpServletRequest request = HttpContextUtils.getHttpServletRequest();<br>        log.info(<span class="hljs-string">&quot;ip:&#123;&#125;&quot;</span>, IpUtils.getIpAddr(request));<br><br>        log.info(<span class="hljs-string">&quot;excute time : &#123;&#125; ms&quot;</span>,time);<br>        log.info(<span class="hljs-string">&quot;=====================log end==================================&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>然后发现，会报数组越界错误，原来是因为args可能为空，所以改成这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">String params = args.length == <span class="hljs-number">0</span> ? <span class="hljs-string">&quot;Empty&quot;</span> : JSON.toJSONString(args[<span class="hljs-number">0</span>]);<br></code></pre></td></tr></table></figure><p>然后，在需要输出日志的方法之上，加入注解即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiOperation(&quot;获取店铺列表&quot;)</span><br><span class="hljs-meta">@GetMapping(&quot;all&quot;)</span><br><span class="hljs-meta">@LogAnnotation(module = &quot;店铺&quot;, operator = &quot;获取店铺列表&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">getAllShops</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> shopService.getAllShops();<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>统一缓存处理（优化）</strong></p><p>众所周知，内存的访问速度远远大于硬盘</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ices.waimai.common.cache;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.*;<br><br><span class="hljs-meta">@Target(&#123;ElementType.METHOD&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Cache &#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-title">expire</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> 1 * 60 * 1000</span>; <span class="hljs-comment">// 过期时间</span><br><br>    <span class="hljs-function">String <span class="hljs-title">name</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> &quot;&quot;</span>; <span class="hljs-comment">// 缓存标识</span><br><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ices.waimai.common.cache;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.ices.waimai.vo.Result;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.apache.commons.codec.digest.DigestUtils;<br><span class="hljs-keyword">import</span> org.apache.commons.lang3.StringUtils;<br><span class="hljs-keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.Signature;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Around;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Aspect;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Pointcut;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.time.Duration;<br><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CacheAspect</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate&lt;String, String&gt; redisTemplate;<br><br>    <span class="hljs-meta">@Pointcut(&quot;@annotation(com.ices.waimai.common.cache.Cache)&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pt</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Around(&quot;pt()&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">around</span><span class="hljs-params">(ProceedingJoinPoint pjp)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Signature signature = pjp.getSignature();<br>            <span class="hljs-comment">//类名</span><br>            String className = pjp.getTarget().getClass().getSimpleName();<br>            <span class="hljs-comment">//调用的方法名</span><br>            String methodName = signature.getName();<br><br><br>            Class[] parameterTypes = <span class="hljs-keyword">new</span> Class[pjp.getArgs().length];<br>            Object[] args = pjp.getArgs();<br>            <span class="hljs-comment">//参数</span><br>            String params = <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;<br>                <span class="hljs-keyword">if</span> (args[i] != <span class="hljs-keyword">null</span>) &#123;<br>                    params += JSON.toJSONString(args[i]);<br>                    parameterTypes[i] = args[i].getClass();<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    parameterTypes[i] = <span class="hljs-keyword">null</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (StringUtils.isNotEmpty(params)) &#123;<br>                <span class="hljs-comment">//加密 以防出现key过长以及字符转义获取不到的情况</span><br>                params = DigestUtils.md5Hex(params);<br>            &#125;<br>            Method method = pjp.getSignature().getDeclaringType().getMethod(methodName, parameterTypes);<br>            <span class="hljs-comment">//获取Cache注解</span><br>            Cache annotation = method.getAnnotation(Cache.class);<br>            <span class="hljs-comment">//缓存过期时间</span><br>            <span class="hljs-keyword">long</span> expire = annotation.expire();<br>            <span class="hljs-comment">//缓存名称</span><br>            String name = annotation.name();<br>            <span class="hljs-comment">//先从redis获取</span><br>            String redisKey = name + <span class="hljs-string">&quot;::&quot;</span> + className + <span class="hljs-string">&quot;::&quot;</span> + methodName + <span class="hljs-string">&quot;::&quot;</span> + params;<br>            String redisValue = redisTemplate.opsForValue().get(redisKey);<br>            <span class="hljs-keyword">if</span> (StringUtils.isNotEmpty(redisValue)) &#123;<br>                log.info(<span class="hljs-string">&quot;方法走了缓存, &#123;&#125;, &#123;&#125;&quot;</span>, className, methodName);<br>                <span class="hljs-keyword">return</span> JSON.parseObject(redisValue, Result.class);<br>            &#125;<br>            Object proceed = pjp.proceed();<br>            redisTemplate.opsForValue().set(redisKey, JSON.toJSONString(proceed), Duration.ofMillis(expire));<br>            log.info(<span class="hljs-string">&quot;方法存入缓存, &#123;&#125;, &#123;&#125;&quot;</span>, className, methodName);<br>            <span class="hljs-keyword">return</span> proceed;<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable throwable) &#123;<br>            throwable.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> Result.fail(-<span class="hljs-number">999</span>, <span class="hljs-string">&quot;系统错误&quot;</span>);<br>    &#125;<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiOperation(&quot;获取店铺列表&quot;)</span><br><span class="hljs-meta">@GetMapping(&quot;all&quot;)</span><br><span class="hljs-meta">@LogAnnotation(module = &quot;店铺&quot;, operation = &quot;获取店铺列表&quot;)</span><br><span class="hljs-meta">@Cache(expire = 5 * 60 * 1000, name = &quot;all_shop&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">getAllShops</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> shopService.getAllShops();<br>&#125;<br></code></pre></td></tr></table></figure><p>多刷新几次，试一试，除了第一次之外，其他时候确实快~</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/Other/image.3joewwmrk8s0.png" alt="image"></p><h1 id="单开一个地方记一些坑"><a href="#单开一个地方记一些坑" class="headerlink" title="单开一个地方记一些坑"></a>单开一个地方记一些坑</h1><p>MyBatisX生成模板时，默认把Time对应成java.utils的Date，但是其实应该是java.sql的Time，不然会无法转换而报错（很重要哦！别忘了设计完shop表后重新生成时改回Time）</p><h1 id="再单开一个地方记工具类吧"><a href="#再单开一个地方记工具类吧" class="headerlink" title="再单开一个地方记工具类吧"></a>再单开一个地方记工具类吧</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ices.waimai.utils;<br><br><span class="hljs-keyword">import</span> org.springframework.web.context.request.RequestContextHolder;<br><span class="hljs-keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HttpContextUtils</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HttpServletRequest <span class="hljs-title">getHttpServletRequest</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ices.waimai.utils;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.apache.commons.lang3.StringUtils;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IpUtils</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取IP地址</span><br><span class="hljs-comment">     * 使用Nginx等反向代理软件， 则不能通过request.getRemoteAddr()获取IP地址</span><br><span class="hljs-comment">     * 如果使用了多级反向代理的话，X-Forwarded-For的值并不止一个，而是一串IP地址，X-Forwarded-For中第一个非unknown的有效IP字符串，则为真实IP地址</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getIpAddr</span><span class="hljs-params">(HttpServletRequest request)</span> </span>&#123;<br>        String ip = <span class="hljs-keyword">null</span>, unknown = <span class="hljs-string">&quot;unknown&quot;</span>, separator = <span class="hljs-string">&quot;,&quot;</span>;<br>        <span class="hljs-keyword">int</span> maxLength = <span class="hljs-number">15</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            ip = request.getHeader(<span class="hljs-string">&quot;x-forwarded-for&quot;</span>);<br>            <span class="hljs-keyword">if</span> (StringUtils.isEmpty(ip) || unknown.equalsIgnoreCase(ip)) &#123;<br>                ip = request.getHeader(<span class="hljs-string">&quot;Proxy-Client-IP&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (StringUtils.isEmpty(ip) || ip.length() == <span class="hljs-number">0</span> || unknown.equalsIgnoreCase(ip)) &#123;<br>                ip = request.getHeader(<span class="hljs-string">&quot;WL-Proxy-Client-IP&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (StringUtils.isEmpty(ip) || unknown.equalsIgnoreCase(ip)) &#123;<br>                ip = request.getHeader(<span class="hljs-string">&quot;HTTP_CLIENT_IP&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (StringUtils.isEmpty(ip) || unknown.equalsIgnoreCase(ip)) &#123;<br>                ip = request.getHeader(<span class="hljs-string">&quot;HTTP_X_FORWARDED_FOR&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (StringUtils.isEmpty(ip) || unknown.equalsIgnoreCase(ip)) &#123;<br>                ip = request.getRemoteAddr();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            log.error(<span class="hljs-string">&quot;IpUtils ERROR &quot;</span>, e);<br>        &#125;<br><br>        <span class="hljs-comment">// 使用代理，则获取第一个IP地址</span><br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(ip) &amp;&amp; ip.length() &gt; maxLength) &#123;<br>            <span class="hljs-keyword">int</span> idx = ip.indexOf(separator);<br>            <span class="hljs-keyword">if</span> (idx &gt; <span class="hljs-number">0</span>) &#123;<br>                ip = ip.substring(<span class="hljs-number">0</span>, idx);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> ip;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getIpAddr</span><span class="hljs-params">()</span> </span>&#123;<br>        HttpServletRequest request = HttpContextUtils.getHttpServletRequest();<br>        <span class="hljs-keyword">return</span> getIpAddr(request);<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot学习笔记1</title>
    <link href="/2021/10/05/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/"/>
    <url>/2021/10/05/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>总算是学完了SSM（假装学完了（逃））</p><p>什么是SpringBoot呢？</p><p><strong>SpringBoot并不是对Spring功能上的增强，而是提供了一种快速使用Spring的方式</strong></p><p>好的，前言结束，开始学习</p><p><strong>冲冲冲！！！！！！</strong></p><p>另外，由于感觉日后还是英语用的多，所以切回英语版IDEA啦</p><h1 id="基础入门"><a href="#基础入门" class="headerlink" title="基础入门"></a>基础入门</h1><h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>SSM阶段，我们可能这么写一个浏览器打印Hello的程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">handle01</span> <span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello, Spring Boot!&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在，用一个SpringBoot新的注解<code>@RestController</code>就够了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">handle01</span> <span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello, Spring Boot!&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后，main方法也很简单，也不用配置tomcat，springboot全都帮我们做了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.aster.boot;<br><br><span class="hljs-keyword">import</span> ...<br><br><span class="hljs-meta">@SpringBootApplication</span> <span class="hljs-comment">// 告诉Spring这是一个SpringBoot应用</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainApplication</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(MainApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>这期间还有个小插曲……我把spring-boot-starter-parent写道dependencies里去了，还以为是maven的问题捣鼓了半天……</p><p>不过就当顺便再学了学maven了吧，现在是终于换成了自己的maven和阿里镜像</p></blockquote><p>不用打包成war包，直接运行main方法后，访问本地8080：</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/SpringBoot1/image.3pnnmx8elt60.png" alt="image"></p><p><strong>比起SSM真是太简单啦！</strong></p><h3 id="修改配置（简化配置）"><a href="#修改配置（简化配置）" class="headerlink" title="修改配置（简化配置）"></a>修改配置（简化配置）</h3><p>在springboot中，如果想修改配置，可以在resources的application.properties中修改</p><p>详见<strong>官方文档</strong> <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/">Spring Boot Reference Documentation</a>，左侧有Application Properties</p><h3 id="打包为jar包（简化部署）"><a href="#打包为jar包（简化部署）" class="headerlink" title="打包为jar包（简化部署）"></a>打包为jar包（简化部署）</h3><p>如果不加版本会报错，神秘</p><p>（据说导入之后可以再删掉版本号，懒得试）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/SpringBoot1/image.dwb7y55pedc.png" alt="image"></p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/SpringBoot1/image.9tw8ug5wc74.png" alt="image"></p><h2 id="自动配置"><a href="#自动配置" class="headerlink" title="自动配置"></a>自动配置</h2><h3 id="SpringBoot的特点"><a href="#SpringBoot的特点" class="headerlink" title="SpringBoot的特点"></a>SpringBoot的特点</h3><h4 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h4><p>依靠父项目实现依赖管理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br>他的父项目<br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br>几乎声明了所有开发中常用的依赖的版本号,自动版本仲裁机制<br></code></pre></td></tr></table></figure><p>拥有starter场景启动器</p><ol><li>spring-boot-starter-*， *意味着某种场景</li><li>只要引入starter，这个场景的所有常规需要的依赖我们都自动引入</li><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter">SpringBoot所有支持的场景</a></li><li>*-spring-boot-starter： 第三方为我们提供的简化开发的场景启动器。</li><li>所有场景启动器最底层的依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><p>无需关注版本号，自动版本仲裁<br>引入依赖默认都可以不写版本，引入非版本仲裁的jar，要写版本号</p><p>spring-boot-dependencies里面规定了当前依赖的版本<br>可以修改默认版本号</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mysql.version</span>&gt;</span>5.1.43<span class="hljs-tag">&lt;/<span class="hljs-name">mysql.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="自动配置-1"><a href="#自动配置-1" class="headerlink" title="自动配置"></a>自动配置</h4><ul><li><p>自动配好Tomcat</p><ul><li>引入Tomcat依赖。</li><li>配置Tomcat</li></ul></li><li><p>自动配好SpringMVC</p><ul><li>引入SpringMVC全套组件</li><li>自动配好SpringMVC常用组件（功能）</li></ul></li><li><p>自动配好Web常见功能，如：字符编码问题</p><ul><li>SpringBoot帮我们配置好了所有web开发的常见场景</li></ul></li><li><p>默认的包结构</p><ul><li>主程序（<strong>main</strong>）<strong>所在包</strong>及其下面的<strong>所有子包</strong>里面的组件都会被默认扫描进来</li><li>无需以前的包扫描配置</li><li>想要改变扫描路径，<code>@SpringBootApplication(scanBasePackages=&quot;com.aster&quot;)</code>或者<code>@ComponentScan</code>指定扫描路径</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br>等同于<br><span class="hljs-meta">@SpringBootConfiguration</span><br><span class="hljs-meta">@EnableAutoConfiguration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.aster.boot&quot;)</span><br></code></pre></td></tr></table></figure></li><li><p>各种配置拥有默认值</p><ul><li>默认配置最终都是映射到某个类上</li><li> 配置文件的值最终会绑定到某个类上，这个类会在容器中创建对象</li></ul></li><li><p>按需加载所有自动配置项</p><ul><li>非常多的starter</li><li>引入了哪个场景，这个场景的自动配置才会开启</li><li>SpringBoot所有的自动配置功能都在 spring-boot-autoconfigure 包里面</li></ul></li></ul><h3 id="容器功能"><a href="#容器功能" class="headerlink" title="容器功能"></a>容器功能</h3><p>（原SSM的那些注解，<code>@Component @Controller @Service @Repository</code>之类的，都是可以用的）</p><h4 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h4><p>下面的代码SSM都学过了，看看吧：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span> <span class="hljs-comment">// 告诉SB这是个配置类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyConfiguration</span> </span>&#123;<br><br>    <span class="hljs-meta">@Bean</span> <span class="hljs-comment">// 给容器中添加组件，以方法名作为组件的id，返回类型就是组件类型，返回的值就是组件在容器中的实例</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">user01</span> <span class="hljs-params">()</span> </span>&#123; <span class="hljs-comment">// User显然提前写好了那一堆东西</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;Aster&quot;</span>, <span class="hljs-number">16</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean(&quot;user02&quot;)</span> <span class="hljs-comment">// SSM里也学过这种，那么这个组件就叫user02了</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">user010</span> <span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;Aster&quot;</span>, <span class="hljs-number">16</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>ps 配置类也是一个组件</p><p>注意，组件默认是<strong>单实例的</strong>，即用不同变量获取组件后，指向同一个实例（见A）</p><p>就算直接去调用被注册为组件的方法，也是<strong>单实例的</strong>（见B），例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainApplication</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 取得IOC容器</span><br>        ConfigurableApplicationContext run = SpringApplication.run(MainApplication.class, args);<br><br>        <span class="hljs-comment">// A</span><br>        User user01 = (User) run.getBean(<span class="hljs-string">&quot;user01&quot;</span>);<br>        User user02 = (User) run.getBean(<span class="hljs-string">&quot;user01&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;指向同一个实例？&quot;</span> + (user01 == user02));<br><br>        <span class="hljs-comment">// B</span><br>        MyConfiguration myConfiguration = run.getBean(MyConfiguration.class);<br>        User user03 = myConfiguration.user01();<br>        User user04 = myConfiguration.user01();<br>        System.out.println(<span class="hljs-string">&quot;指向同一个实例？&quot;</span> + (user03 == user04));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">指向同一个实例？<span class="hljs-literal">true</span><br>指向同一个实例？<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>那么，想要多实例怎么办呢？需要修改<code>@Configuration</code>里的<strong>proxyBeanMethods</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br></code></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">指向同一个实例？<span class="hljs-literal">true</span><br>指向同一个实例？<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>（当然了，第一个肯定还是true，因为那是位于IOC容器里的，自然是单实例）</p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><ul><li><p>如果<code>@Configuration(proxyBeanMethods = true)</code>（默认就是true），那么当外界访问<strong>配置类中的被注册为组件的方法</strong>的时候，springboot会从<strong>容器中</strong>找组件，自然容器中的组件是单实例</p></li><li><p>如果<code>@Configuration(proxyBeanMethods = false)</code>（默认就是true），那么当外界访问<strong>配置类中的被注册为组件的方法</strong>的时候，springboot就懒得管了，外界每次调用方法的时候，都会产生一个<strong>新的代理对象</strong></p></li></ul><p>以上两种，分别称为<strong>全模式Full Mode</strong>和<strong>轻量级模式Lite Mode</strong></p><p><strong>如果只是单单往容器中注册组件，一般用Lite，好处就是快</strong></p><p><strong>如果组件之间有依赖，一般用Full</strong>（不然组件所依赖的组件就不是容器里的了）</p><h4 id="Import"><a href="#Import" class="headerlink" title="@Import"></a>@Import</h4><p><code>@Import</code>注解写在某个组件类上，用于导入组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Import(&#123;User.class&#125;)</span><br></code></pre></td></tr></table></figure><p>上面这句话的作用就是<strong>在容器中声明User类型的组件</strong>，被导入的组件名默认为其全类名</p><h4 id="Conditional"><a href="#Conditional" class="headerlink" title="@Conditional"></a>@Conditional</h4><p>条件装配，满足Conditional指定的条件后才进行组件注入</p><p>其下有许多次级注解（按Ctrl+Shift+Alt+N打开这个界面）</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/SSM2/image.71lp3c0lbds0.png" alt="image"></p><p>用法不言而喻咯</p><h4 id="ImportResource"><a href="#ImportResource" class="headerlink" title="@ImportResource"></a>@ImportResource</h4><p>如果有时候迫不得已要导入xml的配置，就用这个</p><p>和Import一样，写在配置类上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ImportResource(&quot;applicationContext.xml&quot;)</span><br></code></pre></td></tr></table></figure><h4 id="配置绑定"><a href="#配置绑定" class="headerlink" title="配置绑定"></a>配置绑定</h4><p>当然可以手动编写Java程序，读取properties文件中的内容，并将其封装到一个JavaBean中以便随时使用</p><p>springboot可以实现这个功能</p><p>假如我们有一个Car类，里面有品牌和价钱，在application.properties里，我们有如下设定想导入到Car里以便给Car设定默认值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pro">mycar.brand&#x3D;BMW<br>mycar.price&#x3D;500000<br></code></pre></td></tr></table></figure><p>注意那个<code>@Component</code>注释！因为只有<strong>在容器中</strong>的组件，才能使用springboot的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;mycar&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String brand;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> price;<br>    ...<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span> <span class="hljs-comment">// 由于把Car声明在容器里了，所以直接自动注入</span><br>    <span class="hljs-keyword">public</span> Car car;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/car&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Car <span class="hljs-title">car</span> <span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> car;<br>    &#125;<br>    ...<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/SSM2/image.2iejoo5v6vw0.png" alt="image"></p><p>还有一种方法，是在配置类上声明<code>@EnableConfigurationProperties(Car.class)</code>，这样就不用在Car前标注<code>@Component</code>了，也会自动把Car注入容器中</p><p>源码分析暂略，见<a href="https://www.bilibili.com/video/BV19K4y1L7MT?p=13">这儿</a></p><h3 id="总结：SpringBoot简易开发起步"><a href="#总结：SpringBoot简易开发起步" class="headerlink" title="总结：SpringBoot简易开发起步"></a>总结：SpringBoot简易开发起步</h3><ul><li>引入场景依赖，可参考<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter">官方文档</a></li><li>查看自动配置了哪些（选做）<ul><li>自己分析，引入场景对应的自动配置一般都生效了</li><li>配置文件中debug=true开启自动配置报告。Negative（不生效）\Positive（生效）</li></ul></li><li>是否需要做出自己的修改<ul><li>参照<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html#common-application-properties">官方文档</a>修改配置项</li><li>自己分析properties文件绑定了配置文件里的哪些东西</li><li>自定义加入或者替换组件<ul><li><code>@Bean、@Component...</code></li></ul></li><li>自定义器  XXXXXCustomizer；</li><li>……</li></ul></li></ul><h3 id="开发小技巧"><a href="#开发小技巧" class="headerlink" title="开发小技巧"></a>开发小技巧</h3><h4 id="Lombok"><a href="#Lombok" class="headerlink" title="Lombok"></a>Lombok</h4><p>Lombok可以简化JavaBean的开发</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>还需要在IDEA中安装对应的插件，不过热心的新版IDEA已经集成好了</p><p>那么，原本很长的Car类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;mycar&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String brand;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> price;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Car&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;brand=&#x27;&quot;</span> + brand + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, price=&quot;</span> + price +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getBrand</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> brand;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBrand</span><span class="hljs-params">(String brand)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.brand = brand;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getPrice</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> price;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPrice</span><span class="hljs-params">(<span class="hljs-keyword">int</span> price)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.price = price;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>只需要写成这样即可，编译时自动加上toString和g/setter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;mycar&quot;)</span><br><span class="hljs-meta">@Data</span> <span class="hljs-comment">// &lt;----</span><br><span class="hljs-meta">@ToString</span> <span class="hljs-comment">// &lt;----</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span> </span>&#123;<br>    <br>    <span class="hljs-keyword">private</span> String brand;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> price;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>另外，有参无参构造器是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AllArgsConstractor</span><br><span class="hljs-meta">@NoArgsConstractor</span><br></code></pre></td></tr></table></figure><p>另外还有:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EqualsAndHashCode</span><br></code></pre></td></tr></table></figure><p>最后，还有日志功能<code>@Slf4j</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span> <span class="hljs-comment">// &lt;----</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span> <br>    <span class="hljs-keyword">public</span> Car car;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/car&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Car <span class="hljs-title">car</span> <span class="hljs-params">()</span> </span>&#123;<br>        log.info(<span class="hljs-string">&quot;请求进来咯~&quot;</span>); <span class="hljs-comment">// &lt;----</span><br>        <span class="hljs-keyword">return</span> car;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/SpringBoot1/image.688l5cx4jgw0.png" alt="image"></p><h4 id="Dev-tools"><a href="#Dev-tools" class="headerlink" title="Dev-tools"></a>Dev-tools</h4><p>可以使得对代码做出更改后，不用麻烦地手动重启项目</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>每次修改代码之后，Ctrl + F9重新编译一下项目，dev-tools就会自动重新重启项目</p><h4 id="Spring-Initializr"><a href="#Spring-Initializr" class="headerlink" title="Spring Initializr"></a>Spring Initializr</h4><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/SpringBoot1/image.6orwfhkdq5c0.png" alt="image"></p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/SpringBoot1/image.8klojqhum58.png" alt="image"></p><p>之后，不用像之前说的那样，去官方文档找场景，Initializr会提供很多场景供我们引入，在创建的时候</p><p>会创建好项目结构、依赖和配置文件、主程序类</p><h1 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h1><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="yaml-yml-yaml"><a href="#yaml-yml-yaml" class="headerlink" title="yaml(.yml/.yaml)"></a>yaml(.yml/.yaml)</h3><blockquote><p>YAML 是 “YAML Ain’t Markup Language”（YAML 不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实是：”Yet Another Markup Language”（仍是一种标记语言）。 </p><p>非常适合用来做以数据为中心的配置文件</p></blockquote><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><ul><li><p><code>key: value</code>，kv之间有空格</p></li><li><p>大小写敏感</p></li><li><p>使用缩进表示层级关系</p></li><li><p>缩进不允许使用tab，只允许空格（不过IDEA会自动加空格啦）</p></li><li><p>缩进的空格数不重要，只要相同层级的元素左对齐即可</p></li><li><p>‘#’表示注释</p></li><li><p>字符串无需加引号，如果要加，’’与””表示字符串内容 会被 转义/不转义</p></li></ul><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>字面量：单个的、不可再分的值。date、boolean、string、number、null</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">k:</span> <span class="hljs-string">v</span><br></code></pre></td></tr></table></figure><p>对象：键值对的集合。map、hash、set、object </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">行内写法：</span>  <span class="hljs-attr">k:</span> &#123;<span class="hljs-string">k1:v1</span>,<span class="hljs-string">k2:v2</span>,<span class="hljs-string">k3:v3</span>&#125;<br><span class="hljs-comment">#或</span><br><span class="hljs-attr">k:</span> <br>  <span class="hljs-attr">k1:</span> <span class="hljs-string">v1</span><br>  <span class="hljs-attr">k2:</span> <span class="hljs-string">v2</span><br>  <span class="hljs-attr">k3:</span> <span class="hljs-string">v3</span><br></code></pre></td></tr></table></figure><p>数组：一组按次序排列的值。array、list、queue</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">行内写法：</span>  <span class="hljs-attr">k:</span> [<span class="hljs-string">v1</span>,<span class="hljs-string">v2</span>,<span class="hljs-string">v3</span>]<br><span class="hljs-comment">#或者</span><br><span class="hljs-attr">k:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">v1</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">v2</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">v3</span><br></code></pre></td></tr></table></figure><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>  <span class="hljs-keyword">private</span> String userName;<br>  <span class="hljs-keyword">private</span> Boolean boss;<br>  <span class="hljs-keyword">private</span> Date birth;<br>  <span class="hljs-keyword">private</span> Integer age;<br>  <span class="hljs-keyword">private</span> Pet pet;<br>  <span class="hljs-keyword">private</span> String[] interests;<br>  <span class="hljs-keyword">private</span> List&lt;String&gt; animal;<br>  <span class="hljs-keyword">private</span> Map&lt;String, Object&gt; score;<br>  <span class="hljs-keyword">private</span> Set&lt;Double&gt; salarys;<br>  <span class="hljs-keyword">private</span> Map&lt;String, List&lt;Pet&gt;&gt; allPets;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">@ ...<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pet</span> </span>&#123;<br>  <span class="hljs-keyword">private</span> String name;<br>  <span class="hljs-keyword">private</span> Double weight;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># yaml表示以上对象</span><br><span class="hljs-attr">person:</span><br>  <span class="hljs-attr">userName:</span> <span class="hljs-string">zhangsan</span><br>  <span class="hljs-attr">boss:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">birth:</span> <span class="hljs-number">2019</span><span class="hljs-string">/12/12</span> <span class="hljs-number">20</span><span class="hljs-string">:12:33</span><br>  <span class="hljs-attr">age:</span> <span class="hljs-number">18</span><br>  <span class="hljs-attr">pet:</span> <br>    <span class="hljs-attr">name:</span> <span class="hljs-string">tomcat</span><br>    <span class="hljs-attr">weight:</span> <span class="hljs-number">23.4</span><br>  <span class="hljs-attr">interests:</span> [<span class="hljs-string">篮球</span>,<span class="hljs-string">游泳</span>]<br>  <span class="hljs-attr">animal:</span> <br>    <span class="hljs-bullet">-</span> <span class="hljs-string">jerry</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">mario</span><br>  <span class="hljs-attr">score:</span><br>    <span class="hljs-attr">english:</span> <br>      <span class="hljs-attr">first:</span> <span class="hljs-number">30</span><br>      <span class="hljs-attr">second:</span> <span class="hljs-number">40</span><br>      <span class="hljs-attr">third:</span> <span class="hljs-number">50</span><br>    <span class="hljs-attr">math:</span> [<span class="hljs-number">131</span>,<span class="hljs-number">140</span>,<span class="hljs-number">148</span>]<br>    <span class="hljs-attr">chinese:</span> &#123;<span class="hljs-attr">first:</span> <span class="hljs-number">128</span>,<span class="hljs-attr">second:</span> <span class="hljs-number">136</span>&#125;<br>  <span class="hljs-attr">salarys:</span> [<span class="hljs-number">3999</span>,<span class="hljs-number">4999.98</span>,<span class="hljs-number">5999.99</span>]<br>  <span class="hljs-attr">allPets:</span><br>    <span class="hljs-attr">sick:</span><br>      <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">name:</span> <span class="hljs-string">tom</span>&#125;<br>      <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">name:</span> <span class="hljs-string">jerry</span>,<span class="hljs-attr">weight:</span> <span class="hljs-number">47</span>&#125;<br>    <span class="hljs-attr">health:</span> [&#123;<span class="hljs-attr">name:</span> <span class="hljs-string">mario</span>,<span class="hljs-attr">weight:</span> <span class="hljs-number">47</span>&#125;]<br></code></pre></td></tr></table></figure><h3 id="自定义类绑定的配置提示"><a href="#自定义类绑定的配置提示" class="headerlink" title="自定义类绑定的配置提示"></a>自定义类绑定的配置提示</h3><p>编写yml的时候，IDEA并不会帮我们提示出完整的属性名</p><p>那么就需要我们自己配置一下让它能提示</p><p><strong>（Initializr可以在创建时直接导入这个，包括Lombok那些）</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>另外，由于这个配置处理器只是为了开发方便，和业务无关，spring建议我们在打包的时候排除这个处理器：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span> <span class="hljs-comment">&lt;!-- !!!!!! --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">excludes</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>据说在2.5.3之后会自动排除了，不用写</p><h2 id="Web开发"><a href="#Web开发" class="headerlink" title="Web开发"></a>Web开发</h2><h3 id="静态资源访问"><a href="#静态资源访问" class="headerlink" title="静态资源访问"></a>静态资源访问</h3><p>只要把静态资源放在类路径（resources）下的指定文件夹里，springboot就可以访问到：</p><p> <code>/static</code> or <code>/public</code> or <code>/resources</code> or <code>/META-INF/resources</code></p><p>访问时，不用加所在的文件夹名，直接用项目根路径 <code>/</code> + 静态资源名：</p><p><code>http://localhost:8080/aster.png</code></p><p><strong>原理：</strong>请求进来后，先去找Controller看能不能处理。不能处理的所有请求再交给静态资源处理器。静态资源也找不到则响应404页面；比如说，如果有一个神奇的Controller的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/aster.png&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showAvatar</span> <span class="hljs-params">()</span> </span>&#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>然后在静态资源目录里还有个<code>aster.png</code>，那么当访问<code>/aster.png</code>的时候，会调用<code>showAvatar()</code>反法，而不是访问了静态资源</p><p>但是呢，springboot自带的这种<strong>默认无前缀</strong>的直接访问的方式不是很常用，因为实际开发中要配置<strong>拦截器</strong>，如果访问静态资源的访问地址不带前缀的话，不方便拦截，因此我们需要</p><h4 id="设置静态资源访问前缀"><a href="#设置静态资源访问前缀" class="headerlink" title="设置静态资源访问前缀"></a>设置静态资源访问前缀</h4><p>application.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">mvc:</span><br>    <span class="hljs-attr">static-path-pattern:</span> <span class="hljs-string">/res/**</span><br></code></pre></td></tr></table></figure><p>（这么输入能补全：spring.mvc.sta … ）</p><p>这样一来，访问静态资源的时候，都要加上前缀<code>/res</code></p><h4 id="更改默认静态资源路径"><a href="#更改默认静态资源路径" class="headerlink" title="更改默认静态资源路径"></a>更改默认静态资源路径</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">mvc:</span><br>    <span class="hljs-attr">static-path-pattern:</span> <span class="hljs-string">/res/**</span><br><br>  <span class="hljs-attr">resources:</span><br>    <span class="hljs-attr">static-locations:</span> [<span class="hljs-string">classpath:/ast/</span>, <span class="hljs-string">classpath:/lts/</span>]<br></code></pre></td></tr></table></figure><p>这样一来，只有在resources\ast和resources\lst里的静态资源才能被访问</p><h4 id="自定义欢迎页和Favicon"><a href="#自定义欢迎页和Favicon" class="headerlink" title="自定义欢迎页和Favicon"></a>自定义欢迎页和Favicon</h4><p>有两种方式自定义欢迎页让springboot自动打开：（但是如果配置了静态资源前缀，貌似会失效）</p><ol><li>写一个index.html放在静态资源目录下</li><li>配置一个处理<code>/index</code>请求的方法</li></ol><p>favicon即网页图标，命名为favicon.ico后放在静态资源目录下即可</p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">resources:</span><br><span class="hljs-attr">add-mapping:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 禁用所有静态资源规则</span><br>  <span class="hljs-attr">cache:</span><br><span class="hljs-attr">preriod:</span> <span class="hljs-number">1600</span> <span class="hljs-comment"># 设置静态资源缓存1600秒，浏览器1600秒内再访问的时候，不再请求，直接读缓存</span><br></code></pre></td></tr></table></figure><h3 id="请求参数处理"><a href="#请求参数处理" class="headerlink" title="请求参数处理"></a>请求参数处理</h3><h4 id="请求映射"><a href="#请求映射" class="headerlink" title="请求映射"></a>请求映射</h4><p><strong>Rest风格</strong>：使用HTTP请求方式动词（GET DELETE PUT POST）来表示对资源的操作</p><p>核心Filter：<strong>HiddenHttpMethodFilter</strong></p><p>为什么是核心Fiilter呢？比如这个控制器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.aster.boot.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyController</span> </span>&#123;<br><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/user&quot;, method = RequestMethod.GET)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUser</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;GET-张三&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/user&quot;, method = RequestMethod.POST)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">saveUser</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;POST-张三&quot;</span>;<br>    &#125;<br><br><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/user&quot;, method = RequestMethod.PUT)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">putUser</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;PUT-张三&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/user&quot;, method = RequestMethod.DELETE)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">deleteUser</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;DELETE-张三&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后有这样一个测试界面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html">...<br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/user&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;REST-GET提交&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/user&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;REST-POST提交&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/user&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;delete&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;REST-DELETE提交&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/user&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;put&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;REST-PUT提交&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br>...<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/SpringBoot1/image.4kimj7sf3ze0.png" alt="image" style="zoom:80%;" /><p>但是，试一试会发现，这种写法有问题，delete和put不支持，会通通被视为get</p><p>这时候就需要用到HiddenHttpMethodFilter提供的<strong>隐藏方法（_method）</strong>，不过这个功能默认是关的，我们需要手动打开：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">mvc:</span><br>    <span class="hljs-attr">hiddenmethod:</span><br>      <span class="hljs-attr">filter:</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>注意：使用_method时，method应为post；delete put大小写无所谓</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/user&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 一般设置为hidden来隐藏 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;_method&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;DELETE&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;REST-DELETE提交&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/user&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;_method&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;PUT&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;REST-PUT提交&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>此外，还支持PATCH请求</p><p>因为表单form只能写get/post所以这样操作，如果是使用<strong>客户端</strong>的话，本身就可以发各种请求，无需Filter了</p><p>因为一般是<strong>前后端分离</strong>，所以spring默认这个是false，让我们来选择性开启</p><p>最后，还有一种简便写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/user&quot;)</span><br><span class="hljs-meta">@PostMapping(&quot;/user&quot;)</span><br><span class="hljs-meta">@PutMapping(&quot;/user&quot;)</span><br><span class="hljs-meta">@DeleteMapping(&quot;/user&quot;)</span><br></code></pre></td></tr></table></figure><p>(这个_method可以改名，见<a href="https://www.bilibili.com/video/BV19K4y1L7MT?p=28">P27</a>)</p><h4 id="请求映射的原理"><a href="#请求映射的原理" class="headerlink" title="请求映射的原理"></a>请求映射的原理</h4><blockquote><p>又一个小知识：Ctrl + F12可以打开一个类的结构概览，Ctrl + H可以打开一个类的继承树</p></blockquote><p><a href="https://www.bilibili.com/video/BV19K4y1L7MT?p=28">欸嘿</a></p><h3 id="普通参数与基本注解"><a href="#普通参数与基本注解" class="headerlink" title="普通参数与基本注解"></a>普通参数与基本注解</h3><h4 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h4><p>@PathVariable获取请求路径里的变量（即Rest风格的获取请求“参数”）</p><p>@RequestParam获取请求参数</p><p>@PathVariable和@RequestParam参数为空的时候，都是获取所有参数的值，存在map里</p><p>@RequestHeader获取请求头，当参数为空的时候是获取所有请求头存在map里</p><p>@CookieValue获取Cookie，当参数为空的时候是获取所有Cookie存在Cookie（有这个类型）里</p><p>获取到的返回值可以存到Spring里也可以存到Cookie里</p><p>@RequestBody获取请求体（POST请求才有请求体）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestController</span> </span>&#123;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/save&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map <span class="hljs-title">postMethod</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> String content)</span> </span>&#123;<br>        Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;Content&quot;</span>, content);<br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/save&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userName&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    邮箱：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/SpringBoot1/image.153c7ppwzf34.png" alt="image"></p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/SpringBoot1/image.zckc2wgxsy8.png" alt="image"></p><p>@RequestAttribute可以获取request域属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span> <span class="hljs-comment">// 因为是页面跳转所以就不RestController了</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RequestController</span> </span>&#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/goto&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">goToPage</span><span class="hljs-params">(HttpServletRequest request)</span></span>&#123;<br>        request.setAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;请求成功&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;forward://success&quot;</span>; <span class="hljs-comment">// 转发到success请求</span><br>    &#125;<br><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@GetMapping(&quot;/success&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map <span class="hljs-title">success</span><span class="hljs-params">(<span class="hljs-meta">@RequestAttribute(&quot;msg&quot;)</span> String msg, HttpServletRequest request)</span> </span>&#123;<br>        Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        String msg2 = (String) request.getAttribute(<span class="hljs-string">&quot;msg&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;通过RequestAttr获取的msg：&quot;</span>, msg);<br>        map.put(<span class="hljs-string">&quot;通过转发获取的msg：&quot;</span>, msg2);<br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/SpringBoot1/image.ocjj9z6z5gg.png" alt="image"></p><p><a href="https://www.bilibili.com/video/BV19K4y1L7MT?p=31">@MatrixVariable与UrlPathHelper暂略，欸嘿</a></p><h4 id="传入ServletAPI作为参数"><a href="#传入ServletAPI作为参数" class="headerlink" title="传入ServletAPI作为参数"></a>传入ServletAPI作为参数</h4><p>支持的API有：WebRequest、ServletRequest、MultipartRequest、 HttpSession、javax.servlet.http.PushBuilder、Principal、InputStream、Reader、HttpMethod、Locale、TimeZone、ZoneId</p><blockquote><p>通过分析ServletRequestMethodArgumentResolver源码得到的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">supportsParameter</span><span class="hljs-params">(MethodParameter parameter)</span> </span>&#123;<br>    Class&lt;?&gt; paramType = parameter.getParameterType();<br>    <span class="hljs-keyword">return</span> (WebRequest.class.isAssignableFrom(paramType) ||<br>            ServletRequest.class.isAssignableFrom(paramType) ||<br>            MultipartRequest.class.isAssignableFrom(paramType) ||<br>            HttpSession.class.isAssignableFrom(paramType) ||<br>            (pushBuilder != <span class="hljs-keyword">null</span> &amp;&amp; pushBuilder.isAssignableFrom(paramType)) ||<br>            Principal.class.isAssignableFrom(paramType) ||<br>            InputStream.class.isAssignableFrom(paramType) ||<br>            Reader.class.isAssignableFrom(paramType) ||<br>            HttpMethod.class == paramType ||<br>            Locale.class == paramType ||<br>            TimeZone.class == paramType ||<br>            ZoneId.class == paramType);<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h4 id="传入复杂参数"><a href="#传入复杂参数" class="headerlink" title="传入复杂参数"></a>传入复杂参数</h4><p><strong>Map</strong>、<strong>Model（map、model里面的数据会被放在request的请求域  request.setAttribute）、</strong>Errors/BindingResult、<strong>RedirectAttributes（ 重定向携带数据）</strong>、<strong>ServletResponse（response）</strong>、SessionStatus、UriComponentsBuilder、ServletUriComponentsBuilder</p><p>（因为目前只是快速学习所以源码分析省略一下咯）</p><h4 id="传入自定义对象参数"><a href="#传入自定义对象参数" class="headerlink" title="传入自定义对象参数"></a>传入自定义对象参数</h4><p>可以自动类型转换与格式化，可以级联封装（pet.name, pet.age）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *     姓名： &lt;input name=&quot;userName&quot;/&gt; &lt;br/&gt;</span><br><span class="hljs-comment"> *     年龄： &lt;input name=&quot;age&quot;/&gt; &lt;br/&gt;</span><br><span class="hljs-comment"> *     生日： &lt;input name=&quot;birth&quot;/&gt; &lt;br/&gt;</span><br><span class="hljs-comment"> *     宠物姓名：&lt;input name=&quot;pet.name&quot;/&gt;&lt;br/&gt;</span><br><span class="hljs-comment"> *     宠物年龄：&lt;input name=&quot;pet.age&quot;/&gt;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <br>    <span class="hljs-keyword">private</span> String userName;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> Date birth;<br>    <span class="hljs-keyword">private</span> Pet pet;<br>    <br>&#125;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pet</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String age;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>接下来是一大段源码分析，呜呜呜呜呜，真难啊（P35 36 37 跳跳跳）</p><h3 id="数据响应"><a href="#数据响应" class="headerlink" title="数据响应"></a>数据响应</h3><h4 id="响应JSON"><a href="#响应JSON" class="headerlink" title="响应JSON"></a>响应JSON</h4><p><del>我感觉我看这个课的大纲真的好乱啊……都不好分标题了</del></p><p>springboot返回json很简单，只需要：</p><ol><li>有starter-web自动导入依赖</li><li>在需要返回json的方法前加@ResponseBody</li><li>直接返回一个<strong>对象</strong>，会给前端自动转为json格式</li></ol><p>（原理<a href="https://www.bilibili.com/video/BV19K4y1L7MT?p=37">暂略（好几P都是）</a>）</p><h3 id="内容协商"><a href="#内容协商" class="headerlink" title="内容协商"></a>内容协商</h3><p>“根据客户端接受能力不同，返回不同类型的数据”</p><p>说人话就是，当直接返回一个对象的时候，spring会自动转换类型，比如给浏览器端返回json，给安卓端返回xml</p><p>当客户端发送请求时，<strong>请求头</strong>Headers里的<strong>Accept字段</strong>会告诉后端，客户端能接收什么类型的数据</p><p>比如，之前写微信小程序的时候（虽然现在也要写）wx.request里面那句<code>application/json</code>就是</p><p>不过，要支持xml转换，得导一下包：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>开发中为了方便，可以开启浏览器参数方式内容协商功能：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">contentnegotiation:</span><br>    <span class="hljs-attr">favor-parameter:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment">#开启请求参数内容协商模式</span><br></code></pre></td></tr></table></figure><p>之后，带上format=json这类的参数就行了</p><p>（还是一大段内容协商的源码，先跳了）</p><h4 id="自定义MessageConverter"><a href="#自定义MessageConverter" class="headerlink" title="自定义MessageConverter"></a>自定义MessageConverter</h4><p>由上面源码分析可以知道，自动内容协商和MessageConverter有关</p><p>复习一下SSM知识：<code>@ResponseBody</code>意味着方法不进行页面跳转，直接进行响应，响应时会调用返回值处理器里的MessageConverter进行处理</p><p><a href="https://www.bilibili.com/video/BV19K4y1L7MT?p=41">欸嘿</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决IDEA缺少jsp、Spring等相关提示的问题</title>
    <link href="/2021/10/03/%E8%A7%A3%E5%86%B3IDEA%E7%BC%BA%E5%B0%91jsp%E3%80%81Spring%E7%AD%89%E7%9B%B8%E5%85%B3%E6%8F%90%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2021/10/03/%E8%A7%A3%E5%86%B3IDEA%E7%BC%BA%E5%B0%91jsp%E3%80%81Spring%E7%AD%89%E7%9B%B8%E5%85%B3%E6%8F%90%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title="."></a>.</h1><p>比如要新建一个jsp，却发现右键webapp目录后没有jsp模板，或者干脆没有webapp目录</p><p>再比如新建Spring的xml却找不到模板</p><p>文件-项目结构-添加， 缺啥加啥</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/Other/image.65d2nqg93ao.png" alt="image"></p><p>比如没有webapp目录或者不叫webapp，就自己改一下，有时候还需要配置一下下面的另一个目录（图里挡住了）</p><p>之后就能在这里新建jsp了</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/Other/image.4hqs7bw9yp40.png" alt="image"></p><p>参考：<a href="https://blog.csdn.net/Quantum_Dog/article/details/88848624">(10条消息) 项目正常却报No Spring WebApplicationInitializer types detected on classpath_Quantum_Dog的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/czc9309/article/details/80304074?utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link">(10条消息) IntelliJ IDEA创建maven web项目（IDEA新手适用）_czc9309的博客-CSDN博客_idea创建maven web项目</a></p><h1 id="我真是被自己创建web项目搞得够够的了，以后只从模板导入"><a href="#我真是被自己创建web项目搞得够够的了，以后只从模板导入" class="headerlink" title="我真是被自己创建web项目搞得够够的了，以后只从模板导入"></a>我真是被自己创建web项目搞得够够的了，以后只从模板导入</h1><p>导入之后如果从别的啥地方复制来com和resources，记得标记一下文件夹：</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/Other/image.7bykvxrmtz00.png" alt="image"></p><p>然后模板生成那个index.jsp，默认是不开启el的（就是那个<code>$&#123; &#125;</code>），如果需要的话，我们手动加上一行：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<span class="hljs-meta">@page</span> isELIgnored=<span class="hljs-string">&quot;false&quot;</span>%&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>杂项</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSM学习笔记2</title>
    <link href="/2021/10/03/SSM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/"/>
    <url>/2021/10/03/SSM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><p>开始之前先来点阶段性的东西</p><blockquote><p>项目包里，主要有controller（web）、dao、domain（或POJO，存实体用）、service、utils（工具类）</p><p>再就是两个刻在DNA里的xml模板：spring-mvc.xml和web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml">&gt;<span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> </span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!-- mvc注解驱动 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span><br><br>   <span class="hljs-comment">&lt;!-- 开放静态资源 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span>/&gt;</span><br><br>   <span class="hljs-comment">&lt;!-- 组件扫描Controller --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.aster.controller&quot;</span>/&gt;</span><br><br>&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs xml">&gt;<span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!-- 全局的初始化参数（用不到的话不用写！SSM笔记1l --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!-- Spring的监听器 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!--  配置SpringMVC的前端控制器  --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--  配置MVC的配置文件的位置  --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--  服务器启动时就加载DispatcherServlet  --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- 配置缺省“ / ”意味着所有请求都找DispatcherServlet --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br>&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure></blockquote><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>MVC的拦截器Intercepter类似于Servlet开发中的过滤器Filter，用于对处理器进行<strong>预处理</strong>和<strong>后处理</strong></p><p>将拦截器按照一定的顺序连接成一条链，就是<strong>拦截器链</strong>。在访问被拦截的方法或字段时，拦截器链中的拦截器就会按照之前定义的顺序进行调用</p><p>（ps 拦截器是AOP思想的具体实现）</p><h3 id="拦截器和过滤器的区别"><a href="#拦截器和过滤器的区别" class="headerlink" title="拦截器和过滤器的区别"></a>拦截器和过滤器的区别</h3><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/SSM2/image.3a1173jbnhw0.png" alt="image"></p><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><p>自定义拦截器的步骤：</p><ol><li>创建拦截器，实现HandlerInterceptor接口</li><li>配置拦截器</li><li>测试拦截效果（emm，这也能算一步？）</li></ol><p>先快速建立一个测试项目吧：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.aster.controller;<br><br><span class="hljs-keyword">import</span> ...<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TargetController</span> </span>&#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/target&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">show</span> <span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;目标资源执行……&quot;</span>);<br>        ModelAndView modelAndView = <span class="hljs-keyword">new</span> ModelAndView();<br>        modelAndView.addObject(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;aster&quot;</span>);<br>        modelAndView.setViewName(<span class="hljs-string">&quot;index&quot;</span>);<br>        <span class="hljs-keyword">return</span> modelAndView;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<span class="hljs-meta">@page</span> isELIgnored=<span class="hljs-string">&quot;false&quot;</span>%&gt;<br>&lt;html&gt;<br>&lt;body&gt;<br>&lt;h2&gt;Hello World! $&#123;name&#125;&lt;/h2&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>显然，访问<code>http://localhost:8080/fucku_war_exploded/target</code>时会输出<code>Hello World! aster</code></p><blockquote><p>不要在意这个奇怪的项目名……当时遇到了一个未解bug……</p></blockquote><p>接下来，创建一个拦截器（spring-mvc.xml）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!-- 配置拦截器 --&gt;<br>   &lt;mvc:interceptors&gt;<br>       &lt;mvc:interceptor&gt;<br>           &lt;!-- 配置对哪些资源执行拦截操作 --&gt;<br>           &lt;!-- <span class="hljs-comment">/** ： 全都拦截 --&gt;</span><br><span class="hljs-comment">           &lt;mvc:mapping path=&quot;/**&quot;/&gt;</span><br><span class="hljs-comment">           &lt;bean class=&quot;com.aster.interceptor.MyInterceptor1&quot;/&gt;</span><br><span class="hljs-comment">       &lt;/mvc:interceptor&gt;</span><br><span class="hljs-comment">   &lt;/mvc:interceptors&gt;</span><br></code></pre></td></tr></table></figure><p>再次发布，发现页面<strong>一片空白</strong>，控制台只输出了<code>preHandle...</code>：</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/SSM2/image.7lcwhnuwdao0.png" alt="image"></p><p>显然，这是因为<strong>preHandle返回了false</strong></p><p>改为true后输出如下：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-function"><span class="hljs-title">preHandle</span></span>...<br>目标资源执行……<br><span class="hljs-function"><span class="hljs-title">postHandle</span></span>...<br><span class="hljs-function"><span class="hljs-title">afterCompletion</span></span>...<br></code></pre></td></tr></table></figure><h4 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h4><p>修改一下preHandle，假如请求里有一个参数是key，只有存在这个参数且key=16，我们才继续，否则<strong>重定向</strong>到错误视图</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;preHandle...&quot;</span>);<br>    String user = request.getParameter(<span class="hljs-string">&quot;user&quot;</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;aster&quot;</span>.equals(user)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        request.getRequestDispatcher(<span class="hljs-string">&quot;/error.jsp&quot;</span>).forward(request, response);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/SSM2/image.2igwrakcwo40.png" alt="image"></p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/SSM2/image.5k0oskeiryo0.png" alt="image"></p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/SSM2/image.1gvwz80pzo8w.png" alt="image"></p><p>上面的TargetController里，有这一句话：<code>modelAndView.addObject(&quot;name&quot;, &quot;aster&quot;);</code></p><p>我们可以在<strong>postHandle</strong>里进行<strong>《牛头人行为》</strong>，把modelAndView的name改成lotus：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;postHandle...&quot;</span>);<br>    modelAndView.addObject(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;lotus&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/SSM2/image.19ypbyjaynb4.png" alt="image"></p><h4 id="拦截器链"><a href="#拦截器链" class="headerlink" title="拦截器链"></a>拦截器链</h4><p>我们再简单写一个直接放行的只有输出的MyInterceptor2，然后在spring-mvc.xml里配置上：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置拦截器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptors</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 配置对哪些资源执行拦截操作 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- /** ： 全都拦截 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/**&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.aster.interceptor.MyInterceptor1&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/**&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.aster.interceptor.MyInterceptor2&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptors</span>&gt;</span><br></code></pre></td></tr></table></figure><p>再次发布，控制台输出：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-function"><span class="hljs-title">preHandle</span></span>...<br><span class="hljs-function"><span class="hljs-title">preHandle222222</span></span>...<br>目标资源执行……<br><span class="hljs-function"><span class="hljs-title">postHandle222222</span></span>...<br><span class="hljs-function"><span class="hljs-title">postHandle</span></span>...<br><span class="hljs-function"><span class="hljs-title">afterCompletion222222</span></span>...<br><span class="hljs-function"><span class="hljs-title">afterCompletion</span></span>...<br></code></pre></td></tr></table></figure><p>从上面的输出，就可以看出拦截器链的顺序啦</p><h2 id="异常处理机制"><a href="#异常处理机制" class="headerlink" title="异常处理机制"></a>异常处理机制</h2><p><a href="https://www.bilibili.com/video/BV1WZ4y1P7Bp?p=116">暂略</a></p><h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><p><strong>A</strong>spect <strong>O</strong>riented <strong>P</strong>rogramming，<strong>面向切面编程</strong>，是“通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术”</p><p>关键词：生效于<strong>运行期间</strong>，底层技术是<strong>动态代理</strong></p><p>动态代理能在不修改源码的前提下，对目标方法进行增强，实现程序功能间的松耦合</p><p>那么， AOP自然也能；AOP减少了重复代码、提高了开发效率，并且便于维护</p><blockquote><p>粗略理解“切面”：目标方法 + 目标的增强方法</p></blockquote><h2 id="底层实现"><a href="#底层实现" class="headerlink" title="底层实现"></a>底层实现</h2><p><strong>动态代理技术：</strong>在运行期间，Spring通过动态代理技术，动态生成代理对象，在代理对象方法执行时，进行功能增强的介入，再去调用目标对象的方法</p><p>常用的动态代理技术：</p><ul><li>JDK代理：基于接口的动态代理技术</li><li>cglib代理：基于父类的动态代理技术</li></ul><p>（目标对象有接口用JDK，没接口用cglib）</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/SSM2/image.4t90rv4jzcw0.png" alt="image"></p><p>下面，写一点代码来加深对这张图的理解</p><h3 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h3><p>老样子，建一个web项目</p><p>（虽然增强貌似用enhance或者advance听起来更正经一点，但在spring里这种类似于增强的东西确实被叫做advice……）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.aster.proxy.jdk;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">TargetInterface</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span> <span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.aster.proxy.jdk;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Target</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">TargetInterface</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;save running...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.aster.proxy.jdk;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Advice</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span> <span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;前置增强……&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterReturning</span> <span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;后置增强……&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.aster.proxy.jdk;<br><br><span class="hljs-keyword">import</span> ...<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProxyTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br><span class="hljs-comment">// 创建目标对象</span><br>        <span class="hljs-keyword">final</span> Target target = <span class="hljs-keyword">new</span> Target();<br><br>        <span class="hljs-comment">// 此方法的返回值是动态生成的代理对象</span><br>        <span class="hljs-comment">// 因为是基于接口的，所以要用接口来接返回值</span><br>        TargetInterface proxy = (TargetInterface) Proxy.newProxyInstance(<br>                <span class="hljs-comment">//目标对象的类加载器</span><br>                target.getClass().getClassLoader(),<br>                <span class="hljs-comment">// 与目标对象相同的接口的字节码对象 的数组</span><br>                <span class="hljs-comment">// 之所以是数组，是因为java是单继承但多实现的，目标对象可能实现了多个接口（？）</span><br>                target.getClass().getInterfaces(),<br>                <span class="hljs-keyword">new</span> InvocationHandler() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-comment">// 调用代理对象的任何方法时，实际上执行的是invoke</span><br>                    <span class="hljs-comment">// (代理对象, 目标方法, 参数)</span><br>                    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>                        <span class="hljs-comment">// 执行目标方法</span><br>                        <span class="hljs-comment">// 这里的invoke不是上面的invoke，是目标方法的invoke</span><br>                        method.invoke(target, args);<br>                        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>                    &#125;<br>                &#125;<br>        );<br><br>        <span class="hljs-comment">// 调用代理对象的方法</span><br>        proxy.save();<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行后，控制台输出了<code>save running...</code></p><p>那么接下来，我们就要<strong>对目标进行增强</strong>了：</p><p>（其实不是很懂，但不懂就不懂吧，哼）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.aster.proxy.jdk;<br><br><span class="hljs-keyword">import</span> ...<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProxyTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 创建目标对象</span><br>        <span class="hljs-keyword">final</span> Target target = <span class="hljs-keyword">new</span> Target();<br><br>        <span class="hljs-comment">// 增强对象</span><br>        <span class="hljs-keyword">final</span> Advice advice = <span class="hljs-keyword">new</span> Advice();<br><br>        <span class="hljs-comment">// 此方法的返回值是动态生成的代理对象</span><br>        <span class="hljs-comment">// 因为是基于接口的，所以要用接口来接返回值</span><br>        TargetInterface proxy = (TargetInterface) Proxy.newProxyInstance(<br>                <span class="hljs-comment">//目标对象的类加载器</span><br>                target.getClass().getClassLoader(),<br>                <span class="hljs-comment">// 与目标对象相同的接口的字节码对象 的数组</span><br>                <span class="hljs-comment">// 之所以是数组，是因为java是单继承但多实现的，目标对象可能实现了多个接口（？）</span><br>                target.getClass().getInterfaces(),<br>                <span class="hljs-keyword">new</span> InvocationHandler() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-comment">// 调用代理对象的任何方法时，实际上执行的是invoke</span><br>                    <span class="hljs-comment">// (代理对象, 目标方法, 参数)</span><br>                    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>                        advice.before(); <span class="hljs-comment">// 前置增强</span><br>                        <span class="hljs-comment">// 执行目标方法</span><br>                        <span class="hljs-comment">// 这里的invoke不是上面的invoke，是目标方法的invoke</span><br>                        Object invoke = method.invoke(target, args);<br>                        advice.afterReturning(); <span class="hljs-comment">// 后置增强</span><br>                        <span class="hljs-keyword">return</span> invoke;<br>                    &#125;<br>                &#125;<br>        );<br><br>        <span class="hljs-comment">// 调用代理对象的方法</span><br>        proxy.save();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gams">前置增强……<br><span class="hljs-function"><span class="hljs-title">save</span></span> running...<br>后置增强……<br></code></pre></td></tr></table></figure><h3 id="cglib动态代理"><a href="#cglib动态代理" class="headerlink" title="cglib动态代理"></a>cglib动态代理</h3><p>老师说，暂时不用掌握，那我甩个<a href="https://www.bilibili.com/video/BV1WZ4y1P7Bp?p=125">链接</a></p><h2 id="AOP相关概念"><a href="#AOP相关概念" class="headerlink" title="AOP相关概念"></a>AOP相关概念</h2><ul><li><p>Target：代理的目标对象</p></li><li><p>Proxy（代理）：一个类被AOP织入增强后，就会产生一个结果代理类</p></li><li><p>Joinpoint（连接点）：指那些被拦截到的点；spring只支持方法类型的连接点，即spring中的Joinpoint就是<strong>可以被增强的方法</strong></p></li><li><p><strong>Pointcut（切入点）</strong>：指我们要对哪些Joinpoint进行拦截（<strong>连接点是可以被增强，切入点是真的被增强了</strong>）</p></li><li><p><strong>Advice（通知/增强）</strong>：指拦截到Joinpoint后所要执行的方法</p></li><li><p><strong>Aspect（切面）</strong>：目标方法 + 增强 / 切入点 + 通知</p></li><li><p><strong>Weaving（织入）</strong>：指<strong>把增强应用到目标对象</strong>来创建<strong>新的代理对象</strong>的<strong>过程</strong>；spring采用动态代理织入，aspectj静态</p></li></ul><h2 id="AOP开发需明确的事项"><a href="#AOP开发需明确的事项" class="headerlink" title="AOP开发需明确的事项"></a>AOP开发需明确的事项</h2><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/SSM2/image.4wlqkxdsx1q0.png" alt="image"></p><p>（想不到吧，spring又双叒叕封装好了；所以之前那些不懂影响不是很大（逃））</p><h2 id="基于XML的AOP开发"><a href="#基于XML的AOP开发" class="headerlink" title="基于XML的AOP开发"></a>基于XML的AOP开发</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>导坐标</li><li>创建目标接口和目标类（内含切点）</li><li>创建切面类（内含增强方法）</li><li>将目标类和切面类的对象创建权交给spring</li><li>在applicationContext.xml中配置织入关系</li><li>测试</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>aspectj是一个配置aop的框架，虽然spring也能，但aspectj更方便一些（并且spring推荐用aspectj……）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.8.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>一个思想：</strong>你得在Spring的容器里，才好让Spring帮你做事，所以要把东西都给配进去</p><p>另外，别忘了在xml的beans标签里引入aop（虽然我发现每次IDEA都会自动帮我引入了，她真好）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.aster.aop;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">TargetInterface</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span> <span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">package</span> com.aster.aop;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Target</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">TargetInterface</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span> <span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;save running...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.aster.aop;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAspect</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span> <span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;前置增强……&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 配置目标对象 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;target&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.aster.aop.Target&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- 配置切面对象 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myAspect&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.aster.aop.MyAspect&quot;</span>/&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 配置织入，告诉spring哪些方法（切点）需要进行哪些增强（前置/后置...） --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 声明切面，有了下面这句话，spring才知道myAspect是一个切面 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;myAspect&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 切面 = 切点 + 通知 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;before&quot;</span> <span class="hljs-attr">pointcut</span>=<span class="hljs-string">&quot;execution(public void com.aster.aop.Target.save())&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>重点分析一下下面这一段：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置织入，告诉spring哪些方法（切点）需要进行哪些增强（前置/后置...） --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 声明切面，有了下面这句话，spring才知道myAspect是一个切面 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;myAspect&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 切面 = 切点 + 通知 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;before&quot;</span> <span class="hljs-attr">pointcut</span>=<span class="hljs-string">&quot;execution(public void com.aster.aop.Target.save())&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure><p>意为，当<strong>调用save()方法时</strong>，对于save()方法进行<strong>前置增强（aop:before）</strong>，前置增强所<strong>使用的方法是myAspect里的before方法（method=”before”）</strong>，</p><p>我们导spring-test和junit后，在test目录下测试一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.aster.test;<br><br><span class="hljs-keyword">import</span> ...<br><br><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="hljs-meta">@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AopTest</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> TargetInterface target;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span> <span class="hljs-params">()</span> </span>&#123;<br>        target.save();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams">前置增强……<br><span class="hljs-function"><span class="hljs-title">save</span></span> running...<br></code></pre></td></tr></table></figure><p><strong>重点来了！如果我们把applicationContext.xml中的<code>&lt;aop:config&gt;</code>那一堆注释掉，控制台会只输出<code>save running...</code></strong></p><p><strong>这是什么思想呢？解耦合！</strong></p><h3 id="切点表达式的写法"><a href="#切点表达式的写法" class="headerlink" title="切点表达式的写法"></a>切点表达式的写法</h3><p><code>execution([修饰符]返回值类型 包名.类名.方法名(参数))</code></p><ul><li><p>访问修饰符可以省略</p></li><li><p>返回值类型、包名、类名、方法名可以使用星号 ***** 代表任意</p></li><li><p>包名与类名之前一个点 <strong>.</strong> 代表当前包下的类，两个点 <strong>..</strong> 代表当前包及其子包下的类 </p></li><li><p>参数列表可以使用两个点 <strong>..</strong> 表示任意个数，任意类型的参数列表（比如我有许多个save()，可能有无参的、1个参数的、2个……）</p></li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">execution</span><span class="hljs-params">(public void com.aster.aop.Target.save()</span></span>)<br><span class="hljs-function"><span class="hljs-title">execution</span><span class="hljs-params">(void com.aster.aop.Target.*(..)</span></span>)<br><span class="hljs-function"><span class="hljs-title">execution</span><span class="hljs-params">(* com.aster.aop.*.*(..)</span></span>)<br><span class="hljs-function"><span class="hljs-title">execution</span><span class="hljs-params">(* com.aster.aop..*.*(..)</span></span>)<br><span class="hljs-function"><span class="hljs-title">execution</span><span class="hljs-params">(* *..*.*(..)</span></span>)<br></code></pre></td></tr></table></figure><h3 id="通知的种类"><a href="#通知的种类" class="headerlink" title="通知的种类"></a>通知的种类</h3><h4 id="通知的配置语法"><a href="#通知的配置语法" class="headerlink" title="通知的配置语法"></a>通知的配置语法</h4><p><code>&lt;aop:通知类型 method=&quot;切面类中的方法名&quot; pointcut=&quot;切点表达式&quot;&gt;&lt;/aop:通知类型&gt;</code></p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/SSM2/image.4xden5kcsyo0.png" alt="image"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAspect</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span> <span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;前置增强...&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterReturning</span> <span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;后置增强...&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// ProceedingJoinPoint，正在执行的连接点，即切点</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">around</span> <span class="hljs-params">(ProceedingJoinPoint pjp)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;环绕前增强...&quot;</span>);<br>        Object proceed = pjp.proceed();<br>        System.out.println(<span class="hljs-string">&quot;环绕后增强&quot;</span>);<br>        <span class="hljs-keyword">return</span> proceed;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置织入，告诉spring哪些方法（切点）需要进行哪些增强（前置/后置...） --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 声明切面 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;myAspect&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 切面 = 切点 + 通知 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;before&quot;</span> <span class="hljs-attr">pointcut</span>=<span class="hljs-string">&quot;execution(* com.aster.aop.*.*(..))&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:after-returning</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;afterReturning&quot;</span> <span class="hljs-attr">pointcut</span>=<span class="hljs-string">&quot;execution(* com.aster.aop.*.*(..))&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:around</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;around&quot;</span> <span class="hljs-attr">pointcut</span>=<span class="hljs-string">&quot;execution(* com.aster.aop.*.*(..))&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs erlang">前置增强...<br>环绕前增强...<br>save running...<br>环绕后增强<br>后置增强...<br></code></pre></td></tr></table></figure><h3 id="抽取切点表达式"><a href="#抽取切点表达式" class="headerlink" title="抽取切点表达式"></a>抽取切点表达式</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置织入，告诉spring哪些方法（切点）需要进行哪些增强（前置/后置...） --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 声明切面 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;myAspect&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myPointcut&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.aster.aop.*.*(..))&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 切面 = 切点 + 通知 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;before&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;myPointcut&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:after-returning</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;afterReturning&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;myPointcut&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:around</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;around&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;myPointcut&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="基于注解的AOP开发"><a href="#基于注解的AOP开发" class="headerlink" title="基于注解的AOP开发"></a>基于注解的AOP开发</h2><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h3><ol><li>导坐标</li><li>创建目标接口和目标类（内含切点）</li><li>创建切面类（内含增强方法）</li><li>将目标类和切面类的对象创建权交给spring</li><li>在<strong>切面类</strong>中使用注解配置织入关系</li><li>在配置文件中开启组件扫描和<strong>AOP自动代理</strong></li><li>测试</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.aster.aop;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component(&quot;target&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Target</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">TargetInterface</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span> <span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;save running...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.aster.aop;<br><br><span class="hljs-keyword">import</span> ...<br><br><span class="hljs-meta">@Component(&quot;myAspect&quot;)</span><br><span class="hljs-meta">@Aspect</span> <span class="hljs-comment">// 告诉spring当前类是一个切面类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAspect</span> </span>&#123;<br><br>    <span class="hljs-meta">@Before(&quot;execution(* com.aster.aop.*.*(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;前置增强...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@AfterReturning(&quot;execution(* com.aster.aop.*.*(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterReturning</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;后置增强...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Around(&quot;execution(* com.aster.aop.*.*(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">around</span><span class="hljs-params">(ProceedingJoinPoint pjp)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;环绕前增强...&quot;</span>);<br>        Object proceed = pjp.proceed();<br>        System.out.println(<span class="hljs-string">&quot;环绕后增强&quot;</span>);<br>        <span class="hljs-keyword">return</span> proceed;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml">...<br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.aster.aop&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!-- aop自动代理 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span>/&gt;</span><br>...<br></code></pre></td></tr></table></figure><h3 id="抽取切点表达式-1"><a href="#抽取切点表达式-1" class="headerlink" title="抽取切点表达式"></a>抽取切点表达式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component(&quot;myAspect&quot;)</span><br><span class="hljs-meta">@Aspect</span> <span class="hljs-comment">// 告诉spring当前类是一个切面类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAspect</span> </span>&#123;<br><br>    <span class="hljs-meta">@Pointcut(&quot;execution(* com.aster.aop.*.*(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">myPointcut</span> <span class="hljs-params">()</span> </span>&#123;&#125;<br><br>    <span class="hljs-meta">@Before(&quot;MyAspect.myPointcut()&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;前置增强...&quot;</span>);<br>    &#125;<br>    ...<br>&#125;       <br></code></pre></td></tr></table></figure><h1 id="Spring的事务控制"><a href="#Spring的事务控制" class="headerlink" title="Spring的事务控制"></a>Spring的事务控制</h1><p><a href="https://www.bilibili.com/video/BV1WZ4y1P7Bp?p=136">时间紧迫，先run去半路弹射起步学springboot了</a></p><h1 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h1><p>想不到吧，我又run回来了……</p><p>因为感觉那个springboot的课后面学的一些东西不一定能立马用上（<strong>而且又难又乱！生气！</strong>），加上做个小项目好像还确实得会MyBatis（之前本来打算纯套完整模板的但是发现完整模板实在是太难了抄都抄不明白所以乖乖自己写后端，让前端去套模板吧Orz）</p><h2 id="原始Jdbc操作"><a href="#原始Jdbc操作" class="headerlink" title="原始Jdbc操作"></a>原始Jdbc操作</h2><p><strong>查询数据</strong></p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/SSM2/image.6nhfbvjxnio0.png" alt="image"></p><p><strong>插入数据</strong></p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/SSM2/image.ve6oym1rwcw.png" alt="image"></p><p>可以发现，代码有不少重复，①反复连接又关闭花资源多，②且SQL语句和代码耦合死了，③查询和插入的时候，还要手动对封装数据的实体进行操作</p><p><strong>解决：</strong> ①数据库连接池 ②抽取SQL语句 ③令实体与表自动映射</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>MyBatis是一个<strong>持久层（DAO）</strong>框架，内部封装了jdbc</p><p>通过xml/注解配置好各种statement（SQL操作语句），可以与动态参数自动映射生成最终的SQL语句</p><h2 id="快速入门-1"><a href="#快速入门-1" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤"></a>步骤</h3><p>（以用户为例）</p><ol><li>导坐标</li><li>创建user表</li><li>编写User实体类</li><li>编写映射文件UserMapper.xml</li><li>编写核心文件SqlMapConfig.xml</li><li>编写测试类</li></ol><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/SSM2/image.7g0b1s5aiis0.png" alt="image"></p><p>因为是学完（bushi）springboot回来补上MyBatis的所以就不导坐标了（逃）</p><p>创建实体类也不写了（学完springboot回来学真快乐，lombok太爽了哈哈哈（虽然好像和boot没啥关系））</p><h4 id="编写xml"><a href="#编写xml" class="headerlink" title="编写xml"></a>编写xml</h4><h5 id="UserMapper-xml"><a href="#UserMapper-xml" class="headerlink" title="UserMapper.xml"></a>UserMapper.xml</h5><p>一般来说，映射文件和被映射的实体目录相同（不要在意红线）</p><blockquote><p>ps IDEA里创建多级目录时用 / 分开</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/SSM2/image.4jb089xg9820.png" alt="image"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;userMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.aster.domain.User&quot;</span>&gt;</span><br>        select * from user;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="SqlMapperConfig-xml"><a href="#SqlMapperConfig-xml" class="headerlink" title="SqlMapperConfig.xml"></a>SqlMapperConfig.xml</h5><p>一般放在resources根目录</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span> <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 配置数据源环境 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 使用JDBC原生的事务管理器 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span> <span class="hljs-comment">&lt;!-- 池化 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test?serverTimezone=UTC&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 加载映射关系 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/aster/mapper/UserMapper.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="编写测试代码"><a href="#编写测试代码" class="headerlink" title="编写测试代码"></a>编写测试代码</h4><p>（然后我发现好像springboot没导好，还得导一下坐标Orz）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.aster.test;<br><br><span class="hljs-keyword">import</span> com.aster.domain.User;<br><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBatisTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">// 获得核心配置文件（这个Resources是ibatis的别导错了）</span><br>        InputStream resourceAsStream = Resources.getResourceAsStream(<span class="hljs-string">&quot;SqlMapConfig.xml&quot;</span>);<br>        <span class="hljs-comment">// 获得session工厂对象</span><br>        SqlSessionFactory sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);<br>        <span class="hljs-comment">// 获得session会话对象</span><br>        SqlSession sqlSession = sqlSessionFactory.openSession();<br>        <span class="hljs-comment">// 执行操作 参数：namespace + id</span><br>        List&lt;User&gt; userList = sqlSession.selectList(<span class="hljs-string">&quot;userMapper.findAll&quot;</span>);<br>        <span class="hljs-comment">// 打印数据</span><br>        System.out.println(userList);<br>        <span class="hljs-comment">// 释放资源</span><br>        sqlSession.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>不过貌似因为版本问题报错了，但是我也不打算排查了，毕竟有springboot</p><h2 id="映射文件概述"><a href="#映射文件概述" class="headerlink" title="映射文件概述"></a>映射文件概述</h2><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/SSM2/image.5ss9kjdr98g0.png" alt="image"></p><h2 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h2><p>以插入为例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;userMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insert&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.aster.domain.User&quot;</span>&gt;</span><br>        insert into user values(#&#123;id&#125;, #&#123;username&#125;, #&#123;password&#125;);<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.aster.domain.User&quot;</span>&gt;</span><br>        select * from user;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBatisTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><br>        User user = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;aster&quot;</span>, <span class="hljs-string">&quot;000000&quot;</span>); <span class="hljs-comment">// &lt;--</span><br><br>        <span class="hljs-comment">// 获得核心配置文件（这个Resources是ibatis的别导错了）</span><br>        InputStream resourceAsStream = Resources.getResourceAsStream(<span class="hljs-string">&quot;SqlMapConfig.xml&quot;</span>);<br>        <span class="hljs-comment">// 获得session工厂对象</span><br>        SqlSessionFactory sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);<br>        <span class="hljs-comment">// 获得session会话对象</span><br>        SqlSession sqlSession = sqlSessionFactory.openSession();<br><br>        <span class="hljs-comment">// 执行操作 参数：namespace + id</span><br>        sqlSession.insert(<span class="hljs-string">&quot;userMapper.insert&quot;</span>, user); <span class="hljs-comment">// &lt;--</span><br><br>        <span class="hljs-comment">// MyBatis不会自动提交事务！需要手动提交事务来更新表</span><br>        sqlSession.commit(); <span class="hljs-comment">// &lt;--</span><br>        <br>        <span class="hljs-comment">// 释放资源</span><br>        sqlSession.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>同理，修改是update，<code>parameterType=&quot;com.aster.domain.User&quot;</code></p><p>如果是按id来删除delete，那么<code>parameterType=&quot;java.lang.Integer&quot;</code></p><h2 id="核心配置文件概述"><a href="#核心配置文件概述" class="headerlink" title="核心配置文件概述"></a>核心配置文件概述</h2><h3 id="层级关系"><a href="#层级关系" class="headerlink" title="层级关系"></a>层级关系</h3><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/SSM2/image.12yjcf85ie40.png" alt="image"></p><h3 id="environments"><a href="#environments" class="headerlink" title="environments"></a>environments</h3><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/SSM2/image.3ekky8h5ic40.png" alt="image"></p><h3 id="mappers"><a href="#mappers" class="headerlink" title="mappers"></a>mappers</h3><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/SSM2/image.62e2kkol3hw0.png" alt="image"></p><h3 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h3><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/SSM2/image.40dmvktu2tg0.png" alt="image"></p><h3 id="typeAliases"><a href="#typeAliases" class="headerlink" title="typeAliases"></a>typeAliases</h3><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/SSM2/image.65eku2sl6fs0.png" alt="image"></p><p>MyBatis提前设置了一些默认别名：</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/SSM2/image.5o2eyetaiow0.png" alt="image"></p><h2 id="MyBatis相关API"><a href="#MyBatis相关API" class="headerlink" title="MyBatis相关API"></a>MyBatis相关API</h2><h3 id="SqlSession工厂构建器SqlSessionFactoryBuilder"><a href="#SqlSession工厂构建器SqlSessionFactoryBuilder" class="headerlink" title="SqlSession工厂构建器SqlSessionFactoryBuilder"></a>SqlSession工厂构建器SqlSessionFactoryBuilder</h3><p>常用API：<code>SqlSessionFactory build(InputStream inputStream)</code></p><p>通过加载mybatis的核心配置文件的输入流的形式构建一个SqlSessionFactory对象</p><h3 id="SqlSession工厂对象SqlSessionFactory"><a href="#SqlSession工厂对象SqlSessionFactory" class="headerlink" title="SqlSession工厂对象SqlSessionFactory"></a>SqlSession工厂对象SqlSessionFactory</h3><p>用于创建SqlSes实例</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/SSM2/image.nily1ao1j6o.png" alt="image"></p><h3 id="SqlSession会话对象"><a href="#SqlSession会话对象" class="headerlink" title="SqlSession会话对象"></a>SqlSession会话对象</h3><p>执行语句的方法主要有：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">T <span class="hljs-title">selectOne</span><span class="hljs-params">(String statement, Object parameter)</span></span>;<br><span class="hljs-function">List&lt;E&gt; <span class="hljs-title">selectList</span><span class="hljs-params">(String statement, Object parameter)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">insert</span><span class="hljs-params">(String statement, Object parameter)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">update</span><span class="hljs-params">(String statement, Object parameter)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">delete</span><span class="hljs-params">(String statement, Object parameter)</span></span>;<br></code></pre></td></tr></table></figure><p>操作事务的方法主要有：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">commit</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">rollback</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><h2 id="MyBatis的DAO层实现"><a href="#MyBatis的DAO层实现" class="headerlink" title="MyBatis的DAO层实现"></a>MyBatis的DAO层实现</h2><h3 id="传统开发方式"><a href="#传统开发方式" class="headerlink" title="传统开发方式"></a>传统开发方式</h3><p>一般映射类叫做Dao/Mapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.aster.mapper.impl;<br><br><span class="hljs-keyword">import</span> ...<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserMapperImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserMapper</span> </span>&#123;<br><br>    ...<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        InputStream resourceAsStream = Resources.getResourceAsStream(<span class="hljs-string">&quot;SqlMapConfig.xml&quot;</span>);<br>        SqlSessionFactory sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);<br>        SqlSession sqlSession = sqlSessionFactory.openSession();<br>        List&lt;User&gt; userList = sqlSession.selectList(<span class="hljs-string">&quot;userMapper.findAll&quot;</span>);<br>        <span class="hljs-keyword">return</span> userList;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后在别的地方调用就行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">UserMapper userMapper = <span class="hljs-keyword">new</span> UserMapper(); <span class="hljs-comment">// ⭐⭐⭐</span><br>List&lt;User&gt; allUser = userMapper.findAll();<br></code></pre></td></tr></table></figure><h3 id="接口代理方式"><a href="#接口代理方式" class="headerlink" title="接口代理方式"></a>接口代理方式</h3><p>可以发现上面的传统方式很繁琐（别忘了除了impl还有个接口）</p><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/SSM2/image.1mshztd9xzr4.png" alt="image"></p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/SSM2/image.2gq6s58itfe0.png" alt="image"></p><p>之后，只要<code>UserMapper userMapper = sqlSession.getMapper(UserMapper.class)</code>（对应上段程序里的⭐⭐⭐），mybatis就会帮我们映射好，不必写impl</p><h2 id="映射文件深入"><a href="#映射文件深入" class="headerlink" title="映射文件深入"></a>映射文件深入</h2><h3 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h3><p>当业务逻辑复杂时，SQL语句是动态变化的</p><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/SSM2/image-20211010165610749.13kjx26az6.png" alt="image-20211010165610749"></p><h4 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findByIds&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>    select * from user<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;id in(&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br>            #&#123;id&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">findByIds</span><span class="hljs-params">(List&lt;Integer&gt;)</span></span>;<br></code></pre></td></tr></table></figure><p>(sql片段抽取略)</p><h2 id="核心配置文件深入"><a href="#核心配置文件深入" class="headerlink" title="核心配置文件深入"></a>核心配置文件深入</h2><h3 id="typeHandlers"><a href="#typeHandlers" class="headerlink" title="typeHandlers"></a>typeHandlers</h3><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/SSM2/image.bud5bz39jxc.png" alt="image"></p><p><a href="https://www.bilibili.com/video/BV1WZ4y1P7Bp?p=172">可以重写</a></p><h3 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a>plugins</h3><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/SSM2/image.6x7uxjwidqo0.png" alt="image"></p><p><a href="https://www.bilibili.com/video/BV1WZ4y1P7Bp?p=176">暂时跳过</a>    </p><h2 id="多表操作"><a href="#多表操作" class="headerlink" title="多表操作"></a>多表操作</h2><blockquote><p>表与表间的关系有：一对一、一对多/多对一、多对多</p></blockquote><h3 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h3><p>例如：用户和订单，虽然直观上是一对多（一个用户有多个订单），但是反过来，一个订单只属于一个用户</p><p>业务需求：查询一个订单，与此同时查询出该订单所属的用户</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/SSM2/image.1ob5b073po3k.png" alt="image"></p><p>（uid代表订单属于哪个用户）</p><p>（小知识：order在MySQL里是关键字）</p><p>首先编写orders的实体类，注意，由于Java是<strong>面向对象</strong>的，实体与实体（类与类）之间的关系通过<strong>引用</strong>来实现，所以在属性里写<code>private int uid</code>固然可以，但是更正确的是<code>private User user</code></p><p>然后是编写OrderMapper.xml和配置核心配置文件</p><p>原始SQL语句是这样的（oid是为了更方便写）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span>, o.id oid <span class="hljs-keyword">FROM</span> orders o, <span class="hljs-keyword">user</span> u <span class="hljs-keyword">WHERE</span> o.uid <span class="hljs-operator">=</span> u.id<br></code></pre></td></tr></table></figure><p>OrderMapper.xml（配置好了别名）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.aster.mapper.OrderMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;orderMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;order&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        手动指定字段与实体属性的映射关系</span><br><span class="hljs-comment">        column： 数据表的字段名称</span><br><span class="hljs-comment">        property：实体的属性名称</span><br><span class="hljs-comment">         --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;oid&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;ordertime&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;ordertime&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;total&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;total&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;uid&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;user.id&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;user.username&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;user.password&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;birthday&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;user.birthday&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAll&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;orderMap&quot;</span>&gt;</span><br>        SELECT *, o.id oid FROM orders o, user u WHERE o.uid = u.id<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>此外还有一种写法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;orderMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;order&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    手动指定字段与实体属性的映射关系</span><br><span class="hljs-comment">    column： 数据表的字段名称</span><br><span class="hljs-comment">    property：实体的属性名称</span><br><span class="hljs-comment">     --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;oid&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;ordertime&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;ordertime&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;total&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;total&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    （order和user均是配置的别名！）</span><br><span class="hljs-comment">    property：当前实体（order）的属性名称（private User user）</span><br><span class="hljs-comment">    javaType: 属性的类型（User）</span><br><span class="hljs-comment">     --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;uid&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;username&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;password&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;birthday&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;birthday&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h3><p>需求：查询一个用户，与此同时查询出该用户具有的订单</p><p>首先，在User实体类中添加属性<code>private List&lt;Order&gt; orderList</code></p><p>原始SQL：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span>, o.id oid <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">USER</span> u, <span class="hljs-keyword">order</span> o <span class="hljs-keyword">WHERE</span> u.id <span class="hljs-operator">=</span> o.uid<br></code></pre></td></tr></table></figure> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;uid&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;username&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;password&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;birthday&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;birthday&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    配置集合信息（因为一个用户有多个订单）</span><br><span class="hljs-comment">    property：集合名称</span><br><span class="hljs-comment">    ofType：集合中的数据类型</span><br><span class="hljs-comment">     --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;orderList&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;order&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 封装order的数据 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;oid&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;ordertime&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;ordertime&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;total&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;total&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAll&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;orderMap&quot;</span>&gt;</span><br>    SELECT *, o.id oid FROM USER u, order o WHERE u.id = o.uid<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h3><p>多对多的模型：一个用户有多个角色，一个角色被多个用户所拥有</p><p>查询需求：查询用户的同时，查询出该用户的所有角色</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/SSM2/image.3olgai2nrvw0.png" alt="image"></p><p>（和一对多差不多，主要是需要一张<strong>中间表</strong>）</p><p>sys_role:</p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/SSM2/image.716fnw2pt2o0.png" alt="image" style="zoom:50%;" /><p>sys_user_role（中间表）：</p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/SSM2/image.3j1v6cmjtdm0.png" alt="image" style="zoom:50%;" /><p>（上面的都没写多少代码，这个写全点吧）</p><p>Role实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Role</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String roleName;<br>    <span class="hljs-keyword">private</span> String roleDesc;<br>&#125;<br></code></pre></td></tr></table></figure><p>User实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> String birthday;<br><br>    <span class="hljs-comment">// 描述当前用户具备哪些角色</span><br>    <span class="hljs-keyword">private</span> List&lt;Role&gt; roleList;<br>&#125;<br></code></pre></td></tr></table></figure><p>UserMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">findAllUserAndRole</span><span class="hljs-params">()</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>UserMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.aster.mapper.UserMapper&quot;</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userRoleMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- user的信息 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;userId&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;username&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;password&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;birthday&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;birthday&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- user内部的roleList的信息 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;roleList&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;role&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;roleId&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;roleName&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;roleName&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;roleDesc&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;roleDesc&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAllUserAndRole&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;userRoleMap&quot;</span>&gt;</span><br>        select * from user u, sys_user_role ur, sys_role r WHERE u.id = ur.userId AND ur.roleId = r.id<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>SqlMapConfig.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span> <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 配置数据源环境 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 使用JDBC原生的事务管理器 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span> <span class="hljs-comment">&lt;!-- 池化 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test?serverTimezone=UTC&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 加载映射关系 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.aster.mapper.UserMapper&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 配置别名 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">typeAlias</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.aster.domain.User&quot;</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;user&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">typeAlias</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.aster.domain.Role&quot;</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;role&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBatisTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">// 获得核心配置文件</span><br>        InputStream resourceAsStream = Resources.getResourceAsStream(<span class="hljs-string">&quot;SqlMapConfig.xml&quot;</span>);<br>        <span class="hljs-comment">// 获得session工厂对象</span><br>        SqlSessionFactory sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);<br>        <span class="hljs-comment">// 获得session会话对象</span><br>        SqlSession sqlSession = sqlSessionFactory.openSession();<br><br>        UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br>        List&lt;User&gt; allUserAndRole = mapper.findAllUserAndRole();<br>        <span class="hljs-keyword">for</span>(User user : allUserAndRole) &#123;<br>            System.out.println(user);<br>        &#125;<br>        <br>        sqlSession.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml">一对一：使用<span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span>&gt;</span>配置（在内部封装实体自身的信息和实体所引用的别的实体的信息（<span class="hljs-tag">&lt;<span class="hljs-name">association</span>&gt;</span>））<br>一对多：使用<span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span>&gt;</span>和<span class="hljs-tag">&lt;<span class="hljs-name">collection</span>&gt;</span>配置<br>多对多：使用<span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span>&gt;</span>和<span class="hljs-tag">&lt;<span class="hljs-name">collection</span>&gt;</span>配置<br></code></pre></td></tr></table></figure><h2 id="注解开发"><a href="#注解开发" class="headerlink" title="注解开发"></a>注解开发</h2><table><thead><tr><th align="center">注解</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">@Insert</td><td align="center">新增</td></tr><tr><td align="center">@Upadte</td><td align="center">更新</td></tr><tr><td align="center">@Delete</td><td align="center">删除</td></tr><tr><td align="center">@Select</td><td align="center">查询</td></tr><tr><td align="center">@Result</td><td align="center">结果集封装</td></tr><tr><td align="center">@Results</td><td align="center">可以与@Result一起使用封装多个结果集</td></tr><tr><td align="center">@One</td><td align="center">实现一对一结果封装集</td></tr><tr><td align="center">@Many</td><td align="center">实现一对多结果封装集</td></tr></tbody></table><h3 id="注解完成CRUD"><a href="#注解完成CRUD" class="headerlink" title="注解完成CRUD"></a>注解完成CRUD</h3><p>UserMapper.xml可以删掉了</p><p>刚才建立了一个com.aster.mapper.UserMapper接口用于对表进行一系列操作，里面声明了CRUD方法</p><p>现在，我们对这个接口进行改写成注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.aster.mapper;<br><br><span class="hljs-keyword">import</span> ...<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>&#123;<br><br>    <span class="hljs-meta">@Insert(&quot;insert into user values(#&#123;id&#125;, #&#123;username&#125;, #&#123;password&#125;)&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">(User user)</span></span>;<br><br>    <span class="hljs-meta">@Update(&quot;update user set username=#&#123;username&#125;, password=#&#123;password&#125; where id=#&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(User user)</span></span>;<br><br>    <span class="hljs-meta">@Delete(&quot;delete from user where id=#&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br><br>    <span class="hljs-meta">@Select(&quot;select * from user where id=#&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">findById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br><br>    <span class="hljs-meta">@Select(&quot;select * from user&quot;)</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后修改SqlMapperConfig那里的配置映射关系的部分：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 加载映射关系 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.aster.mapper.UserMapper&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="多表操作-1"><a href="#多表操作-1" class="headerlink" title="多表操作"></a>多表操作</h3><h4 id="一对一-1"><a href="#一对一-1" class="headerlink" title="一对一"></a>一对一</h4><p>业务需求：查询一个订单，与此同时查询出该订单所属的用户（和之前一样）</p><p><code>@Results</code>对应<code>&lt;resultMap&gt;</code>，<code>@Result</code>对应<code>&lt;resultMap&gt;</code>内的<code>&lt;result&gt;</code></p><p>虽然没有<code>@Id</code>注解但是可以在<code>@Result</code>里注明<code>id = true</code></p><p>其余注解大同小异，详见程序吧</p><p>OrderMapper.java</p><p>（同xml实现一样，Order是我们自己定义的类，select出来的东西<strong>没法自动封装</strong>进去，需要我们<strong>手动</strong>写<code>@Results</code>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.aster.mapper;<br><br><span class="hljs-keyword">import</span> ...<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">OrderMapper</span> </span>&#123;<br><br>    <span class="hljs-meta">@Select(&quot;select *, o.id oid from orders o, user u where o.uid = u.id&quot;)</span><br>    <span class="hljs-meta">@Results(&#123;</span><br><span class="hljs-meta">            @Result(column = &quot;oid&quot;, property = &quot;id&quot;),</span><br><span class="hljs-meta">            @Result(column = &quot;ordertime&quot;, property = &quot;ordertime&quot;),</span><br><span class="hljs-meta">            @Result(column = &quot;total&quot;, property = &quot;total&quot;),</span><br><span class="hljs-meta">            @Result(column = &quot;uid&quot;, property = &quot;user.id&quot;),</span><br><span class="hljs-meta">            @Result(column = &quot;username&quot;, property = &quot;user.username&quot;),</span><br><span class="hljs-meta">            @Result(column = &quot;password&quot;, property = &quot;user.password&quot;),</span><br><span class="hljs-meta">            @Result(column = &quot;birthday&quot;, property = &quot;user.birthday&quot;)</span><br><span class="hljs-meta">    &#125;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Order&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>补个Order实现类吧……</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Order</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> uid;<br>    <span class="hljs-keyword">private</span> Date ordertime;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> total;<br>    <span class="hljs-comment">// 当前订单属于哪个用户</span><br>    <span class="hljs-keyword">private</span> User user;<br>&#125;<br></code></pre></td></tr></table></figure><p>也有另一种实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.aster.mapper;<br><br><span class="hljs-keyword">import</span> ...<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">OrderMapper</span> </span>&#123;<br><br>    <span class="hljs-meta">@Select(&quot;select * from orders&quot;)</span><br>    <span class="hljs-meta">@Results(&#123;</span><br><span class="hljs-meta">            @Result(column = &quot;id&quot;, property = &quot;id&quot;), // 因为uid用于找user了所以这里改回id</span><br><span class="hljs-meta">            @Result(column = &quot;ordertime&quot;, property = &quot;ordertime&quot;),</span><br><span class="hljs-meta">            @Result(column = &quot;total&quot;, property = &quot;total&quot;),</span><br><span class="hljs-meta">            @Result(</span><br><span class="hljs-meta">                    column = &quot;uid&quot;, // 根据colunm字段去查询user</span><br><span class="hljs-meta">                    property = &quot;user&quot;, // 要封装的属性是名称是private User user</span><br><span class="hljs-meta">                    javaType = User.class, // 要封装的类型是User</span><br><span class="hljs-meta">                    // one = @One()代表一对一</span><br><span class="hljs-meta">                    // select属性规定了查询哪个接口来获取数据</span><br><span class="hljs-meta">                    // 给findById传去uid字段，返回User类型</span><br><span class="hljs-meta">                    one = @One(select = &quot;com.aster.mapper.UserMapper.findById&quot;)</span><br><span class="hljs-meta">            )</span><br><span class="hljs-meta">    &#125;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Order&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="一对多-1"><a href="#一对多-1" class="headerlink" title="一对多"></a>一对多</h4><p>需求：查询一个用户的所有订单</p><p>OrderMapper.java</p><p>（同上面的UserMapper.findById，一个作用，不过之前没写过这个，写一下）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">...<br><span class="hljs-meta">@Select(&quot;select * fron user where uid=#&#123;uid&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Order&gt; <span class="hljs-title">findByUid</span><span class="hljs-params">(<span class="hljs-keyword">int</span> uid)</span></span>;<br>...<br></code></pre></td></tr></table></figure><p>User实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ToString</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> String birthday;<br>    <span class="hljs-comment">// 描述当前用户有哪些订单</span><br>    <span class="hljs-keyword">private</span> List&lt;Order&gt; orderList;<br>&#125;<br></code></pre></td></tr></table></figure><p>UserMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">...<br>    <span class="hljs-meta">@Select(&quot;select * from user&quot;)</span><br>    <span class="hljs-meta">@Results(&#123;</span><br><span class="hljs-meta">            @Result(column = &quot;id&quot;, property = &quot;id&quot;),</span><br><span class="hljs-meta">            @Result(column = &quot;username&quot;, property = &quot;username&quot;),</span><br><span class="hljs-meta">            @Result(column = &quot;password&quot;, property = &quot;password&quot;),</span><br><span class="hljs-meta">            @Result(</span><br><span class="hljs-meta">                    property = &quot;orderList&quot;,</span><br><span class="hljs-meta">                    column = &quot;id&quot;,</span><br><span class="hljs-meta">                    javaType = List.class,</span><br><span class="hljs-meta">                    // many = @Many()一对多</span><br><span class="hljs-meta">                    many = @Many(select = &quot;com.aster.mapper.OrderMapper.findByUid&quot;)</span><br><span class="hljs-meta">            )</span><br><span class="hljs-meta">    &#125;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">findUserAndAllOrder</span><span class="hljs-params">()</span></span>; <br>...<br></code></pre></td></tr></table></figure><h4 id="多对多-1"><a href="#多对多-1" class="headerlink" title="多对多"></a>多对多</h4><p>需求：查询用户的同时，查询出该用户的所有角色</p><p>RoleMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">RoleMapper</span> </span>&#123;<br>    <span class="hljs-meta">@Select(&quot;select * from sys_user_role ur, sys_role r where ur.roleId = r.id and ur.userId = #&#123;uid&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Role&gt; <span class="hljs-title">findByUid</span><span class="hljs-params">(<span class="hljs-keyword">int</span> uid)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>UserMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">...<br>    <span class="hljs-meta">@Select(&quot;select * from user&quot;)</span><br>    <span class="hljs-meta">@Results(&#123;</span><br><span class="hljs-meta">            @Result(column = &quot;id&quot;, property = &quot;id&quot;),</span><br><span class="hljs-meta">            @Result(column = &quot;username&quot;, property = &quot;password&quot;),</span><br><span class="hljs-meta">            @Result(column = &quot;password&quot;, property = &quot;password&quot;)</span><br><span class="hljs-meta">            @Result(</span><br><span class="hljs-meta">                    property = &quot;roleList&quot;,</span><br><span class="hljs-meta">                    column = &quot;id&quot;,</span><br><span class="hljs-meta">                    javaType = List.class,</span><br><span class="hljs-meta">                    many = @Many(select = &quot;com.aster.mapper.RoleMapper.findByUid&quot;)</span><br><span class="hljs-meta">            )</span><br><span class="hljs-meta">    &#125;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Role&gt; <span class="hljs-title">findUserAndAllRole</span><span class="hljs-params">()</span></span>; <br>...<br></code></pre></td></tr></table></figure><h1 id="SSM整合"><a href="#SSM整合" class="headerlink" title="SSM整合"></a>SSM整合</h1><p>（终于要学完啦！）</p><p>（主要指Spring整合MyBatis，因为MyBatis是第三方框架）</p><blockquote><p>再次复习概念（不一定很准）</p><p>Spring：管理三层里的Bean</p><p>Spring MVC：Web层</p><p>MyBatis：DAO层</p></blockquote><h2 id="原始整合方式"><a href="#原始整合方式" class="headerlink" title="原始整合方式"></a>原始整合方式</h2><p>打好基础很重要！所以先写个原始整合加深理解，毕竟学了这么多也得知道怎么用</p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/SSM2/image.5kfnl72thhs0.png" alt="image" style="zoom:50%;" /><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/SSM2/image.43dy1v3y81c0.png" alt="image" style="zoom:80%;" /><p>一堆maven（貌似mysql connnector要用和我一个版本的8.0.21……不过我用了也报错，懒得改了）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">&lt;略&gt;<br></code></pre></td></tr></table></figure><p>实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.aster.domain;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Account</span> </span>&#123;<br><br>     <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>     <span class="hljs-keyword">private</span> String name;<br>     <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> money;<br> ...<br>&#125;<br></code></pre></td></tr></table></figure><p>编写mapper接口（再次复习）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.aster.mapper;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">AccountMapper</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">(Account account)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Account&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>编写service接口及实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.aster.service.impl;<br><br><span class="hljs-keyword">import</span> ...<br><br><span class="hljs-meta">@Service(&quot;accountService&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AccountServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AccountService</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">(Account account)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            InputStream resourceAsStream = Resources.getResourceAsStream(<span class="hljs-string">&quot;sqlMapConfig.xml&quot;</span>);<br>            SqlSessionFactory sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);<br>            SqlSession sqlSession = sqlSessionFactory.openSession();<br>            AccountMapper mapper = sqlSession.getMapper(AccountMapper.class);<br>            mapper.save(account);<br>            sqlSession.commit();<br>            sqlSession.close();<br><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Account&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            InputStream resourceAsStream = Resources.getResourceAsStream(<span class="hljs-string">&quot;sqlMapConfig.xml&quot;</span>);<br>            SqlSessionFactory sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);<br>            SqlSession sqlSession = sqlSessionFactory.openSession();<br>            AccountMapper mapper = sqlSession.getMapper(AccountMapper.class);<br>            List&lt;Account&gt; accountList = mapper.findAll();<br>            sqlSession.close();<br>            <span class="hljs-keyword">return</span> accountList;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>编写Controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.aster.controller;<br><br><span class="hljs-keyword">import</span> com.aster.domain.Account;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AccountController</span> </span>&#123;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">save</span><span class="hljs-params">(Account account)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">findAll</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>sqlMapConfig.xml</p><p>注意：在定义别名的时候，如果放入了<strong>package标签</strong>，那么这个包下<strong>所有的类</strong>都会<strong>自动</strong>被声明一个别名，别名是类名的首字母小写；同理，在加载映射的时候，如果放入了<strong>package标签</strong>，那么这个包下<strong>所有的映射配置文件</strong>都会被加载</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--加载properties文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;jdbc.properties&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!--定义别名--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--  &lt;typeAlias type=&quot;com.aster.domain.Account&quot; alias=&quot;account&quot;/&gt;  --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.aster.domain&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--环境--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;developement&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;developement&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--加载映射--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--  &lt;mapper resource=&quot;com/aster/mapper/AccountMapper.xml&quot;/&gt;  --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.aster.mapper&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（捏麻麻的，报错，估计又是版本问题，开摆！）</p><h2 id="MyBatis整合Spring实现"><a href="#MyBatis整合Spring实现" class="headerlink" title="MyBatis整合Spring实现"></a>MyBatis整合Spring实现</h2><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/SSM2/image.3swj78bkzda0.png" alt="image"></p><p>在导入mybatis依赖后，系统其实已经提供了一个<strong>SqlSessionFactoryBean</strong></p><p>因此可以在spring配置文件里引入它</p><p>spring也集成了<strong>MapperScannerConfigurer</strong>用于扫描mapper所在的包并为mapper创建实现类，而且会自动把mapper实现类注入容器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:tx</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/tx&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/tx</span></span><br><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/tx/spring-tx.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/aop</span></span><br><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/aop/spring-aop.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/context</span></span><br><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--组件扫描 扫描service和mapper--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.aster&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--排除controller的扫描--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">context:exclude-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--加载properties文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!--配置数据源信息--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClass&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbcUrl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--配置sessionFactory--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--加载mybatis核心文件--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:sqlMapConfig.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--扫描mapper所在的包 为mapper创建实现类--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;basePackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.aster.mapper&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><br>    <span class="hljs-comment">&lt;!--声明式事务控制--&gt;</span><br>    <span class="hljs-comment">&lt;!--平台事务管理器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--配置事务增强--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txAdvice&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;*&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--事务的aop织入--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;txAdvice&quot;</span> <span class="hljs-attr">pointcut</span>=<span class="hljs-string">&quot;execution(* com.aster.service.impl.*.*(..))&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这样一来AccountService就少写好多东西了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.aster.service.impl;<br><br><span class="hljs-keyword">import</span> ...<br><br><span class="hljs-meta">@Service(&quot;accountService&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AccountServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AccountService</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AccountMapper accountMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">(Account account)</span> </span>&#123;<br>        accountMapper.save(account);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Account&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> accountMapper.findAll();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL学习笔记1</title>
    <link href="/2021/10/03/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/"/>
    <url>/2021/10/03/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为学JdbcTemplate免不了用到一些MySQL，所以开一篇笔记随便记一记。以后认真深入学MySQL大概会写在学习笔记2里吧</p><p>连接之后，右键连接可以新建一个数据库</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/MySQL1/image.5wsbh0canqs0.png" alt="image"></p><p>排序规则这里，utf8_bin是大小写敏感，utf8_general_ci是大小写不敏感，按照需求选一个</p><h2 id="Navicat的基本使用"><a href="#Navicat的基本使用" class="headerlink" title="Navicat的基本使用"></a>Navicat的基本使用</h2><h3 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h3><p>首先，一个表中需要设定唯一的一列键</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/MySQL1/image.5rhhu38zo7c0.png" alt="image"></p><p>假设我们建这个表最后叫info，存储一些用户信息</p><p>那么肯定要添加name字段，类型是<strong>varchar：可变字符串</strong>（名字可长可短），不是null即意为必须填写，人肯定不能没有名字，至于age就无所谓了</p><p>gender性别字段，采取<strong>enum枚举类型</strong>，需要<strong>编辑一下enum的值：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/MySQL1/image.1fil2xrykgf4.png" alt="image"></p><p>点击保存：</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/MySQL1/image.4p3y3b3gwh40.png" alt="image"></p><p>右键设计表，可以对表进行更改：</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/MySQL1/image.4x2o9qf0tqu0.png" alt="image"></p><h3 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h3><blockquote><p>CRUD：增删改查（增加Create、检索Retrieve、更新Update、删除Delete）</p></blockquote><p>双击info进入可视化编辑</p><p>点击左下角的 <strong>+ 或 -</strong> 增加或删除行，id会自动自增生成（如果前面有行被删了，id还是从被删之前的位置递增）</p><p>写完一行后，点击左下角的 <strong>对勾√</strong> 保存，做出任何修改后，都要点击保存，否则无效</p><p>（双击点开info之后，其实已经是处在查询的状态了）</p><p>IDEA里，连接MySQL后，可能需要手动在设置里勾选中需要显示出来的数据库</p>]]></content>
    
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于JMX端口被占用</title>
    <link href="/2021/09/30/%E5%85%B3%E4%BA%8EJMX%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A8/"/>
    <url>/2021/09/30/%E5%85%B3%E4%BA%8EJMX%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">netstat -aon|findstr 1099<br>taskkill -f -pid xxxx<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/%E6%9D%82%E5%9B%BE/image.5k8yjqy7f400.png" alt="image"></p>]]></content>
    
    
    
    <tags>
      
      <tag>JMX</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDEA配置Tomcat服务器</title>
    <link href="/2021/09/24/IDEA%E9%85%8D%E7%BD%AETomcat%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2021/09/24/IDEA%E9%85%8D%E7%BD%AETomcat%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="安装Tomcat"><a href="#安装Tomcat" class="headerlink" title="安装Tomcat"></a>安装Tomcat</h3><p>简单说说：在官网下载windows x64的zip包，然后解压到你喜欢的文件夹就好</p><p>点击bin里的startup.bat后访问localhost:8080就能测试了</p><h3 id="IDEA配置"><a href="#IDEA配置" class="headerlink" title="IDEA配置"></a>IDEA配置</h3><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/IDEATomcat/image.2h4grhen1ks0.png" alt="image"></p><p>确保项目结构里这两项勾选</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/IDEATomcat/image.1w3kmewznt8g.png" alt="image"></p><p>右上角编辑配置，点开后选择 Tomcat本地</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/IDEATomcat/image.6fo43yi11lw0.png" alt="image"></p><p>之后，IDEA会提示缺少工件，如果已经有xxxx:war exploded，就选上</p><p>如果不自带工件，看图：</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/IDEATomcat/image.66xis34losw0.png" alt="image"></p><p><a href="https://blog.csdn.net/qq1808814025/article/details/114752140">如果还有问题就看这个</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Tomcat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSM学习笔记1</title>
    <link href="/2021/07/15/SSM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/"/>
    <url>/2021/07/15/SSM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><blockquote><p>前置小抱怨：由于一直一来我觉得屏幕不小所以都没隐藏收藏栏导致前面很大一部分的网页截图有收藏栏很难看555，后来隐藏了才发现并没有麻烦多少而且好看多了Orz</p></blockquote><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>前置小知识：JavaSE经典三层架构是<strong>web层、业务/service层、DAO层</strong></p><ul><li>web层：获取浏览器提交的数据，或者将数据返回给浏览器</li><li>业务层：专门用来处理业务逻辑</li><li>DAO层：专门用来和数据库进行交互<br><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.4mh4jf0ladm0.png" alt="（从网上随便找来的一张图）"></li></ul><blockquote><p>tips: Ctrl + O快捷重写方法 </p></blockquote><p>新建XML文件时没有spring配置文件的解决方法：<br><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.5idbc1gw6hc0.png" alt="image"><br><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.6dd3x6skkm00.png" alt="image"></p><p>一般习惯于将配置文件命名为<code>applicationContext.xml</code></p><p>结构及XML案例如图：<br><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.22vv14r8sjcw.png" alt="image"></p><p>测试用例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// spring客户端</span><br>        ApplicationContext app = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>        UserDao userDao = (UserDao) app.getBean(<span class="hljs-string">&quot;userDao&quot;</span>);<br>        userDao.save(); <span class="hljs-comment">// save running...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="总结：Spring的开发步骤"><a href="#总结：Spring的开发步骤" class="headerlink" title="总结：Spring的开发步骤"></a>总结：Spring的开发步骤</h3><ol><li>导入Spring的Maven坐标</li><li>创建Bean（即上例结构图中的UserDao和其实现）</li><li>创建配置文件<code>applicationContext.xml</code></li><li>在配置文件中进行配置</li><li>创建ApplicationContext对象以获得Bean</li></ol><h2 id="Spring配置文件"><a href="#Spring配置文件" class="headerlink" title="Spring配置文件"></a>Spring配置文件</h2><h3 id="Bean"><a href="#Bean" class="headerlink" title="Bean"></a>Bean</h3><p>用于配置对象以便交给Spring来创建<br>默认调用类中的<strong>无参构造函数</strong>，如果没有则失败</p><ul><li>id：Bean实例在Spring中的唯一标识</li><li>class：Bean的<strong>全限定名称</strong>（<code>com.aster.test.impl.TestImpl</code>）<h4 id="范围配置"><a href="#范围配置" class="headerlink" title="范围配置"></a>范围配置</h4></li><li>scope：对象的作用范围<br><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.2c5uo1mwzz0g.png" alt="image"></li></ul><p>（singleton即bean只存在一个，即就算多次getBean也是同一地址）</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.3p5u1jgtfly0.png" alt="image"></p><h4 id="生命周期配置"><a href="#生命周期配置" class="headerlink" title="生命周期配置"></a>生命周期配置</h4><ul><li>init-method：指定类中的初始化方法名称</li><li>destroy-method：指定类中的销毁方法名称<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">...</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;init&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;destroy&quot;</span> <span class="hljs-attr">...</span> /&gt;</span><br></code></pre></td></tr></table></figure><h4 id="Bean的三种实例化"><a href="#Bean的三种实例化" class="headerlink" title="Bean的三种实例化"></a>Bean的三种实例化</h4></li><li>无参构造方式实例化<code>&lt;bean id=&quot;...&quot; class=&quot;...&quot;&gt;</code>（其实这个才是重点Orz）</li><li>工厂<strong>静态</strong>方法实例化</li><li>工厂<strong>实例</strong>方法实例化</li></ul><p><strong>例1：</strong> 写了一个静态工厂<code>com.aster.factory.StaticFactory</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StaticFactory</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> UserDao <span class="hljs-title">getUserDao</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> UserDaoImpl();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后，将</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.aster.dao.impl.UserDaoImpl&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>变为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.aster.factory.StaticFactory&quot;</span> <span class="hljs-attr">factory-method</span>=<span class="hljs-string">&quot;getUserDao&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>效果是一样的</p><p><strong>例2：</strong> 又写了个动态工厂<code>com.aster.factory.DynamicFactory</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DynamicFactory</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> UserDao <span class="hljs-title">getUserDao</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> UserDaoImpl();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>由于是动态工厂，所以不能像静态工厂那样直接使用内部的方法，需要先有一个动态工厂的<strong>实例</strong>才行</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;factory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.aster.factory.DynamicFactory&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">factory-bean</span>=<span class="hljs-string">&quot;factory&quot;</span> <span class="hljs-attr">factory-method</span>=<span class="hljs-string">&quot;getUserDao&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><blockquote><p>tips：选中类名右键，有复制引用的选项</p></blockquote><p>简而言之，就是我们程序代码中不用手动getBean获取dao层bean对象，可以由Spring容器来帮我们完成，dao层bean对象可以做为属性注入到service层bean对象中</p><p>下面这两个从知乎找的回答感觉还不错：<br>一、<br><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.545hyn4rjdg0.png" alt="image"><br>二、依赖注入（DI）和控制反转（IOC）基本是一个意思，因为说起来谁都离不开谁。简单来说，a依赖b，但a不控制b的创建和销毁，仅使用b，那么b的控制权交给a之外处理，这叫控制反转（IOC），而a要依赖b，必然要使用b的instance，那么通过a的接口，把b传入；通过a的构造，把b传入；通过设置a的属性，把b传入；这个过程叫依赖注入（DI）。那么什么是IOC Container？随着DI的频繁使用，要实现IOC，会有很多重复代码，甚至随着技术的发展，有更多新的实现方法和方案，那么有人就把这些实现IOC的代码打包成组件或框架，来避免人们重复造轮子。所以实现IOC的组件或者框架，我们可以叫它IOC Container。</p><p>再来看看课里的说法：<br><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.efpiwerst6o.png" alt="image"></p><p>依赖注入有两种方式：</p><ul><li>构造方法</li><li>set方法</li></ul><h4 id="set方法注入"><a href="#set方法注入" class="headerlink" title="set方法注入"></a>set方法注入</h4><p>假设我们现在有DAO层的UserDao和UserDaoImpl，还有业务层的UserService和UserServiceImpl，<strong>在业务层中，我们也想实现一个save方法，方式是调用DAO层的save方法</strong></p><p><strong>1.都使用Spring，但是不使用依赖注入：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// UserServiceImpl.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span> </span>&#123;<br>        ApplicationContext app = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>        UserDao userDao = (UserDao) app.getBean(<span class="hljs-string">&quot;userDao&quot;</span>);<br>        userDao.save(); <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.aster.dao.UserDao.UserDaoImpl&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.aster.service.UserService.UserServiceImpl&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>这样一来有一个问题，就是UserDao和UserService的耦合度有点高了，目前是在UserService中注入了它所依赖的UserDao，我们要想办法把它们<strong>解耦</strong>——<strong>利用中间件Spring容器来耦合他们</strong>，这样外部的UserDao和UserService的耦合度就变低了（不知道我的理解对不对）</p><p>因为依然存在一定的依赖关系的，所以就算依赖注入，还是需要在UserService中通过set或者构造方法来和UserDao“产生联系”的，但是区别是，<strong>之前是UserService从Spring中自己获取UserDao，而现在UserService只需要躺平，等着Spring把UserDao送上门来即可；因为在xml文件中做了相关的声明，所以Spring知道应该怎么把合适的UserDao注入UserService</strong></p><p><strong>使用依赖注入：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// UserServiceImpl.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> UserDao userDao; <span class="hljs-comment">// 声明一个实例以便使用set</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserDao</span><span class="hljs-params">(UserDao userDao)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userDao = userDao;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span> </span>&#123;<br>        userDao.save(); <span class="hljs-comment">// 在使用了依赖注入之后，这里直接使用userDao就行，Spring已经自动帮你把userDao注入了</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.aster.dao.UserDao.UserDaoImpl&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.aster.service.impl.UserServiceImpl&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDao&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>注意！</strong></p><ol><li>上面的xml中，property的name是<strong>set方法名中，“set”之后的部分首字母变为小写</strong> （set<strong>UserDao</strong> –&gt; <strong>U</strong>serDao –&gt; <strong>u</strong>serDao）</li><li>ref（顾名思义，引用）是xml中<strong>被注入的bean的id</strong></li></ol><blockquote><p>小技巧：要键入例如A = B.get(…)时，打B.get(…).var可以自动补全出A来</p></blockquote><p>然后，运行一下下面这个demo，可以发现确实输出了save running…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ApplicationContext app = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>        UserService userService = (UserService) app.getBean(<span class="hljs-string">&quot;userService&quot;</span>);<br>        userService.save(); <span class="hljs-comment">// save running...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="使用P命名空间注入"><a href="#使用P命名空间注入" class="headerlink" title="使用P命名空间注入"></a>使用P命名空间注入</h5><p>本质上也是set方法注入（但是还是子标签形式的set方法注入更常用啦，因为看起来比较清楚）<br>首先，在xml的<code>&lt;beans&gt;</code>标签内引入P命名空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">&lt;beans<br>    ...<br>    xmlns:p=&quot;http://www.springframework.org/schema/p&quot;<br>    ...&gt;<br></code></pre></td></tr></table></figure><p>其次，需要修改注入方式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.aster.service.impl.UserServiceImpl&quot;</span> <span class="hljs-attr">p:userDao-ref</span>=<span class="hljs-string">&quot;userDao&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="构造方法注入"><a href="#构造方法注入" class="headerlink" title="构造方法注入"></a>构造方法注入</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> UserDao userDao;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UserServiceImpl</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UserServiceImpl</span><span class="hljs-params">(UserDao userDao)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userDao = userDao;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span> </span>&#123;<br>        userDao.save();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.aster.service.impl.UserServiceImpl&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDao&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- arg即argument，参数 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>注意！</strong></p><ol><li>上面的xml中，constructor-arg的name是<strong>构造函数中的参数名</strong> </li><li>ref（顾名思义，引用）是xml中<strong>被注入的bean的id</strong></li></ol><h4 id="依赖注入的数据类型"><a href="#依赖注入的数据类型" class="headerlink" title="依赖注入的数据类型"></a>依赖注入的数据类型</h4><ul><li>普通类型（如：int）</li><li>引用类型（如：类）</li><li>集合</li></ul><p>下面以set方法为例来演示一下<br>比如，在DAO层的save方法时输出用户姓名和年龄<br>由于都是普通类型，所以xml中的<code>ref</code>即引用reference要改为<code>value</code>即值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDao</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;save running...&quot;</span>);<br>        System.out.println(name + <span class="hljs-string">&quot;, &quot;</span> + age);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.aster.dao.impl.UserDaoImpl&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;十六夜紫菀&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;18&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>再来演示一下注入<strong>集合</strong><br>（假设我们有一个用户类com.aster.domain.User，其中有姓名和地址并写了getter sette toString）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDao</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> List&lt;String&gt; strList;<br>    <span class="hljs-keyword">private</span> Map&lt;String, User&gt; userMap;<br>    <span class="hljs-keyword">private</span> Properties properties;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setStrList</span><span class="hljs-params">(List&lt;String&gt; strList)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.strList = strList;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserMap</span><span class="hljs-params">(Map&lt;String, User&gt; userMap)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userMap = userMap;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setProperties</span><span class="hljs-params">(Properties properties)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.properties = properties;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;save running...&quot;</span>);<br>        System.out.println(strList);<br>        System.out.println(userMap);<br>        System.out.println(properties);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 好人做到底，干脆给User也顺便注入一下~~~ --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.aster.domain.User&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;十六夜紫菀&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;addr&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;和十六夜莲一起搭建的深山小屋&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.aster.domain.User&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;十六夜莲&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;addr&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;和十六夜紫菀一起搭建的深山小屋&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.aster.dao.impl.UserDaoImpl&quot;</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;strList&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>十六夜紫菀<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>超级超级喜欢<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>十六夜莲<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userMap&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;uM1&quot;</span> <span class="hljs-attr">value-ref</span>=<span class="hljs-string">&quot;user1&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;uM2&quot;</span> <span class="hljs-attr">value-ref</span>=<span class="hljs-string">&quot;user2&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;properties&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;p1&quot;</span>&gt;</span>izayoi<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;p2&quot;</span>&gt;</span>aster<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;p3&quot;</span>&gt;</span>lotus<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.aster.service.impl.UserServiceImpl&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDao&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>↑ 讲解</strong></p><ol><li>由于strList是List类型，所以在标签之间写<code>&lt;list&gt;</code>来注入List值</li><li>由于Map的元素本质是<strong>键值对（在Java中有Entry类型来表示）</strong>，所以写<code>&lt;entry&gt;</code>来注入键值对；又众所周知，键值对由key和value组成，又双叒叕众所周知，ref是<strong>引用</strong>的意思，所以上面的xml应该不难懂了⑧（enrty里的key是到时候注入到map里的key名）</li><li>可能忘了Properties是啥东西，它和Map很像很像，只不过都是字符串.prop的值要在标签之间写（其实打value后就会发现IDEA没反应）</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">save running<span class="hljs-built_in">..</span>.<br>[十六夜紫菀, 超级超级喜欢, 十六夜莲]<br>&#123;<span class="hljs-attribute">uM1</span>=User&#123;<span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;十六夜紫菀&#x27;</span>, <span class="hljs-attribute">addr</span>=<span class="hljs-string">&#x27;和十六夜莲一起搭建的深山小屋&#x27;</span>&#125;, <span class="hljs-attribute">uM2</span>=User&#123;<span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;十六夜莲&#x27;</span>, <span class="hljs-attribute">addr</span>=<span class="hljs-string">&#x27;和十六夜紫菀一起搭建的深山小屋&#x27;</span>&#125;&#125;<br>&#123;<span class="hljs-attribute">p1</span>=izayoi, <span class="hljs-attribute">p2</span>=aster, <span class="hljs-attribute">p3</span>=lotus&#125;<br></code></pre></td></tr></table></figure><h3 id="引入其他配置文件"><a href="#引入其他配置文件" class="headerlink" title="引入其他配置文件"></a>引入其他配置文件</h3><p>已经可以发现，<code>applicationContext.xml</code>一不小心就会写得很长很长，而且也不好维护</p><p>可以拆成多个配置文件后，在主配置文件中进行引用：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span>&gt;</span><br>    ...<br>    <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;applicationContext-xxx.xml&quot;</span>/&gt;</span><br>    ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Spring相关API"><a href="#Spring相关API" class="headerlink" title="Spring相关API"></a>Spring相关API</h2><h3 id="ApplicationContext接口的实现类"><a href="#ApplicationContext接口的实现类" class="headerlink" title="ApplicationContext接口的实现类"></a>ApplicationContext接口的实现类</h3><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.ypivedindm8.png" alt="image"></p><h3 id="getBean"><a href="#getBean" class="headerlink" title="getBean()"></a>getBean()</h3><p><a href="https://www.bilibili.com/video/BV1WZ4y1P7Bp?p=20">P20</a></p><h3 id="总结-重点API"><a href="#总结-重点API" class="headerlink" title="总结-重点API"></a>总结-重点API</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">ApplicationContext app = <span class="hljs-keyword">new</span> ClasspathXmlApplicationContext(<span class="hljs-string">&quot;xxx.xml&quot;</span>);<br>app.getBean(<span class="hljs-string">&quot;id&quot;</span>); <span class="hljs-comment">// 返回值需要强转，但是在容器内允许存在多个相同的对象，只要id不一样就行</span><br>app.getBean(ClassName.class); <span class="hljs-comment">// 返回值不需要强转，但是容器内只能存在一个</span><br></code></pre></td></tr></table></figure><h2 id="数据源"><a href="#数据源" class="headerlink" title="数据源"></a>数据源</h2><h3 id="理解数据源（连接池）"><a href="#理解数据源（连接池）" class="headerlink" title="理解数据源（连接池）"></a>理解数据源（连接池）</h3><p>数据源是为了提高程序性能出现的。程序运行时，实现实例化数据源，初始化部分连接资源；使用连接资源时，从数据源中获取，使用完毕后再将连接资源归还给数据源。【可以理解为十六夜紫菀和十六夜莲去幻想乡蜜月旅行（雾），他们可以骑幻想乡的共享单车，在离开幻想乡的时候归还共享单车即可】</p><p>常见的有：DBCP, C3P0, BoneCP, Druid等</p><h3 id="配置数据源"><a href="#配置数据源" class="headerlink" title="配置数据源"></a>配置数据源</h3><ol><li>导入数据源的坐标和数据库驱动坐标</li><li>创建数据源对象</li><li>设置数据源的基本连接数据（数据库驱动 地址 用户名密码……）</li><li>使用数据源获取连接资源和归还连接资源</li></ol><p>下面分别给出c3p0和druid的测试案例<br>maven的配置文件里，注意mysql-java-connector的版本要与系统安装的mysql相一致<br>（善用 <a href="https://mvnrepository.com/%EF%BC%89">https://mvnrepository.com/）</a><br>（另外了别忘了在IDEA建立一个MySQL数据源并建立一个test的架构……我太蠢了）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.21<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>c3p0<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>c3p0<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DataSourceTest</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-comment">// c3p0</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span> <span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        ComboPooledDataSource dataSource = <span class="hljs-keyword">new</span> ComboPooledDataSource();<br>        dataSource.setDriverClass(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>        <span class="hljs-comment">// com.mysql.jdbc.Driver也是可以的，但是是旧版，可能有兼容性问题</span><br>        dataSource.setJdbcUrl(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test?serverTimezone=UTC&quot;</span>);<br>        dataSource.setUser(<span class="hljs-string">&quot;root&quot;</span>);<br>        dataSource.setPassword(<span class="hljs-string">&quot;root&quot;</span>);<br><br>        Connection connection = dataSource.getConnection();<br>        System.out.println(connection);<br>        connection.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-comment">// Druid</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span> <span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        DruidDataSource dataSource = <span class="hljs-keyword">new</span> DruidDataSource();<br>        dataSource.setDriverClassName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>        dataSource.setUrl(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test?serverTimezone=UTC&quot;</span>);<br>        dataSource.setUsername(<span class="hljs-string">&quot;root&quot;</span>);<br>        dataSource.setPassword(<span class="hljs-string">&quot;root&quot;</span>);<br><br>        DruidPooledConnection connection = dataSource.getConnection();<br>        System.out.println(connection);<br>        connection.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/video/BV1WZ4y1P7Bp?p=25">（暂且跳过数据源）</a></p><h2 id="注解开发"><a href="#注解开发" class="headerlink" title="注解开发"></a>注解开发</h2><p>相对于xml，更方便，所以大家喜欢注解开发</p><h3 id="Spring原始注解"><a href="#Spring原始注解" class="headerlink" title="Spring原始注解"></a>Spring原始注解</h3><p>主要是替代<code>&lt;Bean&gt;</code>的配置<br><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.6lxp0yc72pc0.png" alt="image"></p><p>下面以经典的由 userDao，调用了userDao的save方法的userService和用于测试的userController 组成的测试案例来举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// UserDaoImpl.java</span><br><span class="hljs-comment">// &lt;bean id=&quot;userDao&quot; class=&quot;com.aster.dao.impl.UserDaoImpl&quot;/&gt;</span><br><span class="hljs-comment">// 等价于下面这句话</span><br><span class="hljs-meta">@Component(&quot;userDao&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDao</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;save running...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// UserServiceImpl.java</span><br><span class="hljs-comment">// &lt;bean id=&quot;userService&quot; class=&quot;com.aster.service.impl.UserServiceImpl&quot;&gt;&lt;/bean&gt;</span><br><span class="hljs-comment">// 等价于下面这句话</span><br><span class="hljs-meta">@Component(&quot;userService&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>&#123;<br><br>    <span class="hljs-comment">// &lt;property name=&quot;userDao&quot; ref=&quot;userDao&quot;/&gt;</span><br>    <span class="hljs-comment">// 等价于下面这两句话</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-meta">@Qualifier(&quot;userDao&quot;)</span><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserDao</span><span class="hljs-params">(UserDao userDao)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userDao = userDao;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span> <span class="hljs-params">()</span> </span>&#123;<br>        userDao.save();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>另外，使用注解开发的时候，需要在xml中<strong>配置组件扫描</strong>，让Spring去找我们的注解（“指定哪个包及其子包下的Bean需要进行扫描以便识别使用注解配置的类、字段和方法”）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  配置组件扫描（告诉Spring去找我的注解  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.aster&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br>`base-package`：配置基本包。Spring会扫描基本包及其子包<br></code></pre></td></tr></table></figure><p>顺便也贴一下测试程序吧</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// UserController.java</span><br>...<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ApplicationContext app = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>        UserService userService = app.getBean(UserService.class);<br>        userService.save();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>根据上面的那个表格，为了便于区分，可以分别在dao, service和web层中将<code>@Component</code>写为对应形式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository(&quot;userDao&quot;)</span><br><span class="hljs-meta">@Service(&quot;userService&quot;)</span><br>(示例程序中的web层是一个假的web层啦，不然就<span class="hljs-meta">@Controller(&quot;userController&quot;)</span>)<br></code></pre></td></tr></table></figure><p>可以把<code>@Autowired</code>和<code>@Qualifier</code>之下的set方法删掉：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-meta">@Qualifier(&quot;userDao&quot;)</span><br><span class="hljs-keyword">private</span> UserDao userDao;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span> <span class="hljs-params">()</span> </span>&#123;<br>    userDao.save();<br>&#125;<br></code></pre></td></tr></table></figure><p>普通数据的注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Value(&quot;google.com&quot;)</span><br><span class="hljs-keyword">private</span> String url; <span class="hljs-comment">// google.com</span><br></code></pre></td></tr></table></figure><blockquote><p>又乱记一个小技巧：IDEA里打/之后会自动补全单标签/&gt;</p></blockquote><h3 id="Spring新注解"><a href="#Spring新注解" class="headerlink" title="Spring新注解"></a>Spring新注解</h3><p>之前略过了数据源，正好实验室在做的小程序用到了druid，这里先写一下之前没写的Spring配置druid数据源：</p><p>一般在开发中，会把配置beans的配置文件和配置数据源的配置文件<strong>分离开</strong>，便于维护（即分开<code>applicationContext.xml</code>和<code>jdbc.properties</code>），那么需要把<code>jdbc.properties</code><strong>导入到</strong><code>applicationContext.xml</code>里：（当然了，以后SpringBoot肯定就不导入了，但还是学一学）</p><p>导入之前，需要引入context命名空间和约束路径：</p><ul><li>命名空间：<code>xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</code></li><li>约束路径：<code>http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</code></li></ul><p>导入时，用到了SPEL（Spring表达式）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pro">jdbc.driver&#x3D;com.mysql.cj.jdbc.Driver<br>jdbc.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;test<br>jdbc.username&#x3D;root<br>jdbc.password&#x3D;root<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  配置组件扫描（告诉Spring去找我的注解  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.aster&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  加载外部的配置文件  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--  这里的name就是按照druid里set方法去掉set之后来写的  --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span> <span class="hljs-params">()</span> </span>&#123;<br>    ApplicationContext app = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>    DataSource dataSource = app.getBean(DataSource.class);<br>    Connection connection = dataSource.getConnection();<br>    System.out.println(connection);<br>    connection.close();<br>&#125;<br></code></pre></td></tr></table></figure><p>在原始注解中，配置文件中的有一些部分仍然是无法省去的，比如上面的导入外部配置文件、外部类的语句，以及组件扫描和import的语句；如果想替代掉他们，需要用到新注解，代码如下：</p><p>（很难写清楚，所以干脆看代码咯）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//SpringConfiguration.java</span><br><span class="hljs-keyword">package</span> com.aster.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.*;<br><br><span class="hljs-meta">@Configuration</span> <span class="hljs-comment">// 声明这个类是Spring的核心配置类</span><br><span class="hljs-meta">@ComponentScan(&quot;com.aster&quot;)</span> <span class="hljs-comment">// 配置组件扫描</span><br><span class="hljs-meta">@Import(DataSourceConfiguration.class)</span> <span class="hljs-comment">// 引入别的配置文件</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringConfiguration</span> </span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//DataSourceConfiguration.java</span><br><span class="hljs-keyword">package</span> com.aster.config;<br><br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSource;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.PropertySource;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span> <span class="hljs-comment">// 导入外部配置</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DataSourceConfiguration</span> </span>&#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String driver;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String url;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-comment">// Spring会将这个方法的返回值以name=&quot;dataSource&quot;存到Spring容器中</span><br>    <span class="hljs-meta">@Bean(&quot;dataSource&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> DataSource <span class="hljs-title">getDataSource</span> <span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>        DruidDataSource dataSource = <span class="hljs-keyword">new</span> DruidDataSource();<br>        dataSource.setDriverClassName(driver);<br>        dataSource.setUrl(url);<br>        dataSource.setUsername(username);<br>        dataSource.setPassword(password);<br>        <span class="hljs-keyword">return</span> dataSource;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//UserController.java</span><br> ...<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>        <span class="hljs-comment">// 注意！由于已经不是使用xml配置了，所以这里有变化！</span><br>        ApplicationContext app = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext(SpringConfiguration.class);<br>        UserService userService = app.getBean(UserService.class);<br>        userService.save();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（我是不会说上面的程序报错了我还不知道错在哪儿的！）</p><p>上述程序中的<code>@Import</code>参数其实是一个数组，可以同时导入多个配置文件：<code>@Import(&#123;a.class, b.class, c.class&#125;)</code></p><p>目前的项目结构：</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.ud5vtutzirk.png" alt="image"></p><h2 id="JUnit"><a href="#JUnit" class="headerlink" title="JUnit"></a>JUnit</h2><p>（摸了，用到再来补上）</p><h2 id="Spring集成web环境"><a href="#Spring集成web环境" class="headerlink" title="Spring集成web环境"></a>Spring集成web环境</h2><p>之前都只是拿假的web层来测试，这次要来真的咯~</p><p>（从这里开始，网课又回到了xml开发，我就还用注解开发吧！）</p><h3 id="前置JavaWeb知识"><a href="#前置JavaWeb知识" class="headerlink" title="前置JavaWeb知识"></a>前置JavaWeb知识</h3><p>（谁让我是弹射起步呢，害）</p><p>动态Java项目的目录：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-comment">-- 项目根目录</span><br><span class="hljs-comment">-- WEB-INF目录</span><br><span class="hljs-comment">-- web.xml：web项目的核心配置文件</span><br><span class="hljs-comment">-- classes目录：放置字节码文件的目录</span><br><span class="hljs-comment">-- lib目录：放置依赖的jar包</span><br></code></pre></td></tr></table></figure><p>新建一个模块，注意咯，是<strong>模块</strong></p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.neh2fbvmx4w.png" alt="image"></p><h3 id="坐标导入"><a href="#坐标导入" class="headerlink" title="坐标导入"></a>坐标导入</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h3><p>新建一个JavaEE的web模块之后，依然是按照之前的结构，只不过web包里的UserController变成UserServelet了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// UserServlet.java</span><br><span class="hljs-keyword">package</span> com.aster.web;<br><br><span class="hljs-keyword">import</span> ...<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        ApplicationContext app = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext(SpringConfiguration.class);<br>        UserService userService = app.getBean(UserService.class);<br>        userService.save();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后，配置一下<code>web.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>UserServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.aster.web.UserServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>UserServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/userServlet<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><p>之后，配置好Tomcat后点击右上角的运行，浏览器会打开Tomcat主页，继续访问<code>/userServlet</code>即可抵达UserServlet了（因为我们啥也没写，所以浏览器自然是一片空白，但是此时IDEA的控制台会输出<code>save running...</code>）</p><h3 id="ContextLoaderListener监听器"><a href="#ContextLoaderListener监听器" class="headerlink" title="ContextLoaderListener监听器"></a>ContextLoaderListener监听器</h3><p>之前，每次获取Bean的时候都要<code>ApplicationContext app = new AnnotationConfigApplicationContext(SpringConfiguration.class);</code>，很麻烦会导致配置文件加载多次，应用上下文加载多次</p><blockquote><p>又到了我不会的JavaWeb小知识时间：在web项目中，可以使用<code>ServletContextListener</code>监听web应用的启动，可以在web应用启动时，就加载Spring配置文件，创建ApplicationContext并存储在最大域<code>servletContext</code>中</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// ContextLoaderListener.java</span><br><span class="hljs-keyword">package</span> com.aster.listener;<br><br><span class="hljs-keyword">import</span> ...<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ContextLoaderListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ServletContextListener</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">contextInitialized</span><span class="hljs-params">(ServletContextEvent servletContextEvent)</span> </span>&#123;<br>        ApplicationContext app = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext(SpringConfiguration.class);<br>        <span class="hljs-comment">// 将Spring的应用上下文对象存储到serveletContext域中</span><br>        ServletContext servletContext = servletContextEvent.getServletContext();<br>        servletContext.setAttribute(<span class="hljs-string">&quot;app&quot;</span>, app);<br>        System.out.println(<span class="hljs-string">&quot;Spring容器创建完毕&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">contextDestroyed</span><span class="hljs-params">(ServletContextEvent servletContextEvent)</span> </span>&#123;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>需要配置一下上面的监听器：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- web.xml --&gt;</span><br>...<br><span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>com.aster.listener.ContextLoaderListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br>...<br></code></pre></td></tr></table></figure><p>然后在UserServlet里调用上下文对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">//ApplicationContext app = new AnnotationConfigApplicationContext(SpringConfiguration.class);</span><br>        ServletContext servletContext = <span class="hljs-keyword">this</span>.getServletContext();<br>        ApplicationContext app = (ApplicationContext) servletContext.getAttribute(<span class="hljs-string">&quot;app&quot;</span>);<br>        UserService userService = app.getBean(UserService.class);<br>        userService.save();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="web-xml设置全局参数"><a href="#web-xml设置全局参数" class="headerlink" title="web.xml设置全局参数"></a>web.xml设置全局参数</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>name<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>value<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">...<br>ServletContext servletContext = <span class="hljs-keyword">this</span>.getServletContext();<br>String s = servletContext.getInitParameter(<span class="hljs-string">&quot;name&quot;</span>);<br>...<br></code></pre></td></tr></table></figure><h3 id="tip"><a href="#tip" class="headerlink" title="tip"></a>tip</h3><p>上面的项目里，app显然是和”app”耦合死的，要是名字很长而且在很多地方用到的话，会很麻烦，所以最好也解耦，即用到app的时候，不需要用到”app”这个名字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//WebApplicationContextUtils.java</span><br><br><span class="hljs-comment">// 建一个获取webapp的工具类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebApplicationContextUtils</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ApplicationContext <span class="hljs-title">getWebApplicationContext</span> <span class="hljs-params">(ServletContext servletContext)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (ApplicationContext) servletContext.getAttribute(<span class="hljs-string">&quot;app&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        ServletContext servletContext = <span class="hljs-keyword">this</span>.getServletContext();<br>        <br>        <span class="hljs-comment">// 注意下面这句话，没有用到&quot;app&quot;哦</span><br>        ApplicationContext app = WebApplicationContextUtils.getWebApplicationContext(servletContext);<br>        <br>        UserService userService = app.getBean(UserService.class);<br>        userService.save();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Spring提供的监听器"><a href="#Spring提供的监听器" class="headerlink" title="Spring提供的监听器"></a>Spring提供的监听器</h3><p>没错，之前那个自己写的白写了（高情商：加深理解）</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.14iuwycfeqrg.png" alt="image"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--  输入Context……就提示了  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br></code></pre></td></tr></table></figure><p>由于我用的注解，这里会遇到一个小问题，启动时，项目会默认在WEB-INF目录下寻找<code>applicationContext.xml</code>，如果找不到就报错。虽然我并没有用到这个文件，但姑且在resources下创建一个空白的<code>applicationContext.xml</code>，再加上这一局话（尽量往前加，名字随便）</p><p><strong>（后记：再后来发现只要用不到这个applicationContext.xml，不加这一段也不会报错。可能当时是别的原因报错Orz）</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- web.xml --&gt;</span><br>...<br><span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h1 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h1><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.3wfjv9skmq80.png" alt="Spring MVC的开发步骤"></p><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>客户端发起请求，服务端接收请求，执行逻辑并进行视图跳转</p><h3 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h3><ol><li>导入SpringMVC相关坐标</li><li>配置SpringMVC核心控制器DispatcherServlet</li><li>创建Controler类视图和界面</li><li>使用注解配置Controller类中业务方法的映射地址</li><li>配置SpringMVC核心文件spring-mvc.xml</li><li>客户端发起请求测试</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>注意仔细看程序哦，就懒得写额外的字了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    配置SpringMVC的前端控制器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--        配置MVC的配置文件的位置--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--        服务器启动时就加载--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p>一般在写MVC时，<strong>web层</strong>的包名都叫<strong>controller</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.aster.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-comment">// 添加到容器</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br>    <span class="hljs-comment">// 配置映射关系</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/quick&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">save</span> <span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Controller save running ...&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success.jsp&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;Hello, World!&lt;/h1&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>spring-mvc.xml（一般和Spring的分开）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">...<br><span class="hljs-comment">&lt;!--Controller的组件扫描--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.aster.controller&quot;</span>/&gt;</span><br>...<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.69t09i7ac340.png" alt="image"></p><p>运行项目后，进入/quick页面就能看见Hello, World!啦！</p><blockquote><p>注意了！有时候网页打不开可能是配置文件里哪里写错了</p></blockquote><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.18o4oq9acow0.png" alt="刚才的项目的流程"></p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.38be7n11c540.png" alt="SpringMVC流程图"></p><h2 id="SpringMVC组件解析"><a href="#SpringMVC组件解析" class="headerlink" title="SpringMVC组件解析"></a>SpringMVC组件解析</h2><h3 id="SpringMVC的执行流程"><a href="#SpringMVC的执行流程" class="headerlink" title="SpringMVC的执行流程"></a>SpringMVC的执行流程</h3><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.mo6mqejbpog.png" alt="image"></p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.4qho60va06g0.png" alt="image"></p><h2 id="SpringMVC注解解析"><a href="#SpringMVC注解解析" class="headerlink" title="SpringMVC注解解析"></a>SpringMVC注解解析</h2><h3 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h3><p><strong>作用：</strong>用于建立请求URL和处理请求的方法之间的对应关系</p><p><strong>位置：</strong></p><ul><li>放在类上时，作为请求URL的第一级访问目录，可以不写</li><li>放在方法上时，作为接在一级目录后的二级目录</li></ul><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/quick&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">save</span> <span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Controller save running ...&quot;</span>);<br>        <span class="hljs-comment">// 这里多加了一层user，所以加上/让Controller从根目录找jsp</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/success.jsp&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.533e5wmnycg0.png" alt="image"></p><p><strong>属性：</strong></p><ul><li>value：用于指定请求的URL（只有一个属性时，默认是value）</li><li>method：用于指定请求的方式<ul><li>method 的预设值是枚举方式的：<code>@RequestMapping(value = &quot;/quick&quot;, method = RequestMethod.GET)</code></li></ul></li><li>params：用于指定限制请求参数的条件（支持简单的表达式）<ul><li>例如<code>params = &#123;&quot;accountName&quot;&#125;</code>表示请求中必须有accountName</li><li><code>params = &#123;&quot;money!100&quot;&#125;</code>表示请求参数中money不能是100</li></ul></li></ul><h3 id="组件扫描"><a href="#组件扫描" class="headerlink" title="组件扫描"></a>组件扫描</h3><p>组件扫描也有这种方法，我就不写了，提一嘴</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.62wkz49s3ps0.png" alt="image"></p><h3 id="XML配置解析"><a href="#XML配置解析" class="headerlink" title="XML配置解析"></a>XML配置解析</h3><p>具体挺麻烦，记个结论就好，详见<a href="%5B%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98%E6%9C%80%E5%85%A8SSM%E6%A1%86%E6%9E%B6%E6%95%99%E7%A8%8B%7CSpring+SpringMVC+MyBatis%E5%85%A8%E8%A6%86%E7%9B%96_SSM%E6%95%B4%E5%90%88_%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9_bilibili%5D(https://www.bilibili.com/video/BV1WZ4y1P7Bp?p=49)">这个</a></p><p>一般来说，.jsp文件都放在<code>webapp : jsp</code>文件夹下，每个Controller都要写<code>return &quot;/jsp/xxx.jsp&quot;</code>，有点小麻烦，可以让mvc自动添加前后缀，这样一来只写<code>return xxx</code>就行</p><p>但我觉得这样不是很直观，不想用（</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.3qzb9u92jls0.png" alt="image"></p><h2 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h2><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.3wqkvir3pl40.png" alt="image"></p><h2 id="SpringMVC的数据响应"><a href="#SpringMVC的数据响应" class="headerlink" title="SpringMVC的数据响应"></a>SpringMVC的数据响应</h2><ol><li><strong>页面跳转</strong><ul><li>直接返回字符串</li><li>通过ModelAndView对象返回</li></ul></li><li><strong>回写数据</strong><ul><li>直接返回字符串</li><li>返回对象或集合</li></ul></li></ol><h3 id="页面跳转"><a href="#页面跳转" class="headerlink" title="页面跳转"></a>页面跳转</h3><h4 id="直接返回字符串"><a href="#直接返回字符串" class="headerlink" title="直接返回字符串"></a>直接返回字符串</h4><p>直接返回字符串时，会将返回的字符串与视图解析器的<strong>前后缀</strong>拼接后跳转</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.ktfblejri5s.png" alt="image"></p><h4 id="返回ModelAndView对象"><a href="#返回ModelAndView对象" class="headerlink" title="返回ModelAndView对象"></a>返回ModelAndView对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/quick2&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">save2</span> <span class="hljs-params">()</span> </span>&#123;<br>    ModelAndView modelAndView = <span class="hljs-keyword">new</span> ModelAndView();<br>    <span class="hljs-comment">// 设置模型数据</span><br>    modelAndView.addObject(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;aster&quot;</span>);<br>    <span class="hljs-comment">// 设置视图名称</span><br>    modelAndView.setViewName(<span class="hljs-string">&quot;/jsp/success.jsp&quot;</span>);<br>    <span class="hljs-keyword">return</span> modelAndView;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Success!&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;Success!Welcome, $&#123;username&#125;&lt;/h1&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.6n4bvtmjl8o0.png"></p><p>也可以不new一个对象，<strong>直接写在参数里</strong>，Spring会<strong>自动</strong>生成一个对象并注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/quick3&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">save3</span> <span class="hljs-params">(ModelAndView modelAndView)</span> </span>&#123;<br>    <span class="hljs-comment">// 设置模型数据</span><br>    modelAndView.addObject(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;aster&quot;</span>);<br>    <span class="hljs-comment">// 设置视图名称</span><br>    modelAndView.setViewName(<span class="hljs-string">&quot;/jsp/success.jsp&quot;</span>);<br>    <span class="hljs-keyword">return</span> modelAndView;<br>&#125;<br></code></pre></td></tr></table></figure><p>也能这么写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/quick4&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">save4</span> <span class="hljs-params">(Model model)</span> </span>&#123;<br>    model.addAttribute(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;aster&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/jsp/success.jsp&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>再提一嘴一个不常用的方式：</p><p>用到了request，依然是在形参里写上，SpringMVC会帮我们注入Tomcat的request（因为不够解耦所以不常用咯）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/quick5&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">save5</span> <span class="hljs-params">(HttpServletRequest request)</span> </span>&#123;<br>    request.setAttribute(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;十六夜紫菀&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/jsp/success.jsp&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="回写数据"><a href="#回写数据" class="headerlink" title="回写数据"></a>回写数据</h3><h4 id="直接回写字符串"><a href="#直接回写字符串" class="headerlink" title="直接回写字符串"></a>直接回写字符串</h4><blockquote><p>在web基础阶段，客户端访问服务器端想回写字符串，只需要<code>response.getWriter.print(&quot;Hello&quot;)</code>即可</p></blockquote><p>那么，可以：</p><p><strong>1.（不推荐）</strong>通过SpringMVC注入response对象，使用<code>response.getWriter.print(&quot;Hello&quot;)</code>回写数据；此时不需要视图跳转，业务返回值为void</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/quick6&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save6</span> <span class="hljs-params">(HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    response.getWriter().print(<span class="hljs-string">&quot;hello&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.34a9bglqsig0.png" alt="image"></p><p>但是正如页面跳转里提到的，这种方法不够解耦，建议用下面这种：</p><p><strong>2.<strong>和页面跳转的直接返回字符串一样，直接返回字符串，但是为了</strong>让Spring把这种方式和页面跳转区分开</strong>，需要加注解<code>@ResponseBody</code>告诉Spring，该方法返回的字符串不是跳转，是<strong>直接在HTTP响应体中返回</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/quick7&quot;)</span><br><span class="hljs-meta">@ResponseBody</span> <span class="hljs-comment">// 告知SpringMVC，不进行页面跳转，直接进行数据响应</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">save7</span> <span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>应用：返回json格式</strong></p><p>（建了个com.aster.domain.User用于模拟一个用户，实际中一般是从数据库查询）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/quick8&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">save8</span> <span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException </span>&#123;<br>    User user = <span class="hljs-keyword">new</span> User();<br>    user.setUsername(<span class="hljs-string">&quot;Lotus&quot;</span>);<br>    user.setAge(<span class="hljs-number">16</span>);<br>    <span class="hljs-comment">// 使用json转换工具将对象转为json格式的字符串</span><br>    ObjectMapper objectMapper = <span class="hljs-keyword">new</span> ObjectMapper();<br>    <span class="hljs-keyword">return</span> objectMapper.writeValueAsString(user);<br>&#125;<br></code></pre></td></tr></table></figure><p>需要导入转换工具的坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-annotations<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.3wt51d74eba0.png" alt="image"></p><h4 id="返回对象或集合"><a href="#返回对象或集合" class="headerlink" title="返回对象或集合"></a>返回对象或集合</h4><p><strong>1.（不推荐）</strong>我们想要返回对象或集合时，SpringMVC能自动帮我们转换成json格式的字符串</p><p>那么我们要<strong>提前配置好SpringMVC的RequestMappingHandlerAdapter</strong>（处理器适配器），让HandleAdapter学会Jackson转换器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    配置处理器映射器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;messageConverters&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>@ResponseBody</code>依然需要，因为这里是SpringMVC自动帮忙转成了字符串而已，本质还是返回字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/quick9&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">save9</span> <span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException </span>&#123;<br>    User user = <span class="hljs-keyword">new</span> User();<br>    user.setUsername(<span class="hljs-string">&quot;Lotus&quot;</span>);<br>    user.setAge(<span class="hljs-number">16</span>);<br>    <span class="hljs-keyword">return</span> user;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2.<strong>上面的方法有点麻烦，用</strong>mvc注解驱动</strong><code>&lt;mvc:annotation-driven/&gt;</code>会简单一点</p><p>在SpringMVC的三大组件中，<strong>处理器映射器、处理器适配器、视图解析器</strong>被称为SpringMVC的三大组件</p><p>使用<code>&lt;mvc:annotation-driven/&gt;</code>自动加载RequestMappingHandlerMapping（处理器映射器）、RequestMappingHandlerAdapter（处理器适配器）；可以在spring-mvc.xml中使用<code>&lt;mvc:annotation-driven/&gt;</code>替代注解处理器和适配器的配置</p><p><strong>同时</strong>，使用<code>&lt;mvc:annotation-driven/&gt;</code>时，默认底层就会<strong>集成Jackson</strong>进行对象或集合的json格式字符串转换</p><p>————————————————</p><p>别忘了导入mvn命名空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/context</span></span><br><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/mvc</span></span><br><span class="hljs-tag"><span class="hljs-string">       http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span><br><span class="hljs-tag"><span class="hljs-string">       &quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  Controller的组件扫描  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.aster.controller&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!--  mvc的注解驱动 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其他的和 <strong>1.</strong> 一样，是不是简单了呢~</p><p><strong>这句注解驱动很重要，以后的mvc配置文件都别忘了写哦</strong></p><h2 id="SpringMVC的请求"><a href="#SpringMVC的请求" class="headerlink" title="SpringMVC的请求"></a>SpringMVC的请求</h2><h3 id="获得请求参数"><a href="#获得请求参数" class="headerlink" title="获得请求参数"></a>获得请求参数</h3><blockquote><p>客户端请求参数的格式是<code>name=value&amp;name=value... ...</code></p><p>服务器端要获得请求的参数，有时还需要进行数据的封装</p></blockquote><p>SpringMVC可以接收如下类型的数据：</p><ul><li>基本类型数据</li><li>POJO类型参数（简单JavaBean）</li><li>数组类型参数</li><li>集合类型参数</li></ul><h4 id="获得基本类型参数"><a href="#获得基本类型参数" class="headerlink" title="获得基本类型参数"></a>获得基本类型参数</h4><p>当Controller中业务方法的<strong>参数名</strong>与<strong>请求参数的name</strong>一致时，参数值会<strong>自动映射匹配</strong></p><p>在这里，尽管是void，但是仍然需要写上<code>@ResponseBody</code>，只不过这次响应体是空的罢了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/quick&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span> <span class="hljs-params">(String username, <span class="hljs-keyword">int</span> age)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        System.out.println(username); <span class="hljs-comment">// Lotus</span><br>        System.out.println(age); <span class="hljs-comment">// 16</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/aster_spring_web_war_exploded/u</span>ser/quick?username=Lotus&amp;age=<span class="hljs-number">16</span><br></code></pre></td></tr></table></figure><h4 id="获得POJO类型参数"><a href="#获得POJO类型参数" class="headerlink" title="获得POJO类型参数"></a>获得POJO类型参数</h4><p>当Controller中业务方法的<strong>POJO参数的属性名</strong>与<strong>请求参数的name</strong>一致时，参数值会<strong>自动映射匹配</strong></p><p>User需要重写toString和getter/setter哦</p><p>比如下面，User有username和age属性，url里传入数值之后，SpringMVC<strong>自动</strong>帮我们封装成了一个User对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/quick&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span> <span class="hljs-params">(User user)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        System.out.println(user); <span class="hljs-comment">// User&#123;username=&#x27;Lotus&#x27;, age=16&#125;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/aster_spring_web_war_exploded/u</span>ser/quick?username=Lotus&amp;age=<span class="hljs-number">16</span><br></code></pre></td></tr></table></figure><h4 id="获得数组类型参数"><a href="#获得数组类型参数" class="headerlink" title="获得数组类型参数"></a>获得数组类型参数</h4><p>比如，请求了一大堆数据，<strong>名字都一样</strong>，但是<strong>值不一样</strong>，那么就可以存到数组里</p><p>当Controller中业务方法的<strong>数组名称</strong>与<strong>请求参数的name</strong>一致时，参数值会<strong>自动映射匹配</strong></p><p>（数组默认直接输出是打印地址，这里转成List方便输出）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/quick&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span> <span class="hljs-params">(String[] strs)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        System.out.println(Arrays.asList(strs)); <span class="hljs-comment">// [Izayoi, Aster, Izayoi, Lotus]</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/aster_spring_web_war_exploded/u</span>ser/quick?strs=Izayoi&amp;strs=Aster&amp;strs=Izayoi&amp;strs=Lotus<br></code></pre></td></tr></table></figure><h4 id="获得集合类型参数"><a href="#获得集合类型参数" class="headerlink" title="获得集合类型参数"></a>获得集合类型参数</h4><p><strong>1.（不推荐）</strong>获得集合参数时，要<strong>将集合包装到一个POJO中</strong>才行 <em>（“SpringMVC是有极限的！”）</em></p><p>即，<strong>不能直接封装集合</strong></p><p>我们需要创建一个<strong>VO对象</strong>（ValueObject / ViewObject）来包装集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.aster.domain;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VO</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> List&lt;User&gt; userList;<br><br>    <span class="hljs-comment">// getter setter toString</span><br>&#125;<br></code></pre></td></tr></table></figure><p>由于使用这种方法时，VO内的userList用上面的那种GET方法提交数据会很麻烦（url里要按照格式写一大堆），所以我们新开一个jsp，用POST提交表单</p><p>感觉这方法不是很靠谱，先<a href="https://www.bilibili.com/video/BV1WZ4y1P7Bp?p=65">丢个连接用到再看</a></p><p><strong>2.<strong>当使用</strong>ajax</strong>提交时，可以指定contentType为json格式，这样一来，在方法<strong>参数</strong>位置使用<code>@RequestBody</code>后就可以<strong>直接接收集合数据</strong>，而无需使用POJO进行封装</p><p>在webapp下新建一个ajax.js，并在js子目录下导入jQuery的js文件</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.5wmsyvtpjko0.png" alt="image"></p><p>ajax.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;script src=&quot;$&#123;pageContext.request.contextPath&#125;/js/jquery-3.6.0.js&quot;&gt;&lt;/script&gt;<br>    &lt;script&gt;<br>        <span class="hljs-keyword">var</span> userList = [];<br>        <span class="hljs-comment">// 虽然教程是new Array但是IDEA一个劲儿推荐我写[]</span><br>        userList.push(&#123;username: <span class="hljs-string">&quot;Lotus&quot;</span>, age: <span class="hljs-number">16</span>&#125;);<br>        userList.push(&#123;username: <span class="hljs-string">&quot;Aster&quot;</span>, age: <span class="hljs-number">18</span>&#125;);<br><br>        $.ajax(&#123;<br>            type:<span class="hljs-string">&quot;POST&quot;</span>,<br>            url:<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/user/quick&quot;</span>,<br>            data:JSON.stringify(userList), <span class="hljs-comment">// 转为json格式</span><br>            contentType:<span class="hljs-string">&quot;application/json;charset:utf-8&quot;</span><br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/quick&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span> <span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> List&lt;User&gt; userList)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        System.out.println(userList);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行后访问/ajax.jsp子页面，打开控制台发现报错了：</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image-20211001170719969.xgbusky0txs.png" alt="image-20211001170719969"></p><p>这里涉及到静态资源访问权限问题，后面再说。现在姑且在spring-mvc.xml里添加：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:resources</span> <span class="hljs-attr">mapping</span>=<span class="hljs-string">&quot;/js/**&quot;</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;/js/&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>然后再次访问就可以了</p><p>可以看到，总共发起了三次请求：</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.6if2jcopxnw0.png" alt="image"></p><p>第一次请求是我们主动去访问了/ajax.jsp</p><p>第二次请求是因为ajax.jsp里导入了jquery</p><p>第三次请求是我们写的ajax里发请求去寻找了quick方法</p><p>在IDEA控制台里也输出了数据：<code>[User&#123;username=&#39;Lotus&#39;, age=16&#125;, User&#123;username=&#39;Aster&#39;, age=18&#125;]</code></p><h5 id="报错详解"><a href="#报错详解" class="headerlink" title="报错详解"></a>报错详解</h5><p>上面第一次之所以报错，是因为ajax发起导入jquery-3.6.0.js的请求时，默认也像找quick那样去找映射了，但是显然我们并没有像<code>@RequestMapping(&quot;/quick&quot;)</code>那样配置jquery-3.6.0.js的映射，那么ajax就傻眼了。添加的这句话：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:resources</span> <span class="hljs-attr">mapping</span>=<span class="hljs-string">&quot;/js/**&quot;</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;/js/&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>意思就是，当访问了<code>/js/**</code>映射的时候，开放<code>/js/</code>目录的文件访问权限</p><p>比如说，如果在webapp下有个img存图片，那就加上这一句：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:resources</span> <span class="hljs-attr">mapping</span>=<span class="hljs-string">&quot;/img/**&quot;</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;/img/&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h5 id="当然了，也可以直接只加这一句话："><a href="#当然了，也可以直接只加这一句话：" class="headerlink" title="当然了，也可以直接只加这一句话："></a>当然了，也可以直接只加这一句话：</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>意思是，<strong>当SpringMVC找不到资源时，交给原始容器（Tomcat）去寻找资源</strong></p><h3 id="配置全局乱码过滤器"><a href="#配置全局乱码过滤器" class="headerlink" title="配置全局乱码过滤器"></a>配置全局乱码过滤器</h3><p>有时，当post请求时（比如form.jsp），数据会出现乱码，我们可以设置一个过滤器来进行乱码的过滤</p><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="参数绑定注解-RequestParam"><a href="#参数绑定注解-RequestParam" class="headerlink" title="参数绑定注解@RequestParam"></a>参数绑定注解@RequestParam</h3><p>当请求的参数名称与Controller的业务方法参数名称不一致时，就需要通过<code>@RequestParam</code>注解显示的绑定</p><p>（说人话就是，save里的参数叫username，但是url里写的是name，像让username获得name的值）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/quick&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;name&quot;)</span> String username)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        System.out.println(username); <span class="hljs-comment">// Lotus</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/aster_spring_web_war_exploded/u</span>ser/quick?name=Lotus<br></code></pre></td></tr></table></figure><p><code>@RequestParam</code>的参数：</p><ul><li>value：请求的参数名称</li><li>require：此参数是否必须（默认为true）；如果必须，那么缺少此参数时会报错</li><li>defaultValue：默认值</li></ul><h3 id="获得RESTful风格的参数"><a href="#获得RESTful风格的参数" class="headerlink" title="获得RESTful风格的参数"></a>获得RESTful风格的参数</h3><blockquote><p>RESTful是一种软件架构风格、设计风格，提供了一组设计原则和约束条件，主要用于客户端和服务器交互类的软件；基于这个风格设计的软件可以更简洁、更有层次、更易于实现缓存机制等。</p></blockquote><blockquote><p>RESTful风格的请求是使用<strong>url + 请求方式</strong>表示一次请求，HTTP协议里四种请求方式如下：</p><ul><li>GET：用于获取资源</li><li>POST：用于新建资源</li><li>PUT：用于更新资源</li><li>DELETE：用于删除资源</li></ul><p>例如：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">/<span class="hljs-keyword">user</span>/<span class="hljs-number">1</span> <span class="hljs-keyword">GET</span>：得到id=<span class="hljs-number">1</span>的<span class="hljs-keyword">user</span><br>/<span class="hljs-keyword">user</span>/<span class="hljs-number">1</span> <span class="hljs-keyword">DELETE</span>：删除id=<span class="hljs-number">1</span>的<span class="hljs-keyword">user</span><br>/<span class="hljs-keyword">user</span>/<span class="hljs-number">1</span> PUT：更新id=<span class="hljs-number">1</span>的<span class="hljs-keyword">user</span><br>/<span class="hljs-keyword">user</span> POST：新增<span class="hljs-keyword">user</span><br></code></pre></td></tr></table></figure></blockquote><p>在上述地址<code>/user/1</code>中，<strong>1</strong>是我们要获得的参数，我们可以使用<code>@PathVariable</code>进行占位符参数绑定：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/quick/&#123;username&#125;&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;username&quot;)</span> String username)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        System.out.println(username); <span class="hljs-comment">// Aster</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意啦，这里url的格式变了：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/aster_spring_web_war_exploded/u</span>ser<span class="hljs-regexp">/quick/</span>Aster<br></code></pre></td></tr></table></figure><h3 id="自定义类型转换器"><a href="#自定义类型转换器" class="headerlink" title="自定义类型转换器"></a>自定义类型转换器</h3><p>MVC默认有一些转换器，比如String转int</p><p>不够用的时候（比如日期），就需要我们自定义了</p><p>步骤：</p><ol><li>写一个转换器类，实现Converter接口</li><li>在配置文件中声明转换器</li><li>在<code>&lt;annotation-driven&gt;</code>中引用转换器</li></ol><p>比如，java默认的日期格式是yyyy/MM/dd，要是url里是yyyy-MM-dd的话会报错，我们需要自己写一个转换器</p><blockquote><p><code>Converter&lt;S, T&gt;</code>：convert S to T</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.aster.converter;<br><br><span class="hljs-keyword">import</span> ...<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DateConverter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Converter</span>&lt;<span class="hljs-title">String</span>, <span class="hljs-title">Date</span>&gt; </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Date <span class="hljs-title">convert</span><span class="hljs-params">(String dateStr)</span> </span>&#123;<br>        SimpleDateFormat format = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>); <span class="hljs-comment">// （请去复习之前的java笔记Orz）</span><br>        Date date = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            date = format.parse(dateStr);<br>        &#125; <span class="hljs-keyword">catch</span> (ParseException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> date;<br>    &#125;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>spring-mvc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  mvc的注解驱动 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span> <span class="hljs-attr">conversion-service</span>=<span class="hljs-string">&quot;conversionService2&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!-- 声明转换器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;conversionService2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.context.support.ConversionServiceFactoryBean&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;converters&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.aster.converter.DateConverter&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="获得Servlet相关API"><a href="#获得Servlet相关API" class="headerlink" title="获得Servlet相关API"></a>获得Servlet相关API</h3><p>MVC支持使用原始ServletAPI对象作为控制器方法的参数进行注入，常用的对象如下：</p><ul><li>HttpServletRequest</li><li>HttpServletResponse</li><li>HttpSession</li></ul><h3 id="获得请求头"><a href="#获得请求头" class="headerlink" title="获得请求头"></a>获得请求头</h3><blockquote><p>众所周知，HTTP请求有请求行、请求头和请求数据</p></blockquote><p>偶尔，我们也需要用到请求头</p><p><strong>1.</strong> 使用<code>@RequestHeader</code>（相当于web里的<code>request.getHeader(name)</code>）</p><p>有两个属性：</p><ul><li>value：请求头的名称</li><li>required：是否必须携带此请求头（比如，如果值为true，从网页里又没有抓到这个头，那么就会禁止访问）</li></ul><p>比如，我们随便抓一个这里面的请求头（好怪的DevTools中文翻译emm）</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.ftc23kos36w.png" alt="image"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/quick&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">(<span class="hljs-meta">@RequestHeader(value = &quot;User-Agent&quot;, required = false)</span>String user_agent)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        System.out.println(user_agent);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/aster_spring_web_war_exploded/u</span>ser/quick<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Mozilla</span>/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>; Win<span class="hljs-number">64</span>; x<span class="hljs-number">64</span>) AppleWebKit/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> (KHTML, like Gecko) Chrome/<span class="hljs-number">94</span>.<span class="hljs-number">0</span>.<span class="hljs-number">4606</span>.<span class="hljs-number">61</span> Safari/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> Edg/<span class="hljs-number">94.0.992.31</span><br></code></pre></td></tr></table></figure><p><strong>2.</strong> 使用<code>@CookieValue</code>可以直接获取Cookie 的值，用法相同</p><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p>文件上传客户端三要素：</p><ul><li>表单项<code>type = &quot;file&quot;</code></li><li>表单的提交方式是POST</li><li>表单的enctype属性是<strong>多部分表单形式</strong>，即<code>enctype = &quot;multipart/form-data&quot;</code></li></ul><p>upload.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;form action=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/user/quick&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span> enctype=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;<br>        名称&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span>&gt;&lt;br/&gt;<br>        文件&lt;input type=<span class="hljs-string">&quot;file&quot;</span> name=<span class="hljs-string">&quot;uploadFile&quot;</span>&gt;&lt;br/&gt;<br>        &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;提交&quot;</span>&gt;<br>    &lt;/form&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.4psnt95lh1c0.png" alt="image"></p><h4 id="文件上传原理"><a href="#文件上传原理" class="headerlink" title="文件上传原理"></a>文件上传原理</h4><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.28w37cmfvzb4.png" alt="image"></p><h4 id="单文件上传"><a href="#单文件上传" class="headerlink" title="单文件上传"></a>单文件上传</h4><p>步骤</p><ol><li>导入FileUpload和io坐标（MVC框架的文件上传用到了FileUpload）</li><li>配置文件上传解析器</li><li>编写文件上传代码</li></ol><h5 id="导坐标"><a href="#导坐标" class="headerlink" title="导坐标"></a>导坐标</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="配置文件上传解析器"><a href="#配置文件上传解析器" class="headerlink" title="配置文件上传解析器"></a>配置文件上传解析器</h5><p>spring-mvc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;multipartResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 上传文件的总大小(5GB) --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxUploadSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;5242800&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- 上传单个文件的大小 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxUploadSizePerFile&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;5242800&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- 上传文件的编码类型 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="编写文件上传编码"><a href="#编写文件上传编码" class="headerlink" title="编写文件上传编码"></a>编写文件上传编码</h5><p>老规矩，参数名一致的时候，Spring会自动注入，在这里就是和upload.jsp中这一句里的name一致：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">文件&lt;input type=<span class="hljs-string">&quot;file&quot;</span> name=<span class="hljs-string">&quot;uploadFile&quot;</span>&gt;&lt;br/&gt;<br></code></pre></td></tr></table></figure><p>Spring会将文件封装为MultipartFile类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/quick&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">(String username, MultipartFile uploadFile)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        System.out.println(username); <span class="hljs-comment">// IzayoiAster</span><br>        <span class="hljs-comment">// 获得上传文件名称（不是表单里的name，而是他本身的名称）</span><br>        String originalFilename = uploadFile.getOriginalFilename();<br>        uploadFile.transferTo(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;E:\\test\\&quot;</span> + originalFilename));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.2m26yd98jwi0.png" alt="image"></p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.6rkfkmlaf2k0.png" alt="image"></p><h4 id="多文件上传"><a href="#多文件上传" class="headerlink" title="多文件上传"></a>多文件上传</h4><p>结合之前学到的传参为数组，懂的都懂，不多说：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;form action=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/user/quick&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span> enctype=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;<br>    名称&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span>&gt;&lt;br/&gt;<br>    文件<span class="hljs-number">1</span>&lt;input type=<span class="hljs-string">&quot;file&quot;</span> name=<span class="hljs-string">&quot;uploadFile&quot;</span>&gt;&lt;br/&gt;<br>    文件<span class="hljs-number">2</span>&lt;input type=<span class="hljs-string">&quot;file&quot;</span> name=<span class="hljs-string">&quot;uploadFile&quot;</span>&gt;&lt;br/&gt;<br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;提交&quot;</span>&gt;<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/quick&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">(String username, MultipartFile[] uploadFile)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        System.out.println(username);<br>        <span class="hljs-keyword">for</span>(MultipartFile multipartFile : uploadFile) &#123; <span class="hljs-comment">// 别忘了这种for循环哦~</span><br>            String originalFilename = multipartFile.getOriginalFilename();<br>            multipartFile.transferTo(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;E:\\test\\&quot;</span> + originalFilename));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="JdbcTemplate基本使用"><a href="#JdbcTemplate基本使用" class="headerlink" title="JdbcTemplate基本使用"></a>JdbcTemplate基本使用</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>JdbcTemplate是Spring框架中提供的一个对象，是对原始繁琐的Jdbc API对象的简单封装</p><h2 id="快速入门-1"><a href="#快速入门-1" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="开发步骤-1"><a href="#开发步骤-1" class="headerlink" title="开发步骤"></a>开发步骤</h3><ol><li>导入spring-jdbc和spring-tx的坐标（tx：transection 处理，业务）</li><li>创建数据库表和实体</li><li>创建JdbcTemplate对象</li><li>执行数据库操作</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-tx<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（之前的诸如spring mysql之类的就不重复写了）</p><p>然后，新建一个account表（虽然老师没讲他怎么建的，但大概是把name当作key了）</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.7heme5hiezc0.png" alt="image"></p><p>再创建一个实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.aster.domain;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Account</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> money;<br><span class="hljs-comment">// getter setter toString</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在给IDEA连接数据库的时候，记得把我们的test数据库（架构）选上：</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.4lx8iezdrnu0.png" alt="image"></p><p>然后，编写操作数据库的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JdbcTemplateTest</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span> <span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 创建数据源</span><br>        DruidDataSource dataSource = <span class="hljs-keyword">new</span> DruidDataSource();<br>        dataSource.setDriverClassName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>        dataSource.setUrl(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test?serverTimezone=UTC&quot;</span>);<br>        dataSource.setUsername(<span class="hljs-string">&quot;root&quot;</span>);<br>        dataSource.setPassword(<span class="hljs-string">&quot;root&quot;</span>);<br><br>        JdbcTemplate jdbcTemplate = <span class="hljs-keyword">new</span> JdbcTemplate();<br>        <span class="hljs-comment">// 设置数据源，告诉jdbc数据库在哪</span><br>        jdbcTemplate.setDataSource(dataSource);<br>        <span class="hljs-comment">// 执行操作</span><br>        <span class="hljs-keyword">int</span> row = jdbcTemplate.update(<span class="hljs-string">&quot;insert into account values(?, ?)&quot;</span>, <span class="hljs-string">&quot;aster&quot;</span>, <span class="hljs-number">6000</span>);<br>        System.out.println(row);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行后，控制台输出了1，并且可以看见新建了一行：</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.3z35ryh5xh40.png" alt="image"></p><h3 id="Spring产生JdbcTemplate对象"><a href="#Spring产生JdbcTemplate对象" class="headerlink" title="Spring产生JdbcTemplate对象"></a>Spring产生JdbcTemplate对象</h3><p>观察一下这句话：<code>JdbcTemplate jdbcTemplate = new JdbcTemplate();</code>，可以发现JdbcTemplate是有<strong>无参构造</strong>的</p><p>既然有无参构造，我们知道，Spring默认是通过无参构造帮我们产生对象</p><p>那么我们就让Spring帮我们产生JdbcTemplate对象吧！ <strong>（Spring简直就是能包养我的梦中npy（逃））</strong></p><p>JdbcTemplate需要一个数据源dataSource才能工作，这就用到了Spring的<strong>依赖注入</strong>（DI）</p><p><strong>在Spring中，如果想要依赖注入，那么注入和被注入的对象都需要在Spring容器中，即dataSource也需要由Spring产生</strong></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><blockquote><p>老师用的依然是<code>applicationContext.xml</code>，我打算用注解来写</p><p>但是并没有用注解写成……太耻辱了呜呜呜，有空再研究吧，放在这儿了：<a href="https://pan.baidu.com/s/1rY7nF23RN598_KjP4DDtaw">提取码jdbc</a></p><p><strong>捏麻麻的，反正实验室那个项目也用不到JdbcTemplate，注解nm，不写了👿</strong></p></blockquote><p>applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml">...<br><br><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jdbcTemplate&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>...<br></code></pre></td></tr></table></figure><p>jdbc.properties（不加<code>serverTimezone=UTC</code>的话，有可能会报错<code>The server time zone value &#39;xxxxx&#39; is unrecognized or represents more than one time zone.</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pro">jdbc.driver&#x3D;com.mysql.cj.jdbc.Driver<br>jdbc.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;test?serverTimezone&#x3D;UTC<br>jdbc.username&#x3D;root<br>jdbc.password&#x3D;root<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JdbcTemplateTest</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span> <span class="hljs-params">()</span> </span>&#123;<br>        ApplicationContext app = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>        JdbcTemplate jdbcTemplate = app.getBean(JdbcTemplate.class);<br>        <span class="hljs-keyword">int</span> row = jdbcTemplate.update(<span class="hljs-string">&quot;insert into account values(?, ?)&quot;</span>, <span class="hljs-string">&quot;lotus&quot;</span>, <span class="hljs-number">6000</span>);<br>        System.out.println(row);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210715/image.23veo710r8u8.png" alt="image"></p><h3 id="JdbcTemplate的常用操作"><a href="#JdbcTemplate的常用操作" class="headerlink" title="JdbcTemplate的常用操作"></a>JdbcTemplate的常用操作</h3><p>我思考了一下，决定跳过这一段，毕竟虽然我是打算先学SSM再去学SpringBoot这样一来有基础好理解，但是课里有些东西学起来性价比不是很高（比如Jdbc模板和一些训练项目；</p><p>所以这篇笔记就先完结咯，好耶！</p><p>鉴于已经学习了SSM的一半了，新开一篇笔记继续写，不然太长了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习笔记1</title>
    <link href="/2021/06/04/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/"/>
    <url>/2021/06/04/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</url>
    
    <content type="html"><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>学习python也就是为了当个工具，先学个大概不深入，暂且放一放，开始学主语言Java</p><p>因为Java语法方面和C++实在是很像，所以略过一大堆东西，直接从一半开始吧<br>顺便，还没看那个核心技术卷；来个前置知识吧：</p><blockquote><p>Java的包（package）和类，可以理解成文件夹和文件，并且实际上在系统里就是以文件夹和文件的方式来存放的<br>跨包调用时，需要import，和python一样的操作<br>IDEA中，例如src是模块，包含包和类</p><p>在在包A下如果还想建一个包B，包B应命名为A.B（实际上表现为文件夹A内的文件夹B）</p></blockquote><p>那么开始吧，从字符串开始</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><blockquote><p>再复习一遍，API，Application Programming Interface，应用程序编程接口<br>Java API：JDK中提供的各种功能的Java类</p></blockquote><p>几个小技巧（虽然和API关系不大啦）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-comment">//技巧零：输入 psvm</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span> <span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// new之后的Scanner是ctor哦~ System.in是ctor参数</span><br>        Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.in);<br><br>        <span class="hljs-comment">//技巧一：sc.nextLine()</span><br>        <span class="hljs-comment">//打完上面这句，Ctrl + Alt + V，自动生成下面这句</span><br>        String line = sc.nextLine();<br><br>        <span class="hljs-comment">//技巧二：输入sout，即可自动联想下面这句</span><br>        System.out.println(line);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>特点：字符串不可变，创建后值不能更改，但是可以被共享</p><h4 id="String的构造方法"><a href="#String的构造方法" class="headerlink" title="String的构造方法"></a>String的构造方法</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>public String()</td><td>空字符串</td></tr><tr><td>public String(char[] chs)</td><td>根据字符数组创建</td></tr><tr><td>public String(byte[] bys)</td><td>根据字节数组创建</td></tr><tr><td>String s = “abc”</td><td>直接赋值</td></tr></tbody></table><h4 id="String的特点"><a href="#String的特点" class="headerlink" title="String的特点"></a>String的特点</h4><ol><li>通过<code>new</code>方式建立的字符串，就算值相同，地址是不同的<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">char</span>[] chs = &#123;<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>&#125;<br>String a = <span class="hljs-keyword">new</span> String(chs);<br>String b = <span class="hljs-keyword">new</span> String(chs);<br></code></pre></td></tr></table></figure></li><li>以<code>&quot;&quot;</code>方式给出的字符串，只要字符序列相同，无论出现几次，JVM都只会建立一个String对象，并在字符串池中维护<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">String a = <span class="hljs-string">&quot;abc&quot;</span>;<br>String b = <span class="hljs-string">&quot;abc&quot;</span>;<br><span class="hljs-comment">//ab本质上是同一个对象</span><br></code></pre></td></tr></table></figure><h4 id="String的比较"><a href="#String的比较" class="headerlink" title="String的比较"></a>String的比较</h4></li></ol><p><strong>注意！</strong><br>java中的数据类型，可分为两类：<br>1.基本数据类型，也称原始数据类型。byte,short,char,int,long,float,double,boolean之间的比较，应用 == ，比较的是他们的值。<br>2.复合数据类型(类)，当他们用 == 进行比较的时候，比较的是他们在内存中的<strong>存放地址</strong>，所以，除非是同一个new出来的对象，他们的比较后的结果为true，否则比较后结果为false。 JAVA当中所有的类都是继承于Object这个基类的，在Object中的基类中定义了一个<strong>equals</strong>的方法，这个方法的初始行为是比较对象的内存地 址，但在一些类库当中这个方法被覆盖掉了，如String,Integer,Date在这些类当中，equals有其自身的实现，而不再是比较类在堆内存中的存放地址了。</p><p>对于复合数据类型之间进行equals比较，在没有覆写equals方法的情况下，他们之间的比较还是基于他们在内存中的存放位置的地址值的，因为Object的equals方法也是用 == 进行比较的，所以比较后的结果跟 == 的结果相同。</p><p>String类对equals方法进行了<strong>重写</strong>，用来比较指向的字符串对象所存储的字符串是否相等。<br>其他的一些类诸如Double，Date，Integer等，都对equals方法进行了重写用来比较指向的对象所存储的内容是否相等</p><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210604/image.5wrxafsw0xc0.png" alt="image"></p><h4 id="遍历字符串"><a href="#遍历字符串" class="headerlink" title="遍历字符串"></a>遍历字符串</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">char</span> <span class="hljs-title">charAt</span><span class="hljs-params">(idx)</span></span>; <span class="hljs-comment">// 返回idx处的char值</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">length</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 数组.length() 字符串.length()</span><br></code></pre></td></tr></table></figure><h4 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h4><p>基本同C++<br>可以直接加<code>int</code></p><h3 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h3><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210604/image.75eyemq3azo0.png" alt="image"></p><p>StringBuilder是一个<strong>可变</strong>的字符串类</p><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><p>（以后都简写了，public啥的Orz）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">StringBuilder(); <br>StringBuilder(String str);<br></code></pre></td></tr></table></figure><h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><p>（许多同String）</p><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td>StringBuilder append(任意类型)</td><td>追加，并返回对象本身</td></tr><tr><td>StringBuilder reverse()</td><td>反转，并返回对象本身</td></tr></tbody></table><p>由于SB不变，直接调用方法即可，不用声明新的SB来接收<br>另外，由于返回<strong>本身</strong>，本身是个对象，所以可以链式编程<br><code>sb.append(x).append(x).append(x)...</code></p><h4 id="与String互相转换"><a href="#与String互相转换" class="headerlink" title="与String互相转换"></a>与String互相转换</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">sb.toString();<br>StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder(str);<br></code></pre></td></tr></table></figure><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>数组长度固定，集合的存储空间可变<br>以<strong>ArrayList</strong>为例（可以类比python的list）</p><h3 id="AL的构造和添加"><a href="#AL的构造和添加" class="headerlink" title="AL的构造和添加"></a>AL的构造和添加</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList();<br>add(E e); <span class="hljs-comment">// 其实它返回 boolean 成功or失败</span><br>add(<span class="hljs-keyword">int</span> idx, E e); <span class="hljs-comment">// 在位置idx插入元素e</span><br></code></pre></td></tr></table></figure><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>boolean remove(Object o)</td><td>删除指定的元素，返回删除是否成功</td></tr><tr><td>E remove(int idx)</td><td>删除指定的索引处的元素，返回被删除的元素</td></tr><tr><td>E set(int idx, E e)</td><td>替换，返回被换掉的</td></tr><tr><td>E get(int idx)</td><td>-</td></tr><tr><td>int size()</td><td>返回集合中元素个数</td></tr></tbody></table><p>…<br>（此处大跃进）<br>…</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>类比C++，<code>:</code>变为<code>extends</code></p><h3 id="super"><a href="#super" class="headerlink" title="super"></a>super</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//假设父类里 age 是 50 嗷</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Father</span> </span>&#123; <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> age = <span class="hljs-number">30</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> age = <span class="hljs-number">20</span>;<br>        System.out.println(age); <span class="hljs-comment">// 20</span><br>        <span class="hljs-comment">// 我要访问本类的age，怎么办呢？this</span><br>        System.out.println(<span class="hljs-keyword">this</span>.age); <span class="hljs-comment">// 30</span><br>        <span class="hljs-comment">// 我要访问父类的age，怎么办呢？super</span><br>        System.out.println(<span class="hljs-keyword">super</span>.age);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>this()</code>：本类的构造方法<br><code>super()</code>：父类的构造方法</p><h3 id="方法的访问"><a href="#方法的访问" class="headerlink" title="方法的访问"></a>方法的访问</h3><h4 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h4><p><font color='red'>子类中所有的构造方法默认都会访问父类中的<strong>无参</strong>构造方法</font><br>（即相当于，不管你自己写还是不写，子类构造方法永远有一句<code>super()</code>）</p><p>如果父类中没有无参构造方法，会报错，解决方案：</p><ol><li>在父类写一个无参ctor（推荐）</li><li>在子类显式调用父类的<strong>有参</strong>ctor </li></ol><h4 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h4><p>通过子类对象访问一个方法：<br>子类成员范围寻找？ ? 父类成员范围找？ ? 报错！</p><h3 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h3><p>方法重写：子类中的和父类<strong>一模一样</strong>的方法声明<br>小技巧：在重写的方法前加一行<code>@Override</code>，如果IDEA报错了，说明你写错咯</p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>父类中的<strong>private</strong>内容，无法被重写<br>子类的访问权限不能比父类低（public &gt; 默认 &gt; private）</p><h3 id="继承注意事项"><a href="#继承注意事项" class="headerlink" title="继承注意事项"></a>继承注意事项</h3><ul><li>只能有一个父类</li><li>可以套娃</li></ul><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><h3 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h3><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210604/image.3wh11ab9ly60.png" alt="image"></p><h3 id="状态修饰符"><a href="#状态修饰符" class="headerlink" title="状态修饰符"></a>状态修饰符</h3><h4 id="final"><a href="#final" class="headerlink" title="final"></a>final</h4><ul><li>final修饰<strong>基本类型</strong>时，基本类型的<strong>数据值</strong>不能改变（C++ const）</li><li>final修饰<strong>引用类型</strong>（如类）时，引用类型的<strong>地址值</strong>不能改变，但是<strong>地址指向的内容</strong>却是<strong>可以改变</strong>的<h4 id="static"><a href="#static" class="headerlink" title="static"></a>static</h4></li><li>（同C++ py）被类的所有成员<strong>共享</strong></li><li>静态的成员方法只能访问同为静态的成员方法和变量</li></ul><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>小技巧time：子类里输入要重写的父类方法名，回车一下，IDEA自动补全方法和<code>@Override</code></p><h3 id="多态中成员访问特点："><a href="#多态中成员访问特点：" class="headerlink" title="多态中成员访问特点："></a>多态中成员访问特点：</h3><p>先给出几段程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> age = <span class="hljs-number">10</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span> <span class="hljs-params">()</span> </span>&#123;<br>        ...<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> age = <span class="hljs-number">6</span>;<br>    <span class="hljs-keyword">public</span> String cat_type = <span class="hljs-string">&quot;default&quot;</span>;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span> <span class="hljs-params">()</span> </span>&#123;<br>        ...<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">play</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span> <span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Animal a = <span class="hljs-keyword">new</span> Cat();<br>        System.out.println(a.age); <span class="hljs-comment">// 不报错，但输出了Animal父类的10</span><br>        System.out.println(a.cat_type); <span class="hljs-comment">// 报错！！！父类里没有</span><br>        a.eat(); <span class="hljs-comment">// 不报错，且调用的是Cat子类里的eat</span><br>        a.play(); <span class="hljs-comment">//报错！！！父类里没有</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>成员变量：编译看左边(Animal)，执行看左边(Animal)</li><li>成员方法：编译看左边(Animal)，执行看右边(Cat)（因为方法经过了重写而变量没有）</li></ul><blockquote><p>多态的优点，简而言之，就是定义方法的时候可以只定义一个用父类型的方法，用这一个方法可以操作所有子类型避免一个子类型写一个方法</p><p>而多态的缺点，就是上文提到的，不能访问<strong>某一具体子类特有的方法</strong></p></blockquote><h3 id="多态中的转型"><a href="#多态中的转型" class="headerlink" title="多态中的转型"></a>多态中的转型</h3><p>向<strong>上</strong>转型：父类引用 <strong>指向</strong> 子类对象<br>向<strong>下</strong>转型：父类引用 <strong>转为</strong> 子类对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Animal a = <span class="hljs-keyword">new</span> Cat(); <span class="hljs-comment">// 向上转型</span><br>a.play(); <span class="hljs-comment">// 同上文，会报错！因为Animal里没有play方法</span><br><br>Cat b = (Cat)a; <span class="hljs-comment">// 向下转型（这里没有new，只是地址的引用哦~）</span><br>b.play(); <br></code></pre></td></tr></table></figure><h2 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h2><blockquote><p><strong>C++ 抽象类：</strong> 拥有<strong>纯虚函数</strong>的类是抽象类<br><strong>JAVA 抽象类：</strong> 使用<strong>abstract</strong>定义且含有abstract<strong>抽象方法</strong>的类是抽象类（虽然其实可以没有抽象方法，但是没啥意义）<br>从定义上看，纯虚函数和抽象方法非常相像，纯虚函数声明为<code>virtual type funcname()=0;</code>抽象函数声明为<code>public abstract type funcname();</code>可以看出它们都没有定义。前者没有定义函数体，后者没有定义方法体。</p></blockquote><p>抽象类不是具体的，因此不能直接创建对象<br>抽象类的子类，要么<strong>重写</strong>父类中的抽象方法，要么也是一个抽象类</p><p>抽象类虽然不能直接实例化，但是也能有构造方法，因为它的子类通过多态访问它的构造方法</p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p><strong>Interface</strong></p><p>和类一样，被包含在package里<br>类 <strong>不继承</strong> 接口，类 <strong>实现(implements)</strong> 接口，一般把实现类命名为 “接口名 + Impl” </p><p>接口是<strong>抽象</strong>的，需要通过类来实例化，类比抽象类的特性</p><p><strong>小总结——多态的形式：</strong> 具体类多态、<strong>抽象类多态、接口多态</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Jumping</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">jump</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Jumping</span></span>&#123;<br>    ...<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">jump</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Cat is jumping!&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Cat c = <span class="hljs-keyword">new</span> Cat();<br>        c.jump();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="接口的成员特点"><a href="#接口的成员特点" class="headerlink" title="接口的成员特点"></a>接口的成员特点</h3><ul><li>成员变量：<br>只能是常量，默认修饰符<code>public static final</code></li><li>构造方法：<br>接口没有构造方法（因为接口主要是对行为进行抽象的，是没有具体存在的）<br>接口的实现类看似能调用<code>super()</code>，其实是继承自究极大爹Object类的</li><li>成员方法：</li></ul><p><strong>只能是抽象方法</strong>，默认修饰符<code>public abstract</code><br>(JDK8后的新特性以后说)</p><blockquote><p>又一个小技巧：<code>Alt + Insert</code>可以在类里快速创建各种方法</p></blockquote><h3 id="类和接口的关系"><a href="#类和接口的关系" class="headerlink" title="类和接口的关系"></a>类和接口的关系</h3><ul><li>类和类的关系：<br>继承关系，<strong>只能单继承</strong>（认一个爹），但是可以套娃（多层继承）</li><li>类和接口的关系：<br>实现关系，可以单实现，也可以多实现，还可以在继承一个类的同时实现多个接口</li><li>接口和接口的关系：<br>继承关系，可以单继承，<strong>也可以多继承</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InterImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Object</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Inter1</span>, <span class="hljs-title">Inetr2</span>, <span class="hljs-title">Inter3</span></span>&#123;<br>    ...<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Inter1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Inter2</span>, <span class="hljs-title">Inter3</span></span>&#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="抽象类和接口的区别"><a href="#抽象类和接口的区别" class="headerlink" title="抽象类和接口的区别"></a>抽象类和接口的区别</h3></li><li>抽象类 —— 对类抽象，包括属性、行为</li><li>接口 —— 对行为抽象，主要包括行为<br><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210604/image.46hzx5tnayg0.png" alt="image"></li></ul><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>（暂略）</p><h2 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h2><blockquote><p>如果是静态类，无需ctor，通过类名就可以直接调用</p></blockquote><h3 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h3><p>（实在是懒得打表直接上图吧）<br><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210604/image.55ocd073yzk0.png" alt="image"></p><h3 id="System"><a href="#System" class="headerlink" title="System"></a>System</h3><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210604/image.6vrrs2df4k00.png" alt="image"></p><h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><blockquote><p>看方法的源码：选中方法，<code>Crtl + B</code>，或右键GoTo实现</p></blockquote><h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString( )"></a>toString( )</h4><p>类的<code>toString()</code>默认继承自<strong>Object</strong>类；建议所有类<strong>重写</strong>此方法<br>自动重写：<code>Alt + Insert</code></p><h4 id="equals"><a href="#equals" class="headerlink" title="equals( )"></a>equals( )</h4><p>同上，比较值（而非地址）是否相同，需要<strong>重写</strong>；可自动重写</p><h3 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h3><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210604/image.68z67qwynhs0.png" alt="image"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Arrays.sort(arr)<br></code></pre></td></tr></table></figure><h3 id="基本类型包装类"><a href="#基本类型包装类" class="headerlink" title="基本类型包装类"></a>基本类型包装类</h3><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210604/image.3ngl8hb5f1c0.png" alt="image"><br>常用于基本数据类型和字符串之间的转换</p><h4 id="Integer"><a href="#Integer" class="headerlink" title="Integer"></a>Integer</h4><h5 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h5><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210604/image.69c646jljr80.png" alt="image"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer i = Integer.valueOf(<span class="hljs-string">&quot;114514&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="int与String转换"><a href="#int与String转换" class="headerlink" title="int与String转换"></a>int与String转换</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// int 转 String</span><br><span class="hljs-keyword">int</span> num = <span class="hljs-number">16</span>;<br><span class="hljs-comment">// 方法一（比较low，主要是说一下，string后加东西自动转string）</span><br>String s1 = <span class="hljs-string">&quot;&quot;</span> + num;<br><span class="hljs-comment">// 方法二（专业 ~）</span><br>String s2 = String.valueOf(num);<br><br><span class="hljs-comment">// String 转 int</span><br>String str = <span class="hljs-string">&quot;16&quot;</span>;<br><span class="hljs-keyword">int</span> x = Integer.parseInt(str);<br></code></pre></td></tr></table></figure><h3 id="日期类"><a href="#日期类" class="headerlink" title="日期类"></a>日期类</h3><p>（java.util包下的类）</p><h4 id="构造方法-2"><a href="#构造方法-2" class="headerlink" title="构造方法"></a>构造方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Date d1 = <span class="hljs-keyword">new</span> Date();<br>        System.out.println(d1);<br>        Date d2 = <span class="hljs-keyword">new</span> Date(<span class="hljs-number">1000</span>*<span class="hljs-number">60</span>*<span class="hljs-number">60</span>); <span class="hljs-comment">//从1970.1.1 00:00 GMT开始的毫秒数（涉及毫秒的，变量类型的long）</span><br>        System.out.println(d2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">Sat Jun 05 11:45:14 CST 2021<br>Thu Jan 01 09:00:00 CST 1970<br></code></pre></td></tr></table></figure><h4 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h4><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210604/image.a8v1bynfrew.png" alt="image"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Date d1 = <span class="hljs-keyword">new</span> Date();<br>        System.out.println(d1.getTime());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>返回一大串毫秒看不懂怎么办？<code> * 1.0 / 1000 / 60 / 60 / 24 / 365</code>（<code>Ctrl + Alt + L</code>可以格式化代码）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Date d1 = <span class="hljs-keyword">new</span> Date();<br>        System.out.println(d1.getTime() * <span class="hljs-number">1.0</span> / <span class="hljs-number">1000</span> / <span class="hljs-number">60</span> / <span class="hljs-number">60</span> / <span class="hljs-number">24</span> / <span class="hljs-number">365</span> + <span class="hljs-string">&quot;年&quot;</span>);<br>        <span class="hljs-comment">// 51.46074035676687年</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Date d1 = <span class="hljs-keyword">new</span> Date();<br>        <span class="hljs-keyword">long</span> time = System.currentTimeMillis();<br>        d1.setTime(time);<br>        System.out.println(d1); <span class="hljs-comment">//Sat Jun 05 12:07:35 CST 2021</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="SimpleDateFormat"><a href="#SimpleDateFormat" class="headerlink" title="SimpleDateFormat"></a>SimpleDateFormat</h4><ul><li>格式化日期：Date转String，<code>format()</code></li><li>解析日期，String转Date，<code>parse()</code></li></ul><p>格式化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Date d = <span class="hljs-keyword">new</span> Date();<br>        SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(); <span class="hljs-comment">// 无参构造</span><br>        String s = sdf.format(d);<br>        System.out.println(s); <span class="hljs-comment">// 2021/6/5 下午12:24</span><br><br>        <span class="hljs-comment">// 上面的默认模式不喜欢，那么用含参构造</span><br>        SimpleDateFormat sdf2 = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;现在是yyyy年MM月dd日HH点mm分ss秒哦&quot;</span>);<br>        String s2 = sdf2.format(d);<br>        System.out.println(s2); <span class="hljs-comment">// 现在是2021年06月05日12点27分48秒哦</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>解析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String s = <span class="hljs-string">&quot;2016-11-16 11:16:16&quot;</span>;<br>        SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;现在是yyyy年MM月dd日HH点mm分ss秒哦&quot;</span>);<br>        Date d = sdf.parse(s); <span class="hljs-comment">/////////////////</span><br>        System.out.println(d); <span class="hljs-comment">// Wed Nov 16 11:16:16 CST 2016</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>////////////</code>处报错了！<br><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210604/image.45bglx8ujdk0.png" alt="image"><br>先不用管，<code>Alt + Enter</code>再选择 添加异常到方法签名<br><code>...main(String[] args) throws ParseException &#123;</code></p><h4 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a>Calendar</h4><p><a href="https://www.bilibili.com/video/BV1sZ4y1H7gV?p=212&spm_id_from=pageDriver">转P212</a></p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210604/1.1qh15uyyvetc.jpg" alt="1"></p><h3 id="try-catch"><a href="#try-catch" class="headerlink" title="try catch"></a>try catch</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(arr[<span class="hljs-number">3</span>]);<br>        &#125; <span class="hljs-keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Error!&quot;</span>);<br>            <span class="hljs-comment">// 在实际开发中，应该弹出一个页面提示，而不是输出上面这句话；用下面这行</span><br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Throwable成员方法"><a href="#Throwable成员方法" class="headerlink" title="Throwable成员方法"></a>Throwable成员方法</h3><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210604/2.71eibpt5ljk0.jpg" alt="2"></p><h3 id="throws"><a href="#throws" class="headerlink" title="throws"></a>throws</h3><p><code>throws 异常类名</code>，跟在方法的括号后<br>并不是真正的处理，只是把异常给无视了</p><p><strong>编译时异常CE：</strong> 必须处理，可以通过<code>try catch</code>或<code>throws</code>，如果用了<code>throws</code>，将来谁调用了谁处理（除非你有自信throws之后不可能出问题~）<br><strong>运行时异常RE：</strong> 可以不处理，但是如果出现问题了得回来改代码</p><h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> 异常类名 <span class="hljs-keyword">extends</span> <span class="hljs-title">Exception</span> </span>&#123;<br>    无参构造<br>    带参构造<br>&#125;<br></code></pre></td></tr></table></figure><p>例子：检测分数是否在0~100</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ScoreException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Exception</span> </span>&#123;<br>    <span class="hljs-comment">//Alt + Ins自动生成别忘了哦</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ScoreException</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ScoreException</span><span class="hljs-params">(String message)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(message);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ScoreException </span>&#123;<br>        Scanner in = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-keyword">int</span> score = in.nextInt();<br>        <span class="hljs-keyword">if</span> (score &lt; <span class="hljs-number">0</span> || score &gt; <span class="hljs-number">100</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ScoreException(<span class="hljs-string">&quot;分数范围错误！&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;分数正常&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意啦注意啦！</strong> 上面的throws也说了，除非你有自信throws之后不可能错，不然还是要在最后来一个try catch。上面这个程序，main就是最后了，但是main里throw了异常出来之后，并没有try catch它，而是把这个异常throws出了main，这样就<strong>错了！</strong>。（毕竟既然是检查分数范围，肯定要考虑到范围错误呀），所以下面的才是对的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Scanner in = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-keyword">int</span> score = in.nextInt();<br>        <span class="hljs-keyword">if</span> (score &lt; <span class="hljs-number">0</span> || score &gt; <span class="hljs-number">100</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123; <span class="hljs-comment">// !!! ///</span><br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ScoreException(<span class="hljs-string">&quot;分数范围错误！&quot;</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (ScoreException e) &#123; <span class="hljs-comment">/// !!! ///</span><br>                e.printStackTrace();<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;分数正常&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="throws和throw的区别"><a href="#throws和throw的区别" class="headerlink" title="throws和throw的区别"></a>throws和throw的区别</h4><table><thead><tr><th>throws</th><th>throw</th></tr></thead><tbody><tr><td>用在<strong>方法声明</strong>后面，跟的是<strong>异常类名</strong></td><td>用在<strong>方法体</strong>内，跟的是<strong>异常对象名</strong></td></tr><tr><td>由该方法的<strong>调用者</strong>来处理（甩锅）</td><td>由<strong>方法体内</strong>的语句处理（自己背锅）</td></tr><tr><td>只是可能发生异常</td><td>执行throw一定抛出了某种异常</td></tr></tbody></table><h2 id="集合-1"><a href="#集合-1" class="headerlink" title="集合+"></a>集合+</h2><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210604/3.3r1yz5zsjfy0.jpg" alt="3"></p><h3 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h3><p>Collection是单列集合的顶层接口<br>（即 只能通过<strong>多态</strong>的方法创建对象）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Collection&lt;String&gt; c = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<br>        c.add(<span class="hljs-string">&quot;Izayoi&quot;</span>);<br>        c.add(<span class="hljs-string">&quot;ASter&quot;</span>);<br>        System.out.println(c); <span class="hljs-comment">// [Izayoi, ASter]</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="常用方法-2"><a href="#常用方法-2" class="headerlink" title="常用方法"></a>常用方法</h4><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210604/4.5kz5fpg0k6o0.jpg" alt="4"></p><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><p>（类比C++）<br>Iterator，迭代器<br><code>Iterator&lt;E&gt; iterator()</code></p><ul><li><code>E next()</code></li><li><code>boolean hasNext()</code><blockquote><p>p.s. <code>Crtl + B</code>是转到 选中的方法的 实现</p></blockquote></li></ul><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>有序集合，允许重复</p><h4 id="特有方法"><a href="#特有方法" class="headerlink" title="特有方法"></a>特有方法</h4><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210604/image.2m55aimpul60.png" alt="image"></p><h4 id="并发修改异常"><a href="#并发修改异常" class="headerlink" title="并发修改异常"></a>并发修改异常</h4><p>一个错误的程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        List&lt;String&gt; l = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<br>        l.add(<span class="hljs-string">&quot;IzayoiAster&quot;</span>);<br>        l.add(<span class="hljs-string">&quot; loves &quot;</span>);<br>        l.add(<span class="hljs-string">&quot;Izyaoi&quot;</span>);<br>        Iterator&lt;String&gt; it = l.iterator();<br>        <span class="hljs-keyword">while</span> (it.hasNext()) &#123;<br>            String s = it.next();<br>            <span class="hljs-keyword">if</span> (s.equals(<span class="hljs-string">&quot;IzayoiAster&quot;</span>)) &#123;<br>                l.add(<span class="hljs-string">&quot;Lotus&quot;</span>);<br>            &#125;<br>        &#125;<br>        System.out.println(l);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>报错：</strong> <code>Exception in thread &quot;main&quot; java.util.ConcurrentModificationException</code></p><blockquote><p>稍微解释一下这个并发修改异常：每次add一个元素，都会导致列表<strong>实际将要修改的次数</strong>(modCount)加一，而当调用next时，之前会把实际将要修改的次数赋给<strong>预期将要修改的次数</strong>(expectedModCount)，然后对这两个值进行比较是否相等。由于中途add了，不相等，因此报错。（Orz解释不清）<br>我感觉还不如这一句话讲的清楚：迭代器遍历的过程中，通过集合对象修改了集合的长度，造成了迭代器获取元素时，判定实际修改值和预期修改值不一致</p></blockquote><p><strong>解决：</strong> </p><p><code>get()</code>方法不会去对<code>expectedModCount</code>和<code>modCount</code>进行检查</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        List&lt;String&gt; l = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<br>        l.add(<span class="hljs-string">&quot;IzayoiAster&quot;</span>);<br>        l.add(<span class="hljs-string">&quot;loves&quot;</span>);<br>        l.add(<span class="hljs-string">&quot;Izayoi&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; l.size(); i++) &#123;<br>            String s = l.get(i);<br>            <span class="hljs-keyword">if</span> (s.equals(<span class="hljs-string">&quot;IzayoiAster&quot;</span>)) &#123;<br>                l.add(<span class="hljs-string">&quot;Lotus&quot;</span>);<br>            &#125;<br>        &#125;<br>        System.out.println(l);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ListIterator"><a href="#ListIterator" class="headerlink" title="ListIterator"></a>ListIterator</h4><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><p>除了继承自Collection的Interatro所拥有的<code>next()</code>和<code>hasNext()</code>外，还有<code>previous()</code>，<code>hasPrevious()</code>和<code>add(E e)</code></p><p><font color='red'>注意啦注意啦！下面这段代码要和上面的并发修改异常区别开来哦！这里用的是<strong>List</strong>Iterator</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        List&lt;String&gt; l = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<br>        l.add(<span class="hljs-string">&quot;IzayoiAster&quot;</span>);<br>        l.add(<span class="hljs-string">&quot;loves&quot;</span>);<br>        l.add(<span class="hljs-string">&quot;Izayoi&quot;</span>);<br>        ListIterator&lt;String&gt; lit = l.listIterator(); <span class="hljs-comment">/// !!! ///</span><br>        <span class="hljs-keyword">while</span> (lit.hasNext()) &#123; <span class="hljs-comment">/// 用了while ///</span><br>            String s = lit.next();<br>            <span class="hljs-keyword">if</span>(s.equals(<span class="hljs-string">&quot;Izayoi&quot;</span>)) &#123;<br>                lit.add(<span class="hljs-string">&quot;Lotus&quot;</span>); <span class="hljs-comment">/// 可以add啦 ///</span><br>            &#125;<br>        &#125;<br>        System.out.println(l);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>因为ListIteratro在add时，会把modCount赋给expectedModCount</p></blockquote><h4 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h4><p>其实之前IDEA就已经提示啦<br><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210604/image.ay1cic1tmg.png" alt="image"><br>格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (类型 变量名 : 数组或Collection集合) &#123;<br>    <span class="hljs-comment">// 在此处直接使用变量名即可</span><br>&#125;<br><br>e.g.<br><span class="hljs-keyword">int</span>[] arr = &#123;...&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i : arr) &#123;<br>    System.out.println(i);<br>&#125;<br></code></pre></td></tr></table></figure><p><font color='red'>增强for循环的内部原理是一个<strong>Iterator</strong>迭代器，所以也要注意并发修改异常！错误示例：</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; l = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<br>...<br><span class="hljs-keyword">for</span>(String s : list) &#123;<br>    <span class="hljs-keyword">if</span>(s.equals(<span class="hljs-string">&quot;Izayoi&quot;</span>)) &#123;<br>        list.add(<span class="hljs-string">&quot;Lotus&quot;</span>); <span class="hljs-comment">// 通过集合对象修改了集合的长度！报错！</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="遍历小总结"><a href="#遍历小总结" class="headerlink" title="遍历小总结"></a>遍历小总结</h4><p>三种方式：迭代器、普通for、增强for（while是坏文明？）</p><h4 id="List的常用子类"><a href="#List的常用子类" class="headerlink" title="List的常用子类"></a>List的常用子类</h4><ul><li><code>ArrayList</code>：底层为<strong>数组</strong>，查询快，增删慢</li><li><code>LinkedList</code>：底层为<strong>链表</strong>，查询慢，增删快</li></ul><h5 id="LinkedList的特有功能"><a href="#LinkedList的特有功能" class="headerlink" title="LinkedList的特有功能"></a>LinkedList的特有功能</h5><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210604/image.4djqmgfh9mk0.png" alt="image"></p><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>除了不能重复之外，和他爹Collection没区别<br>另外，没有带索引的方法，所以不能用普通for遍历</p><p>同样，因为是接口，所以不能直接实例化（通过多态）</p><h4 id="哈希"><a href="#哈希" class="headerlink" title="哈希"></a>哈希</h4><p>Object类中，<code>hashCode()</code>方法可以获取对象的哈希值</p><ul><li>同一个对象多次调用，返回的哈希值相同</li><li>默认情况下，不同对象哈希值不同（除非重写了<code>hashCode()</code>）</li></ul><h4 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h4><ul><li>底层是<a href="https://www.bilibili.com/video/BV1sZ4y1H7gV?p=244&spm_id_from=pageDriver">哈希表（P244）</a></li><li>不保证有序</li></ul><blockquote><p>杂乱无章的小技巧时间：<code>Shift + Tab</code>取消缩进</p></blockquote><h4 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h4><p>特性如其名字，有序，不重复，是由哈希表和链表实现的Set接口</p><h4 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h4><p>特性如其名字（一说到Tree，就想到平衡树之类的嘛~）</p><ul><li>元素按照<strong>一定的规则</strong>进行排序，具体的排序方式取决于<strong>构造方法</strong>：<ul><li><code>TreeSet()</code>：根据元素的自然排序进行排序</li><li><code>TreeSet(Comparator cmp)</code>：根据比较器cmp进行排序</li></ul></li><li>没有带索引的方法，所以不能用普通for遍历</li><li>Set，因此不包含重复元素</li></ul><h5 id="Comparable"><a href="#Comparable" class="headerlink" title="Comparable"></a>Comparable</h5><p><strong>例1：</strong> <code>Integer</code>类内已经实现了<strong>自然排序的接口</strong><code>Comparable</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 注意！集合只能存引用类型</span><br>        <span class="hljs-comment">// 所以不能写int，而应该写int的包装类Integer</span><br>        <span class="hljs-comment">// p.s. Integer内部封装了把int转Integer的方法，所以可以直接add一个int</span><br>        TreeSet&lt;Integer&gt; ts = <span class="hljs-keyword">new</span> TreeSet&lt;&gt;();<br>        ts.add(<span class="hljs-number">14</span>);<br>        ts.add(<span class="hljs-number">18</span>);<br>        ts.add(<span class="hljs-number">16</span>);<br>        System.out.println(ts); <span class="hljs-comment">// [14, 16, 18]</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>例2：</strong> 自定义一个学生类，要求学生优先按照年龄小的输出，年龄相同的再比较姓名——<strong>需要在自定义的学生类里实现自然排序接口Comparable</strong><br>重写<code>compareTo()</code>：</p><ul><li>返回0：判定为<strong>相等</strong>（对于set来说，相等的元素只会被存进一个！）</li><li>返回正数：<strong>升序</strong>排列（即当前比较的元素排在被比较的后面）</li><li>返回附属：<strong>降序</strong>排列<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">Student</span>&gt;</span>&#123;<br>    ...<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(Student o)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> num = <span class="hljs-keyword">this</span>.age - o.age; <span class="hljs-comment">////// 升序，那么this放在前面哦！ //////</span><br>        <span class="hljs-keyword">int</span> ret = num == <span class="hljs-number">0</span> ? <span class="hljs-keyword">this</span>.name.compareTo(o.name) : num;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        TreeSet&lt;Student&gt; ts = <span class="hljs-keyword">new</span> TreeSet&lt;&gt;();<br>        Student s1 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;Illya&quot;</span>, <span class="hljs-number">10</span>);<br>        Student s2 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;Miyu&quot;</span>, <span class="hljs-number">10</span>);<br>        Student s3 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;Chloe&quot;</span>, <span class="hljs-number">9</span>);<br>        Student s4 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;Chloe&quot;</span>, <span class="hljs-number">9</span>);<br>        ts.add(s1);<br>        ts.add(s2);<br>        ts.add(s3);<br>        ts.add(s4);<br>        <span class="hljs-keyword">for</span>(Student s : ts) &#123;<br>            System.out.println(s.getName() + <span class="hljs-string">&quot;, &quot;</span> + s.getAge() + <span class="hljs-string">&quot;岁&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// Chloe, 9岁</span><br><span class="hljs-comment">// Illya, 10岁</span><br><span class="hljs-comment">// Miyu, 10岁</span><br></code></pre></td></tr></table></figure><h5 id="Comparator"><a href="#Comparator" class="headerlink" title="Comparator"></a>Comparator</h5>和上面一样的例子（使用了<strong>匿名内部类</strong>）<br>（这次，学生类里并没有实现自然排序接口）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        TreeSet&lt;Student&gt; ts = <span class="hljs-keyword">new</span> TreeSet&lt;&gt;(<span class="hljs-keyword">new</span> Comparator&lt;Student&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Student o1, Student o2)</span> </span>&#123;<br>                <span class="hljs-comment">// 因为在main方法里，所以this指代的是main</span><br>                <span class="hljs-comment">// o1相当于之前的this，o2相当于之前的o</span><br>                <span class="hljs-keyword">int</span> num = o1.getAge() - o2.getAge(); <span class="hljs-comment">// 不在类里，用getAge</span><br>                <span class="hljs-keyword">int</span> ret = num == <span class="hljs-number">0</span> ? o1.getName().compareTo(o2.getName()) : num;<br>                <span class="hljs-keyword">return</span> ret;<br>            &#125;<br>        &#125;);<br><br>        Student s1 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;Illya&quot;</span>, <span class="hljs-number">10</span>);<br>        Student s2 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;Miyu&quot;</span>, <span class="hljs-number">10</span>);<br>        Student s3 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;Chloe&quot;</span>, <span class="hljs-number">9</span>);<br>        Student s4 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;Chloe&quot;</span>, <span class="hljs-number">9</span>);<br>        ts.add(s1);<br>        ts.add(s2);<br>        ts.add(s3);<br>        ts.add(s4);<br>        <span class="hljs-keyword">for</span>(Student s : ts) &#123;<br>            System.out.println(s.getName() + <span class="hljs-string">&quot;, &quot;</span> + s.getAge() + <span class="hljs-string">&quot;岁&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><p>即 将原来具体的某一类型<strong>参数化</strong>，在使用/调用时再传入具体的类型<br>（类比C++ Template）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//注意啦注意啦！这里没加尖括号&lt;&gt;来指定类型</span><br>        Collection c = <span class="hljs-keyword">new</span> ArrayList();<br>        c.add(<span class="hljs-string">&quot;Izayoi&quot;</span>);<br>        c.add(<span class="hljs-string">&quot;Aster&quot;</span>);<br>        Iterator it = c.iterator();<br>        <span class="hljs-keyword">while</span> (it.hasNext()) &#123;<br>            System.out.println(it.next());<br>            <span class="hljs-comment">// 或</span><br>            Object o = it.next();<br>            System.out.println(o);<br>            <span class="hljs-comment">// 或</span><br>            String s = (String)it.next();<br>            System.out.println(s);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// Izayoi</span><br><span class="hljs-comment">// Aster</span><br><span class="hljs-comment">// （虽然IDEA给我画了满屏的波浪线Orz）</span><br></code></pre></td></tr></table></figure><h4 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>    <span class="hljs-keyword">public</span> T username;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">getUsername</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUsername</span><span class="hljs-params">(T username)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(T username)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.username = username;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        User&lt;String&gt; u = <span class="hljs-keyword">new</span> User&lt;&gt;(<span class="hljs-string">&quot;IzayoiAster&quot;</span>);<br>        <span class="hljs-comment">// User u = new User(&quot;IzayoiAster&quot;);，虽然IDEA显然也不希望你这么写</span><br>        System.out.println(u.getUsername());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h4><p>泛型接口的<strong>实现类</strong>仍为泛型类</p><h4 id="类型通配符"><a href="#类型通配符" class="headerlink" title="类型通配符"></a>类型通配符</h4><p>为了表示各种泛型的父类，可以使用类型通配符<code>&lt;?&gt;</code></p><p><code>List&lt;?&gt;</code>：表示元素类型未知的List（仅表示是各种泛型List的父类，并不能把元素加入其中）</p><p><strong>类型通配符上限：</strong> <code>&lt;? extends 类型&gt;</code><br>如<code>List&lt;? extends Number&gt;</code>，表示的类型是<strong>Number或其子类型</strong><br><strong>类型通配符下线：</strong> <code>&lt;? super 类型&gt;</code><br>如<code>List&lt;? super Number&gt;</code>，表示的类型是<strong>Number或其父类型</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;?&gt; l1 = <span class="hljs-keyword">new</span> ArrayList&lt;Object&gt;();<br>List&lt;?&gt; l2 = <span class="hljs-keyword">new</span> ArrayList&lt;Number&gt;();<br>List&lt;?&gt; l3 = <span class="hljs-keyword">new</span> ArrayList&lt;Integer&gt;();<br><span class="hljs-comment">// (Object -&gt; Number -&gt; Integer)</span><br><br>List&lt;? extends Number&gt; = <span class="hljs-keyword">new</span> ArrayList&lt;Object&gt;(); <span class="hljs-comment">// 报错！上限是Number！</span><br>List&lt;? <span class="hljs-keyword">super</span> Number&gt; = <span class="hljs-keyword">new</span> ArrayList&lt;Integer&gt;(); <span class="hljs-comment">// 报错！下限是Number！</span><br></code></pre></td></tr></table></figure><h4 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h4><p><code>(变量类型... 变量名)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span>... a)</span> </span>&#123; <span class="hljs-comment">// a是一个数组咯</span><br>        <span class="hljs-keyword">int</span> ret = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i : a) &#123;<br>            ret += i;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(sum(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：如果函数中出来可变参数还有其他参数，可变参数要<strong>放到最后</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> c, <span class="hljs-keyword">int</span>... a)</span> </span>&#123; ...<br></code></pre></td></tr></table></figure><h5 id="可变参数的使用"><a href="#可变参数的使用" class="headerlink" title="可变参数的使用"></a>可变参数的使用</h5><ul><li><p>Arrays类中有一个静态方法：<code>Arrays.asList(T... t)</code>，返回由<strong>指定数组</strong>组成的<strong>固定长度</strong>的列表。所以不能add、remove，能set</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; list = Arrays.asList(<span class="hljs-string">&quot;Izayoi&quot;</span>, <span class="hljs-string">&quot;Aster&quot;</span>, <span class="hljs-string">&quot;Lotus&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>List接口中有一个静态方法<code>List.of(E... e)</code>，同上，但是add、remove和set<strong>都不行（不能更改）</strong></p></li><li><p>Set接口中也有一个静态方法<code>Set.of(E... e)</code>，同上，只是<strong>不能重复</strong>（这里是不能重复，并不是自动去重，而是你给出的<code>E... e</code>里不能有重复的，不然会RE的）</p></li></ul><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p><code>Map&lt;Key, Value&gt;</code>；是接口，所以依然要通过多态来实例化</p><p>（类比C++）键不可重复</p><p>添加元素：<code>put(key, value)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Map&lt;String, String&gt; m = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        m.put(<span class="hljs-string">&quot;Illya&quot;</span>, <span class="hljs-string">&quot;伊莉雅&quot;</span>);<br>        m.put(<span class="hljs-string">&quot;Miyu&quot;</span>, <span class="hljs-string">&quot;美游&quot;</span>);<br>        m.put(<span class="hljs-string">&quot;Chloe&quot;</span>, <span class="hljs-string">&quot;克洛伊&quot;</span>);<br>        System.out.println(m); <span class="hljs-comment">// &#123;Illya=伊莉雅, Miyu=美游, Chloe=克洛伊&#125;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h4><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210604/image.77tpagxsgx40.png" alt="image"></p><h4 id="获取功能"><a href="#获取功能" class="headerlink" title="获取功能"></a>获取功能</h4><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210604/image.tf6yhdlrzcw.png" alt="image"></p><h4 id="遍历-1"><a href="#遍历-1" class="headerlink" title="遍历"></a>遍历</h4><ul><li>方法一：用<code>keySet()</code>方法获取所有<strong>键</strong>，再遍历所有键</li><li>方法二：用<code>entrySet()</code>方法获取所有<strong>键值对</strong>对象，再利用增强for，来得到每一个<code>Map.Entry</code>（Entry：条目），而<code>Map.Entry</code>有<code>getKey()</code>和<code>getValue()</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Map&lt;String, String&gt; m = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        m.put(<span class="hljs-string">&quot;Illya&quot;</span>, <span class="hljs-string">&quot;伊莉雅&quot;</span>);<br>        m.put(<span class="hljs-string">&quot;Miyu&quot;</span>, <span class="hljs-string">&quot;美游&quot;</span>);<br>        m.put(<span class="hljs-string">&quot;Chloe&quot;</span>, <span class="hljs-string">&quot;克洛伊&quot;</span>);<br><br>        Set&lt;Map.Entry&lt;String, String&gt;&gt; entrySet = m.entrySet(); <span class="hljs-comment">// Ctrl + Alt + V</span><br>        <span class="hljs-keyword">for</span>(Map.Entry&lt;String, String&gt; wife : entrySet) &#123;<br>            System.out.println(wife.getKey() + <span class="hljs-string">&quot;, &quot;</span> + wife.getValue());<br>        &#125;<br>    &#125;<br><span class="hljs-comment">//    Illya, 伊莉雅</span><br><span class="hljs-comment">//    Miyu, 美游</span><br><span class="hljs-comment">//    Chloe, 克洛伊</span><br>&#125;<br></code></pre></td></tr></table></figure>p.s. 集合是可以<strong>嵌套</strong>的哦，比如<code>ArrayList</code>存储<code>HashMap</code></li></ul><h3 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h3><p>里面均为静态方法，是一个针对集合操作的<strong>工具类</strong></p><p>常用方法：<code>sort(列表)</code>升序排序，<code>reverse(列表)</code>反转，<code>shuffle(列表)</code>：使用默认的随机源来随机排列指定的列表</p><blockquote><p><strong>哼！哼哼！啊啊啊啊啊啊啊啊啊啊啊啊！</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        List&lt;Integer&gt; list = Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">9</span>, <span class="hljs-number">1</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br><br>        Collections.sort(list);<br>        System.out.println(list); <span class="hljs-comment">// [0, 1, 1, 1, 1, 1, 1, 4, 4, 5, 8, 9, 9]</span><br><br>        Collections.reverse(list);<br>        System.out.println(list); <span class="hljs-comment">// [9, 9, 8, 5, 4, 4, 1, 1, 1, 1, 1, 1, 0]</span><br><br>        Collections.shuffle(list);<br>        System.out.println(list); <span class="hljs-comment">// [5, 8, 1, 1, 0, 1, 9, 1, 9, 1, 4, 1, 4]</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h2><p>分为字符流和字节流</p><ul><li>读的懂的东西用字符流，比如一篇txt格式的紫菀写的小黄文</li><li>读不懂的东西用字节流，比如一张jpg格式的紫菀化的小涩图（用记事本打开读不懂）<br>（如果不知道用什么流，就用万能的字节流）</li></ul><h3 id="File"><a href="#File" class="headerlink" title="File"></a>File</h3><p>File类是文件和目录<strong>路径</strong>名的抽象表示（不要理解成文件了哦~）</p><h4 id="构造-1"><a href="#构造-1" class="headerlink" title="构造"></a>构造</h4><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210604/image.1x9tapcoaxcw.png" alt="image"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        File f1 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;E:\\Aster\\diary.txt&quot;</span>);<br>        System.out.println(f1);<br><br>        File f2 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;E:\\Aster&quot;</span>, <span class="hljs-string">&quot;diary.txt&quot;</span>);<br>        System.out.println(f2);<br><br>        File f3 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;E:\\Aster&quot;</span>);<br>        File f4 = <span class="hljs-keyword">new</span> File(f3, <span class="hljs-string">&quot;diary.txt&quot;</span>);<br>        System.out.println(f4);<br>    &#125;<br><span class="hljs-comment">//    E:\Aster\diary.txt</span><br><span class="hljs-comment">//    E:\Aster\diary.txt</span><br><span class="hljs-comment">//    E:\Aster\diary.txt</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210604/image.6rdxma3hsr40.png" alt="image"></p><p><strong>createNewFile()</strong></p><ul><li>如果文件不存在，创建文件并返回true；反之false<br>（冷知识：如果有一个文件夹和文件重名，也是不能创建的）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        File f1 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;E:\\Aster\\diary.txt&quot;</span>);<br>        System.out.println(f1.createNewFile()); <span class="hljs-comment">// true</span><br>        <span class="hljs-comment">// 如果Aster文件夹不存在，会报错</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210604/image.67oi0x1dt5w0.png" alt="image"></li></ul><p><strong>mkdir()</strong></p><ul><li>如果文件夹不存在，创建文件夹并返回true；反之false（创建多级会false哦）</li></ul><p><strong>mkdirs()</strong></p><ul><li>“不愧是mkdirs，轻而易举地做到了mkdir想做却做不到的事！”</li></ul><h4 id="判断和获取"><a href="#判断和获取" class="headerlink" title="判断和获取"></a>判断和获取</h4><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210604/image.5h3q4vah6n40.png" alt="image"></p><p><a href="https://www.bilibili.com/video/BV1sZ4y1H7gV?p=276&spm_id_from=pageDriver">（逃 P276）</a></p><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p><code>delete()</code>：删除由此抽象路径名所表示的文件或目录</p><p>如果要删除的目录里<strong>有内容</strong>，该目录是<strong>不能直接删除</strong>的</p><h4 id="例：递归遍历目录"><a href="#例：递归遍历目录" class="headerlink" title="例：递归遍历目录"></a>例：递归遍历目录</h4><p>获取<code>E:\\Aster</code>下的所有文件，并输出它们的绝对路径（目录里可能有多级目录）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        File src = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;E:\\Aster&quot;</span>);<br>        getAllFile(src);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getAllFile</span><span class="hljs-params">(File srcFile)</span> </span>&#123;<br>        File[] files = srcFile.listFiles(); <span class="hljs-comment">// 获取当前目录下的所有目录和文件</span><br>        <span class="hljs-keyword">if</span> (files != <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// 增强for的健壮性检查，建议加上</span><br>            <span class="hljs-keyword">for</span> (File file : files) &#123;<br>                <span class="hljs-keyword">if</span> (file.isDirectory()) &#123; <span class="hljs-comment">// 如果是子目录</span><br>                    getAllFile(file);<br>                &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 否则，是文件，输出绝对路径</span><br>                    System.out.println(file.getAbsolutePath());<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h3><p><code>Input/OutputStream</code>：抽象类，所有字节输入/输出流的超类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;test.txt&quot;</span>);<br>        fos.write(<span class="hljs-number">97</span>); <span class="hljs-comment">// 注意啦！这里的97是字节码，即实际上写入了字符a</span><br>        fos.close(); <span class="hljs-comment">// 一定要关闭！</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="写数据"><a href="#写数据" class="headerlink" title="写数据"></a>写数据</h4><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/20210604/image.78edofnpu340.png" alt="image"><br>（方法三中，off即索引，从off处开始写）</p><p><strong>小技巧：</strong></p><ol><li>因为是写字节码，很麻烦，所以可以用<code>getBytes()</code>方法：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">fos.write(<span class="hljs-string">&quot;IzayoiAster&quot;</span>.getBytes());<br></code></pre></td></tr></table></figure></li><li>换行：<br>不同的操作系统对于换行符的要求是不同的！</li></ol><table><thead><tr><th>OS</th><th>换行符</th></tr></thead><tbody><tr><td>Windows</td><td>\r\n</td></tr><tr><td>Linux</td><td>\n</td></tr><tr><td>Mac</td><td>\r</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>.write(<span class="hljs-string">&quot;\r\n&quot;</span>.getBytes());<br></code></pre></td></tr></table></figure><ol start="3"><li>追加写入<br><code>FileOutputStream(String filename, boolean append)</code><br>如果传入第二个参数是<strong>true</strong>，那么就是追加写入，从文件的<strong>末尾</strong>开始写数据<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-keyword">true</span>);<br></code></pre></td></tr></table></figure><h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4></li></ol><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><p>其实多线程和网络也学了，但是不是很能抽空写（</p><p>寒假补上吧</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python学习笔记2（数据可视化）</title>
    <link href="/2021/06/02/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02%EF%BC%88%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%EF%BC%89/"/>
    <url>/2021/06/02/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02%EF%BC%88%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="绘制简单的折线图"><a href="#绘制简单的折线图" class="headerlink" title="绘制简单的折线图"></a>绘制简单的折线图</h2><h3 id="安装Matplotlib"><a href="#安装Matplotlib" class="headerlink" title="安装Matplotlib"></a>安装Matplotlib</h3><p><code>python -m pip install --user matplotlib</code></p><p>一个简单的例子</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>squares = [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>]<br>fig, ax = plt.subplots()<br>ax.plot(squares)<br><br>plt.show()<br></code></pre></td></tr></table></figure><p>说明：</p><ul><li><code>subplots()</code>可以在一张图片中绘制（一个或多个）图表</li><li><code>fig</code>表示整张图片</li><li><code>ax</code>表示图片中的各个图表</li><li><code>plot()</code>尝试根据给定的数据以有意义的方式绘制图表</li><li><code>plt.show()</code>打开Matplotlib查看器并显示绘制的图表</li></ul><p>效果如下：<br><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/img/image.23nfjpbdhpy8.png" alt="image"></p><p>发现很简陋，做一下修改</p><blockquote><p>pyplot默认中文是乱码，有很多种解决方案，但我觉得最好的还是在用到中文的地方后追加<code>fontproperties = &#39;Microsoft YaHei&#39;</code><br><a href="https://blog.csdn.net/hoxily/article/details/44240395">查询中文字体对应的英文名点我</a></p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># -!- coding: utf-8 -!-</span><br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>squares = [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>]<br>fig, ax = plt.subplots()<br><br><span class="hljs-comment"># linewidth决定线条粗细</span><br>ax.plot(squares, linewidth = <span class="hljs-number">3</span>)<br><br><span class="hljs-comment"># 设置标题及坐标轴标签</span><br>ax.set_title(<span class="hljs-string">&quot;平方数&quot;</span>, fontsize = <span class="hljs-number">24</span>, fontproperties = <span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>)<br>ax.set_xlabel(<span class="hljs-string">&quot;值&quot;</span>, fontsize = <span class="hljs-number">14</span>, fontproperties = <span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>)<br>ax.set_ylabel(<span class="hljs-string">&quot;值的平方&quot;</span>, fontsize = <span class="hljs-number">14</span>, fontproperties = <span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>)<br><br><span class="hljs-comment"># 设置刻度标记的大小（axis = &#x27;both&#x27;：同时更改所有坐标轴）</span><br>ax.tick_params(axis = <span class="hljs-string">&#x27;both&#x27;</span>, labelsize = <span class="hljs-number">14</span>)<br><br>plt.show()<br></code></pre></td></tr></table></figure><p>结果如下：<br><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/img/image.6up2pl7vi340.png" alt="image"></p><p>发现，pyplot的自动生成数据好像不是很聪明，没有正确地绘制数据——折线图终点指出4的平方是25显然是不对的，下面来修复</p><p>向pyplot提供数据的时候，它会假设 x 从 0 开始，但是我们这里显然是从 1 开始。需要向pyplot<strong>同时提供输入值和输出值</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py">...<br>input_values = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>] <span class="hljs-comment"># x</span><br>squares = [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>] <span class="hljs-comment"># y</span><br>...<br>ax.plot(input_values, squares, linewidth = <span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><p>正常啦！<br><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/img/image.6jkthl0rnus0.png" alt="image"></p><h3 id="使用内置样式"><a href="#使用内置样式" class="headerlink" title="使用内置样式"></a>使用内置样式</h3><p>查看有什么内置样式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-meta">&gt;&gt;&gt; </span>plt.style.available<br>[<span class="hljs-string">&#x27;Solarize_Light2&#x27;</span>, <span class="hljs-string">&#x27;_classic_test_patch&#x27;</span>, <span class="hljs-string">&#x27;bmh&#x27;</span>, <span class="hljs-string">&#x27;classic&#x27;</span>, <span class="hljs-string">&#x27;dark_background&#x27;</span>, <span class="hljs-string">&#x27;fast&#x27;</span>, <span class="hljs-string">&#x27;fivethirtyeight&#x27;</span>, <span class="hljs-string">&#x27;ggplot&#x27;</span>, <span class="hljs-string">&#x27;grayscale&#x27;</span>, <span class="hljs-string">&#x27;seaborn&#x27;</span>, <span class="hljs-string">&#x27;seaborn-bright&#x27;</span>, <span class="hljs-string">&#x27;seaborn-colorblind&#x27;</span>, <span class="hljs-string">&#x27;seaborn-dark&#x27;</span>, <span class="hljs-string">&#x27;seaborn-dark-palette&#x27;</span>, <span class="hljs-string">&#x27;seaborn-darkgrid&#x27;</span>, <span class="hljs-string">&#x27;seaborn-deep&#x27;</span>, <span class="hljs-string">&#x27;seaborn-muted&#x27;</span>, <span class="hljs-string">&#x27;seaborn-notebook&#x27;</span>, <span class="hljs-string">&#x27;seaborn-paper&#x27;</span>, <span class="hljs-string">&#x27;seaborn-pastel&#x27;</span>, <span class="hljs-string">&#x27;seaborn-poster&#x27;</span>, <span class="hljs-string">&#x27;seaborn-talk&#x27;</span>, <span class="hljs-string">&#x27;seaborn-ticks&#x27;</span>, <span class="hljs-string">&#x27;seaborn-white&#x27;</span>, <span class="hljs-string">&#x27;seaborn-whitegrid&#x27;</span>, <span class="hljs-string">&#x27;tableau-colorblind10&#x27;</span>]<br></code></pre></td></tr></table></figure><p>使用样式：<br>在<strong>生成图表</strong>的代码前添加：<br><code>plt.style.use(&#39;seaborn-dark-palette&#39;)</code></p><h3 id="scatter-散点图"><a href="#scatter-散点图" class="headerlink" title="scatter( ) 散点图"></a>scatter( ) 散点图</h3><ol><li>向方法<code>scatter()</code>传递一对xy坐标，它将在(x, y)绘制一个点<br><code>ax.scatter(x, y)</code></li><li>向方法<code>scatter()</code>传递两个<strong>分别</strong>包含<strong>x值</strong>和<strong>y值</strong>的列表，可以绘制一系列的点</li></ol><p>（里面出现了新东西<code>ax.axis()设定坐标轴范围</code>）</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># -!- coding: utf-8 -!-</span><br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x_values = <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1001</span>) <span class="hljs-comment"># scatter是可以直接接收range的哦~</span><br>y_values = [x ** <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> x_values] <span class="hljs-comment"># 循环生成y值</span><br><br>plt.style.use(<span class="hljs-string">&#x27;seaborn&#x27;</span>)<br>fig, ax = plt.subplots()<br>ax.scatter(x_values, y_values, s = <span class="hljs-number">10</span>) <span class="hljs-comment"># s 设置散点的尺寸</span><br><br><span class="hljs-comment"># 设置标题及坐标轴标签</span><br>ax.set_title(<span class="hljs-string">&quot;平方数&quot;</span>, fontsize = <span class="hljs-number">24</span>, fontproperties = <span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>)<br>ax.set_xlabel(<span class="hljs-string">&quot;值&quot;</span>, fontsize = <span class="hljs-number">14</span>, fontproperties = <span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>)<br>ax.set_ylabel(<span class="hljs-string">&quot;值的平方&quot;</span>, fontsize = <span class="hljs-number">14</span>, fontproperties = <span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>)<br><br><span class="hljs-comment"># 设置刻度标记的大小（axis = &#x27;both&#x27;：同时更改所有坐标轴）</span><br>ax.tick_params(axis = <span class="hljs-string">&#x27;both&#x27;</span>, labelsize = <span class="hljs-number">14</span>)<br><br><span class="hljs-comment"># 设定各个坐标轴的取值范围</span><br>ax.axis([<span class="hljs-number">0</span>, <span class="hljs-number">1100</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1100000</span>])<br><br>plt.show()<br></code></pre></td></tr></table></figure><p>效果：<br><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/img/image.5dr3veuab1s0.png" alt="image"></p><h3 id="设置颜色"><a href="#设置颜色" class="headerlink" title="设置颜色"></a>设置颜色</h3><p>向scatter()传递参数c以设置颜色<br>可以是颜色的名称，也可以是RGB颜色</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py">ax.scatter(x_values, y_values, c = <span class="hljs-string">&#x27;red&#x27;</span>, s = <span class="hljs-number">10</span>)<br>ax.scatter(x_values, y_values, c = (<span class="hljs-number">0</span>, <span class="hljs-number">0.8</span>, <span class="hljs-number">0</span>), s = <span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure><p>也可以使用<strong>颜色映射</strong>（colormap），让scatter()按照一定的规律渐变颜色</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">ax.scatter(x_values, y_values, c = y_values, cmap = plt.cm.Blues, s = <span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure><p>效果如下：<br><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/img/image.lhjrr83c28w.png" alt="image"></p><h3 id="自动保存图表"><a href="#自动保存图表" class="headerlink" title="自动保存图表"></a>自动保存图表</h3><p>将调用<code>plt.show()</code>替换为<code>plt.savefig()</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">plt.savefig(<span class="hljs-string">&#x27;test.png&#x27;</span>, bbox_inches = <span class="hljs-string">&#x27;tight&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li>第一个实参指定文件名</li><li>第二个实参会将图表<strong>多余的空白区域</strong>裁剪掉（如果不想裁剪，不加第二个参数即可）</li></ul><h3 id="调整尺寸以适合屏幕"><a href="#调整尺寸以适合屏幕" class="headerlink" title="调整尺寸以适合屏幕"></a>调整尺寸以适合屏幕</h3><p>创建图表时，可以传递参数<strong>figsize</strong>以指定生成的图形的尺寸，需要给参数figsize指定一个<strong>元组</strong>，告诉Matplotlib绘图窗口的尺寸，单位为英寸（inch）（ 1 inch  ≈ 2.54 cm ）<br>如果知道当前系统的分辨率，还可以传递参数<strong>dpi</strong> (dots per inch，图像每英寸长度内的像素点数) 以有效利用屏幕空间</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">fig, ax = plt.subplots(figsize = (<span class="hljs-number">10</span>, <span class="hljs-number">6</span>), dpi = <span class="hljs-number">128</span>)<br></code></pre></td></tr></table></figure><blockquote><p>（有一个应用实例见P284，看了一遍感觉再写进来的意义不是很大，上面已经把一些实例里的新东西写进来了）</p></blockquote><blockquote><p>还有一个Python包Ployly，我感觉大同小异，也就不写了，见P292</p></blockquote><h2 id="CSV"><a href="#CSV" class="headerlink" title="CSV"></a>CSV</h2><h3 id="分析CSV文件头"><a href="#分析CSV文件头" class="headerlink" title="分析CSV文件头"></a>分析CSV文件头</h3><blockquote><p>CSV：以逗号分隔的值，comma-separated values</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> csv<br><br>filename = <span class="hljs-string">&#x27;...&#x27;</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename) <span class="hljs-keyword">as</span> f:<br>    reader = csv.reader(f)<br>    header_row = <span class="hljs-built_in">next</span>(reader)<br>    print(header_row)<br></code></pre></td></tr></table></figure><ul><li>调用<code>csv.reader(f)</code>，会返回一个关联到文件f的CSV阅读器对象，将这个阅读器对象赋给reader</li><li>csv模块中，包含函数<code>next()</code>，使用<code>next(reader)</code>，会返回csv阅读器reader的<strong>下一行</strong>；（上面的代码中，只调用了<code>next()</code>一次，所以得到的是文件的第一行，其中包含文件头）</li></ul><p>上述代码中的<code>print(header_row)</code>输出如下：<br><code>[&#39;NAME&#39;, &#39;ADDRESS&#39;, &#39;AGE&#39;, &#39;BIRTHDAY&#39;...]</code><br>也可以替换为这两句，来获取每个元素的索引及其值：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">for</span> index, column_header <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(header_row):<br>    print(index, column_header)<br></code></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-number">0</span> NAME<br><span class="hljs-number">1</span> <span class="hljs-keyword">ADDRESS</span><br><span class="hljs-keyword">2 </span>AGE<br><span class="hljs-number">3</span> <span class="hljs-keyword">BIRTHDAY</span><br><span class="hljs-keyword">...</span><br></code></pre></td></tr></table></figure><p>↑ 在上述for循环中，对列表调用了<code>enumerate()</code>来获取每个元素的<strong>索引</strong>及其<strong>值</strong></p><h3 id="提取并读取数据"><a href="#提取并读取数据" class="headerlink" title="提取并读取数据"></a>提取并读取数据</h3><p>以读取年龄为例</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> csv<br><br>filename = <span class="hljs-string">&#x27;...&#x27;</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename) <span class="hljs-keyword">as</span> f:<br>    reader = csv.reader(f)<br>    header_row = <span class="hljs-built_in">next</span>(reader)<br>    <br>    ages = [] <span class="hljs-comment"># 创建名为ages的空列表</span><br>    <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> reader: <span class="hljs-comment"># 遍历csv文件中余下的每一行</span><br>        age = <span class="hljs-built_in">int</span>(row[<span class="hljs-number">2</span>]) <span class="hljs-comment"># 由上面的分析csv文件头可知，年龄是第三列</span><br>        ages.append(age)<br></code></pre></td></tr></table></figure><h3 id="绘制图表"><a href="#绘制图表" class="headerlink" title="绘制图表"></a>绘制图表</h3><h4 id="datetime模块"><a href="#datetime模块" class="headerlink" title="datetime模块"></a>datetime模块</h4><p>比如说，要获取csv里每个人的生日<br>其中是这么存储的：<br><code>&quot;Lotus&quot;, &quot;Shenzhen&quot;, &quot;17&quot;, &quot;2002-9-16&quot;, ...</code><br>我们需要想办法，把”2002-9-16”转换为一个<strong>表示相应日期的对象</strong><br>可以使用模块datetime中的<code>strptime()</code>方法，将<strong>包含所需日期的字符串</strong>作为第一个实参，第二个实参用来告诉Python<strong>如何设置日期的格式</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> strptime<br>birthday = datetime.strptime(<span class="hljs-string">&quot;2002-9-16&quot;</span>, <span class="hljs-string">&quot;%Y-%m-%d&quot;</span>)<br></code></pre></td></tr></table></figure><p>在这里，</p><ul><li><code>%Y-</code>让python将字符串中的第一个<code>-</code>前面的部分视为四位的年份</li><li><code>%m-</code>让python将字符串中的第二个<code>-</code>前面的部分视为表示月份的数</li><li><code>%d</code>让python将字符串中的最后一部分视为月份中的一天<br>（类比C++中的格式控制符）</li></ul><p>一些常用实参如下：</p><table><thead><tr><th>实参</th><th>含义</th></tr></thead><tbody><tr><td>%A</td><td>星期几，如Monday</td></tr><tr><td>%B</td><td>月份名，如September</td></tr><tr><td>%m</td><td>用数表示的月份，01~12</td></tr><tr><td>%d</td><td>用数表示的月中某天，01~31</td></tr><tr><td>%Y</td><td>四位数年份</td></tr><tr><td>%y</td><td>年份后两位</td></tr><tr><td>%H</td><td>24小时制的小时数，00~23</td></tr><tr><td>%I</td><td>12小时制的小时数，01~12</td></tr><tr><td>%p</td><td>am或pm</td></tr><tr><td>%M</td><td>分钟数，00~59</td></tr><tr><td>%S</td><td>秒数， 00~61</td></tr><tr><td><del>（没错，就是到61秒）</del></td><td></td></tr></tbody></table><blockquote><p>p.s. <code>strftime()</code>是转换为特定格式输出，而<code>strptime()</code>是将一个（时间）字符串解析为时间的一个类型对象</p></blockquote><p>下面是一个例子：统计文件中，人们的出生日期，并且绘制出生日期和年龄的折线图 <strong>（没错，我都感觉这个例子太√⑧奇怪了；还不是因为我想和书上有点区别却又想了个这么不合适的情景555）</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> csv<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> strptime<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>filename = <span class="hljs-string">&#x27;...&#x27;</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename) <span class="hljs-keyword">as</span> f:<br>    reader = csv.reader(f)<br>    header_row = <span class="hljs-built_in">next</span>(reader) <span class="hljs-comment"># 先读掉文件头再说</span><br><br>    birthdays, ages = [], []<br>    <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> reader:<br>        <span class="hljs-comment"># 上文里假设了生日是第四列，年龄是第三列</span><br>        current_date = datetime.strptime(row[<span class="hljs-number">3</span>], <span class="hljs-string">&quot;%Y-%m-%d&quot;</span>)<br>        age = <span class="hljs-built_in">int</span>(row[<span class="hljs-number">2</span>])<br>        birthdays.append(current_date)<br>        ages.append(age)<br><br>fig, ax = plt.subplots()<br>ax.plot(birthdays, ages) <span class="hljs-comment"># 数据导入图表</span><br><br>ax.set_title(<span class="hljs-string">&quot;意义不明的生日年龄表&quot;</span>)<br><br>ax.set_xlabel(<span class="hljs-string">&#x27;&#x27;</span>, fontsize = <span class="hljs-number">16</span>)<br>fig.autofmt_xdate() <span class="hljs-comment">#见下</span><br><span class="hljs-meta">... </span><br><span class="hljs-meta">... </span><br></code></pre></td></tr></table></figure><p>其中<code>fig.autofmt_xdate()</code>是使绘制的日期标签<strong>倾斜</strong>，以避免其重叠</p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p><code>fill_between()</code>接受<strong>一个</strong>x值系列和<strong>两个</strong>y值系列，并<strong>填充</strong>两个y值系列之间的空间</p><ul><li>facecolor实参用于指定颜色</li><li>alpha实参用于设置透明度（0~1），1为完全不透明<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">ax.fill_between(dates, highs, lows, fac3color = <span class="hljs-string">&#x27;blue&#x27;</span>, alpha = <span class="hljs-number">0.1</span>)<br></code></pre></td></tr></table></figure><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2>p.s. 若得到的json杂乱无章吗，可以用python格式化一下<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py">...<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(new_readable_file, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    json.dump(origin_data, f, indent=<span class="hljs-number">4</span>) <span class="hljs-comment"># indent=4，缩进4</span><br></code></pre></td></tr></table></figure><blockquote><p>视情况再写，P314</p></blockquote></li></ul><h2 id="使用API"><a href="#使用API" class="headerlink" title="使用API"></a>使用API</h2><blockquote><p>API：Application Programming Interface，应用程序接口</p></blockquote><h3 id="安装Requests"><a href="#安装Requests" class="headerlink" title="安装Requests"></a>安装Requests</h3><p><code>python -m pip install --user requests</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-comment"># 这个API返回GitHub当前托管了多少个Python项目，以及有关最受欢迎的Python项目的信息</span><br>url = <span class="hljs-string">&#x27;https://api.github.com/search/repositories?q=language:python&amp;sort=stars&#x27;</span><br><br><span class="hljs-comment"># 显式地调用第三版的GitHub API</span><br>headers = &#123;<span class="hljs-string">&#x27;Accept&#x27;</span>: <span class="hljs-string">&#x27;application/vnd.github.v3+json&#x27;</span>&#125;<br><span class="hljs-comment"># 将响应对象赋给变量r</span><br>r = requests.get(url, headers=headers)<br><br><span class="hljs-comment"># 状态码200意味成功</span><br>print(<span class="hljs-string">f&quot;Status cpde: <span class="hljs-subst">&#123;r.status_code&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># 这个API返回json格式的信息，因此用json()方法将信息转换为一个Python字典</span><br>response_dict = r.json()<br><br>print(response_dict.keys())<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">Status cpde: <span class="hljs-number">200</span><br><span class="hljs-function"><span class="hljs-title">dict_keys</span><span class="hljs-params">([<span class="hljs-string">&#x27;total_count&#x27;</span>, <span class="hljs-string">&#x27;incomplete_results&#x27;</span>, <span class="hljs-string">&#x27;items&#x27;</span>])</span></span><br></code></pre></td></tr></table></figure><h3 id="处理响应字典"><a href="#处理响应字典" class="headerlink" title="处理响应字典"></a>处理响应字典</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&#x27;https://api.github.com/search/repositories?q=language:python&amp;sort=stars&#x27;</span><br>headers = &#123;<span class="hljs-string">&#x27;Accept&#x27;</span>: <span class="hljs-string">&#x27;application/vnd.github.v3+json&#x27;</span>&#125;<br>r = requests.get(url, headers=headers)<br>print(<span class="hljs-string">f&quot;Status cpde: <span class="hljs-subst">&#123;r.status_code&#125;</span>&quot;</span>)<br><br>response_dict = r.json()<br><span class="hljs-comment"># 打印total_count：GitHub一共有多少个python仓库</span><br>print(<span class="hljs-string">f&quot;Total repositories: <span class="hljs-subst">&#123;response_dict[<span class="hljs-string">&#x27;total_count&#x27;</span>]&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># 与&#x27;items&#x27;关联的是一个列表，列表中有很多字典，而每个字典又包含一个有关python仓库的信息。打印repo_dicts以获悉获得了多少个仓库的信息</span><br>repo_dicts = response_dict[<span class="hljs-string">&#x27;items&#x27;</span>]<br>print(<span class="hljs-string">f&quot;Respositories returned: <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(repo_dicts)&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># 提取第一个字典看一看</span><br><span class="hljs-comment">######################################</span><br>repo_dict = repo_dicts[<span class="hljs-number">0</span>]<br>print(<span class="hljs-string">f&quot;\nKeys: <span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(repo_dict)&#125;</span>&quot;</span>)<br><span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> <span class="hljs-built_in">sorted</span>(repo_dict.keys()):<br>    print(key)<br><span class="hljs-comment">######################################</span><br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs txt">Status cpde: 200<br>Total repositories: 7353231<br>Respositories returned: 30 <br><br>Keys: 74<br>archive_url<br>archived<br>...<br></code></pre></td></tr></table></figure><p>修改一下上述程序#####之间的程序段，以便能提取出我们想要的有关第一个字典（第一个仓库）的相关信息：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs py">...<br><span class="hljs-comment">########################################################</span><br>repo_dict = repo_dicts[<span class="hljs-number">0</span>]<br>print(<span class="hljs-string">&quot;\nSelected information about first repository：&quot;</span>)<br>print(<span class="hljs-string">f&quot;Name: <span class="hljs-subst">&#123;repo_dict[<span class="hljs-string">&#x27;name&#x27;</span>]&#125;</span>&quot;</span>)<br>print(<span class="hljs-string">f&quot;Owner: <span class="hljs-subst">&#123;repo_dict[<span class="hljs-string">&#x27;owner&#x27;</span>][<span class="hljs-string">&#x27;login&#x27;</span>]&#125;</span>&quot;</span>)<br>print(<span class="hljs-string">f&quot;Stars: <span class="hljs-subst">&#123;repo_dict[<span class="hljs-string">&#x27;stargazers_count&#x27;</span>]&#125;</span>&quot;</span>)<br>print(<span class="hljs-string">f&quot;Repository: <span class="hljs-subst">&#123;repo_dict[<span class="hljs-string">&#x27;html_url&#x27;</span>]&#125;</span>&quot;</span>)<br><span class="hljs-comment">########################################################</span><br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs txt">Status cpde: 200<br>Total repositories: 7278320<br>Respositories returned: 30<br><br>Selected information about first repository：<br>Name: system-design-primer<br>Owner: donnemartin<br>Stars: 133664<br>Repository: https://github.com/donnemartin/system-design-primer<br></code></pre></td></tr></table></figure><h3 id="使用Plotly可视化仓库"><a href="#使用Plotly可视化仓库" class="headerlink" title="使用Plotly可视化仓库"></a>使用Plotly可视化仓库</h3><p>（好吧，其实之前没写Plotly也有一部分是因为反正写到这儿也要写）</p><h4 id="安装Plotly"><a href="#安装Plotly" class="headerlink" title="安装Plotly"></a>安装Plotly</h4><p><code>python -m pip install --user plotly</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># -!- coding: utf-8 -!-</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> plotly.graph_objs <span class="hljs-keyword">import</span> Bar<br><span class="hljs-keyword">from</span> plotly <span class="hljs-keyword">import</span> offline<br><br>url = <span class="hljs-string">&#x27;https://api.github.com/search/repositories?q=language:python&amp;sort=stars&#x27;</span><br>headers = &#123;<span class="hljs-string">&#x27;Accept&#x27;</span>: <span class="hljs-string">&#x27;application/vnd.github.v3+json&#x27;</span>&#125;<br>r = requests.get(url, headers=headers)<br>print(<span class="hljs-string">f&quot;Status code: <span class="hljs-subst">&#123;r.status_code&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># 处理结果</span><br>response_dict = r.json()<br>repo_dicts = response_dict[<span class="hljs-string">&#x27;items&#x27;</span>]<br><span class="hljs-comment">################## NEW ##################</span><br>repo_names, stars = [], []<br><span class="hljs-keyword">for</span> repo_dict <span class="hljs-keyword">in</span> repo_dicts:<br>    repo_names.append(repo_dict[<span class="hljs-string">&#x27;name&#x27;</span>])<br>    stars.append(repo_dict[<span class="hljs-string">&#x27;stargazers_count&#x27;</span>])<br><br><span class="hljs-comment"># 可视化</span><br>data = [&#123; <span class="hljs-comment"># 列表data包含一个字典，指定图表的类型并提供xy值</span><br>    <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;bar&#x27;</span>,<br>    <span class="hljs-string">&#x27;x&#x27;</span>: repo_names,<br>    <span class="hljs-string">&#x27;y&#x27;</span>: stars,<br>&#125;]<br>my_layout = &#123; <span class="hljs-comment"># 使用字典定义图表的布局</span><br>    <span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;GitHub上最受欢迎的Python项目&#x27;</span>,<br>    <span class="hljs-string">&#x27;xaxis&#x27;</span>: &#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;Repository&#x27;</span>&#125;,<br>    <span class="hljs-string">&#x27;yaxis&#x27;</span>: &#123;<span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;Stars&#x27;</span>&#125;,<br>&#125;<br><br>fig = &#123;<br>    <span class="hljs-string">&#x27;data&#x27;</span>: data,<br>    <span class="hljs-string">&#x27;layout&#x27;</span>: my_layout,<br>&#125;<br>offline.plot(fig, filename=<span class="hljs-string">&#x27;python_repos.html&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/img/image.59w9u8awfcg0.png" alt="image"></p><h4 id="改进Plotly图表"><a href="#改进Plotly图表" class="headerlink" title="改进Plotly图表"></a>改进Plotly图表</h4><p>可以在 <strong>data</strong> 和 <strong>my_layout</strong> 中，以<strong>键值对</strong>的形式指定各种样式</p><ol><li>通过修改data，可以定制条形<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs py">data = [&#123;<br>    <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;bar&#x27;</span>,<br>    <span class="hljs-string">&#x27;x&#x27;</span>: repo_names,<br>    <span class="hljs-string">&#x27;y&#x27;</span>: stars,<br>    <span class="hljs-string">&#x27;marker&#x27;</span>: &#123;<br>        <span class="hljs-comment"># 条形颜色</span><br>        <span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;rgb(60, 100, 150)&#x27;</span>,<br>        <span class="hljs-comment"># 条形边框</span><br>        <span class="hljs-string">&#x27;line&#x27;</span>: &#123;<span class="hljs-string">&#x27;width&#x27;</span>: <span class="hljs-number">1.5</span>, <span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;rgb(25, 25, 25)&#x27;</span>&#125;<br>    &#125;,<br>    <span class="hljs-comment"># 条形不透明度</span><br>    <span class="hljs-string">&#x27;opacity&#x27;</span>: <span class="hljs-number">0.6</span>,<br>&#125;]<br></code></pre></td></tr></table></figure></li><li>修改my_layout更改其他布局<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs py">my_layout = &#123;<br>    <span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;GitHub上最受欢迎的Python项目&#x27;</span>,<br>    <span class="hljs-string">&#x27;xaxis&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;Repository&#x27;</span>,<br>        <span class="hljs-string">&#x27;titlefont&#x27;</span>: &#123;<span class="hljs-string">&#x27;size&#x27;</span>: <span class="hljs-number">24</span>&#125;,<br>        <span class="hljs-string">&#x27;tickfont&#x27;</span>: &#123;<span class="hljs-string">&#x27;size&#x27;</span>: <span class="hljs-number">14</span>&#125;, <span class="hljs-comment"># 刻度标签字号</span><br>    &#125;,<br>    <span class="hljs-string">&#x27;yaxis&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;Stars&#x27;</span>,<br>        <span class="hljs-string">&#x27;titlefont&#x27;</span>: &#123;<span class="hljs-string">&#x27;size&#x27;</span>: <span class="hljs-number">24</span>&#125;,<br>        <span class="hljs-string">&#x27;tickfont&#x27;</span>: &#123;<span class="hljs-string">&#x27;size&#x27;</span>: <span class="hljs-number">14</span>&#125;, <span class="hljs-comment"># 刻度标签字号</span><br>    &#125;,<br>&#125;<br></code></pre></td></tr></table></figure>效果如下：<br><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/img/image.7dz1sa9wzhc0.png" alt="image"></li></ol><h5 id="添加自定义工具提示"><a href="#添加自定义工具提示" class="headerlink" title="添加自定义工具提示"></a>添加自定义工具提示</h5><p>在Plotly中，将鼠标指向条形将显示其表示的信息，称为<strong>工具提示</strong><br>下面来创建工具提示，以显示项目的描述和所有者</p><p>为此，需要再提取一些信息并修改对象data</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs py">...<br><span class="hljs-comment"># 处理结果</span><br>response_dict = r.json()<br>repo_dicts = response_dict[<span class="hljs-string">&#x27;items&#x27;</span>]<br>repo_names, stars, labels = [], [], [] <span class="hljs-comment">#### NEW ####</span><br><span class="hljs-keyword">for</span> repo_dict <span class="hljs-keyword">in</span> repo_dicts:<br>    repo_names.append(repo_dict[<span class="hljs-string">&#x27;name&#x27;</span>])<br>    stars.append(repo_dict[<span class="hljs-string">&#x27;stargazers_count&#x27;</span>])<br><br>    <span class="hljs-comment">#### NEW ####</span><br>    owner = repo_dict[<span class="hljs-string">&#x27;owner&#x27;</span>][<span class="hljs-string">&#x27;login&#x27;</span>]<br>    description = repo_dict[<span class="hljs-string">&#x27;description&#x27;</span>]<br>    label = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;owner&#125;</span>&lt;br /&gt;<span class="hljs-subst">&#123;description&#125;</span>&quot;</span><br>    labels.append(label)<br><br><span class="hljs-comment"># 可视化</span><br>data = [&#123;<br>    <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;bar&#x27;</span>,<br>    <span class="hljs-string">&#x27;x&#x27;</span>: repo_names,<br>    <span class="hljs-string">&#x27;y&#x27;</span>: stars,<br>    <span class="hljs-string">&#x27;hovertext&#x27;</span>: labels, <span class="hljs-comment">#### NEW ####</span><br>    <span class="hljs-string">&#x27;marker&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;rgb(60, 100, 150)&#x27;</span>,<br>        <span class="hljs-string">&#x27;line&#x27;</span>: &#123;<span class="hljs-string">&#x27;width&#x27;</span>: <span class="hljs-number">1.5</span>, <span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;rgb(25, 25, 25)&#x27;</span>&#125;<br>    &#125;,<br>    <span class="hljs-string">&#x27;opacity&#x27;</span>: <span class="hljs-number">0.6</span>,<br>&#125;]<br>my_layout = &#123;<br>...<br></code></pre></td></tr></table></figure><p>新建一个空列表labels，用于存储要给各个项目（各个条形）显示的文本<br>Plotly允许在文本元素中使用<strong>HTML代码</strong>（注意规范的换行符 br 和 / 间有空格）</p><p>效果如下：<br><img src="https://cdn.jsdelivr.net/gh/IzayoiAster/-@master/img/image.11xbfy3ywfhs.png" alt="image"></p><h5 id="添加可单击的链接"><a href="#添加可单击的链接" class="headerlink" title="添加可单击的链接"></a>添加可单击的链接</h5><p>下面来实现点击x轴对应的项目名来跳转至相应的GitHub主页</p><p>上文中，x轴对应的值的列表是<code>repo_names</code>，我们先改名为<code>repo_links</code>使程序更为清晰<br>修改处理结果的部分程序，并将data中x的数据源换为<code>repo_links</code></p><p><strong>最终完整程序</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># -!- coding: utf-8 -!-</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> plotly.graph_objs <span class="hljs-keyword">import</span> Bar<br><span class="hljs-keyword">from</span> plotly <span class="hljs-keyword">import</span> offline<br><br>url = <span class="hljs-string">&#x27;https://api.github.com/search/repositories?q=language:python&amp;sort=stars&#x27;</span><br>headers = &#123;<span class="hljs-string">&#x27;Accept&#x27;</span>: <span class="hljs-string">&#x27;application/vnd.github.v3+json&#x27;</span>&#125;<br>r = requests.get(url, headers=headers)<br>print(<span class="hljs-string">f&quot;Status cpde: <span class="hljs-subst">&#123;r.status_code&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># 处理结果</span><br>response_dict = r.json()<br>repo_dicts = response_dict[<span class="hljs-string">&#x27;items&#x27;</span>]<br>repo_links, stars, labels = [], [], [] <br><span class="hljs-keyword">for</span> repo_dict <span class="hljs-keyword">in</span> repo_dicts:<br>    repo_name = repo_dict[<span class="hljs-string">&#x27;name&#x27;</span>]<br>    repo_url = repo_dict[<span class="hljs-string">&#x27;html_url&#x27;</span>]<br>    repo_link = <span class="hljs-string">f&quot;&lt;a href=&#x27;<span class="hljs-subst">&#123;repo_url&#125;</span>&#x27;&gt;<span class="hljs-subst">&#123;repo_name&#125;</span>&lt;/a&gt;&quot;</span><br>    repo_links.append(repo_link)<br><br>    stars.append(repo_dict[<span class="hljs-string">&#x27;stargazers_count&#x27;</span>])<br><br>    owner = repo_dict[<span class="hljs-string">&#x27;owner&#x27;</span>][<span class="hljs-string">&#x27;login&#x27;</span>]<br>    description = repo_dict[<span class="hljs-string">&#x27;description&#x27;</span>]<br>    label = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;owner&#125;</span>&lt;br /&gt;<span class="hljs-subst">&#123;description&#125;</span>&quot;</span><br>    labels.append(label)<br><br><span class="hljs-comment"># 可视化</span><br>data = [&#123;<br>    <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;bar&#x27;</span>,<br>    <span class="hljs-string">&#x27;x&#x27;</span>: repo_links,<br>    <span class="hljs-string">&#x27;y&#x27;</span>: stars,<br>    <span class="hljs-string">&#x27;hovertext&#x27;</span>: labels, <br>    <span class="hljs-string">&#x27;marker&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;rgb(60, 100, 150)&#x27;</span>,<br>        <span class="hljs-string">&#x27;line&#x27;</span>: &#123;<span class="hljs-string">&#x27;width&#x27;</span>: <span class="hljs-number">1.5</span>, <span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;rgb(25, 25, 25)&#x27;</span>&#125;<br>    &#125;,<br>    <span class="hljs-string">&#x27;opacity&#x27;</span>: <span class="hljs-number">0.6</span>,<br>&#125;]<br>my_layout = &#123;<br>    <span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;GitHub上最受欢迎的Python项目&#x27;</span>,<br>    <span class="hljs-string">&#x27;xaxis&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;Repository&#x27;</span>,<br>        <span class="hljs-string">&#x27;titlefont&#x27;</span>: &#123;<span class="hljs-string">&#x27;size&#x27;</span>: <span class="hljs-number">24</span>&#125;,<br>        <span class="hljs-string">&#x27;tickfont&#x27;</span>: &#123;<span class="hljs-string">&#x27;size&#x27;</span>: <span class="hljs-number">14</span>&#125;,<br>    &#125;,<br>    <span class="hljs-string">&#x27;yaxis&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;Stars&#x27;</span>,<br>        <span class="hljs-string">&#x27;titlefont&#x27;</span>: &#123;<span class="hljs-string">&#x27;size&#x27;</span>: <span class="hljs-number">24</span>&#125;,<br>        <span class="hljs-string">&#x27;tickfont&#x27;</span>: &#123;<span class="hljs-string">&#x27;size&#x27;</span>: <span class="hljs-number">14</span>&#125;, <br>    &#125;,<br>&#125;<br><br>fig = &#123;<br>    <span class="hljs-string">&#x27;data&#x27;</span>: data,<br>    <span class="hljs-string">&#x27;layout&#x27;</span>: my_layout,<br>&#125;<br>offline.plot(fig, filename=<span class="hljs-string">&#x27;python_repos.html&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python学习笔记1</title>
    <link href="/2021/06/01/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/"/>
    <url>/2021/06/01/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</url>
    
    <content type="html"><![CDATA[<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">str</span>.title() <span class="hljs-comment">#首字母大写</span><br><span class="hljs-built_in">str</span>.upper() <span class="hljs-comment">#大写</span><br><span class="hljs-built_in">str</span>.lower() <span class="hljs-comment">#小写</span><br><br> <span class="hljs-comment">#f字符串(&quot;format&quot;)，字符串前加f，将要插入发变量放到&#123;&#125;里 （3.6之后）</span><br> first_name = <span class="hljs-string">&quot;aster&quot;</span><br> last_name = <span class="hljs-string">&quot;izayoi&quot;</span><br> print(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;first_name.title()&#125;</span><span class="hljs-subst">&#123;last_name.title()&#125;</span>&quot;</span>) <span class="hljs-comment">#IzayoiAster</span><br><br> <span class="hljs-comment">#删除空格 （strip：剥去，除去）</span><br> <span class="hljs-comment">#lstrip左空格 rstrip右 strip两侧</span><br> <span class="hljs-comment">#不改变原变量，若需要改变需要给原变量赋值</span><br> name = <span class="hljs-string">&quot;IzayoiAster   &quot;</span><br> print(name.strip()) <span class="hljs-comment">#IzayoiAster</span><br> print(name) <span class="hljs-comment">#IzayoiAster___</span><br></code></pre></td></tr></table></figure><h3 id="数"><a href="#数" class="headerlink" title="数"></a>数</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-number">3</span> ** <span class="hljs-number">2</span> <span class="hljs-comment">#乘方，9</span><br><br><span class="hljs-comment">#结果包含的小数位可能是不确定的</span><br><span class="hljs-comment">#将任意两个数相除时，结果总是浮点数，即使都是整数且能整除</span><br><br><span class="hljs-comment">#可以使用下划线将数字分组</span><br>age = <span class="hljs-number">114_514_1919_810</span><br>print(age) <span class="hljs-comment">#1145141919810</span><br><br><span class="hljs-comment">#同时给xyz赋值</span><br>x, y, z = <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py">eg = [<span class="hljs-string">&#x27;eg1&#x27;</span>, <span class="hljs-string">&#x27;eg2&#x27;</span>, <span class="hljs-string">&#x27;eg3&#x27;</span>]<br>eg[-<span class="hljs-number">1</span>] <span class="hljs-comment">#&#x27;eg3&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="列表加减"><a href="#列表加减" class="headerlink" title="列表加减"></a>列表加减</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py">eg.append(<span class="hljs-string">&#x27;eg4&#x27;</span>) <span class="hljs-comment">#[&#x27;eg1&#x27;, &#x27;eg2&#x27;, &#x27;eg3&#x27;, &#x27;eg4&#x27;]</span><br><span class="hljs-keyword">del</span> eg[<span class="hljs-number">1</span>] <span class="hljs-comment">#[&#x27;eg1&#x27;, &#x27;eg3&#x27;, &#x27;eg4&#x27;]</span><br>eg.insert(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;eg2&#x27;</span>) <span class="hljs-comment">#[&#x27;eg1&#x27;, &#x27;eg2&#x27;, &#x27;eg3&#x27;, &#x27;eg4&#x27;] (插入到第1位，原来的1及右边的，右移1)</span><br><br><span class="hljs-comment">#对比del，pop(id)可以在删除时获取值，若不加参数则为pop末尾元素</span><br>poped_eg = eg.pop() <span class="hljs-comment">#[&#x27;eg1&#x27;, &#x27;eg2&#x27;, &#x27;eg3&#x27;]</span><br><br><span class="hljs-comment">#remove: 根据值删除</span><br>eg.remove(<span class="hljs-string">&#x27;eg3&#x27;</span>) <span class="hljs-comment">#[&#x27;eg1&#x27;, &#x27;eg2&#x27;]</span><br><span class="hljs-comment">#注意：remove只删除 第一个 值，如果出现对此，需要循环remove</span><br></code></pre></td></tr></table></figure><h4 id="组织列表"><a href="#组织列表" class="headerlink" title="组织列表"></a>组织列表</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py">eg.sort() <span class="hljs-comment">#永久排序</span><br>eg.<span class="hljs-built_in">sorted</span>() <span class="hljs-comment">#临时（eg本身不变）</span><br>eg.reverse() <span class="hljs-comment">#永久倒序</span><br><br><span class="hljs-built_in">len</span>(eg) <span class="hljs-comment">#长度</span><br></code></pre></td></tr></table></figure><h4 id="创建数值列表"><a href="#创建数值列表" class="headerlink" title="创建数值列表"></a>创建数值列表</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>): <br><span class="hljs-comment">#range(a, b): [a, b)内的整数</span><br><br><span class="hljs-comment">#注意：range没有reverse成员函数，可以用list()先转为列表</span><br><br>even_nums = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">11</span>, <span class="hljs-number">2</span>)) <span class="hljs-comment">#第三个2 意为 步长为2</span><br>even_nums.reverse()<br>print(even_nums) <span class="hljs-comment">#[10, 8, 6, 4, 2]</span><br><br><span class="hljs-comment">#当然，上面的等价于这个</span><br>even_nums = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">2</span>))<br>print(even_nums) <span class="hljs-comment">#[10, 8, 6, 4, 2]</span><br><br><span class="hljs-comment">#列表统计</span><br><span class="hljs-built_in">min</span>(nums), <span class="hljs-built_in">max</span>(nums), <span class="hljs-built_in">sum</span>(nums)<br><br><span class="hljs-comment">#列表解析</span><br>square = [value ** <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">11</span>)]<br><span class="hljs-comment">#[表达式 为表达式提供值的循环]</span><br></code></pre></td></tr></table></figure><h4 id="使用列表的一部分"><a href="#使用列表的一部分" class="headerlink" title="使用列表的一部分"></a>使用列表的一部分</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#切片</span><br>eg = [<span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>]<br>eg[<span class="hljs-number">1</span> : <span class="hljs-number">3</span>] <span class="hljs-comment">#[&#x27;1&#x27;, &#x27;2&#x27;]，经典左开右闭</span><br>eg[ : <span class="hljs-number">3</span>] <span class="hljs-comment">#[&#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;]，从头开始</span><br>eg[<span class="hljs-number">3</span> : ] <span class="hljs-comment">#[&#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;]，直到最后</span><br>ed[-<span class="hljs-number">3</span> : ] <span class="hljs-comment">#[&#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;] </span><br><span class="hljs-comment">#切片可放在for里</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> eg[<span class="hljs-number">3</span> : ]:<br></code></pre></td></tr></table></figure><h5 id="赋值列表"><a href="#赋值列表" class="headerlink" title="赋值列表"></a>赋值列表</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py">eg1 = [......]<br>eg2 = eg1[:] <span class="hljs-comment">#eg2由eg1复制而来，修改eg1时，eg2不变</span><br><br><span class="hljs-comment">#注意区分 ↓</span><br>eg2 = eg1 <span class="hljs-comment">#可以理解成：eg2是指向eg1的一个“指针”，修改eg1时，eg2也改变</span><br></code></pre></td></tr></table></figure><h4 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h4><p>理解为不可变的列表即可</p><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">and</span>, <span class="hljs-keyword">or</span><br><br><span class="hljs-keyword">if</span> value <span class="hljs-keyword">in</span> nums:<br>    ... ...<br><span class="hljs-keyword">if</span> value <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> nums:<br>    ... ...<br><br><span class="hljs-keyword">if</span> - <span class="hljs-keyword">elif</span> - <span class="hljs-keyword">else</span><br>不强制有<span class="hljs-keyword">else</span>语句<br><br><span class="hljs-comment">#检查空列表</span><br>nums = [...]<br><span class="hljs-keyword">if</span> nums:<br>    ......<br><span class="hljs-keyword">else</span>:<br>    print(<span class="hljs-string">&quot;列表为空！&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><p>类比C++的<code>map</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs py">my_empty_dict = &#123;&#125; <span class="hljs-comment">#空字典</span><br>my_dict = &#123;<span class="hljs-string">&#x27;key1&#x27;</span>:<span class="hljs-string">&#x27;value1&#x27;</span>, <span class="hljs-string">&#x27;key2&#x27;</span>:<span class="hljs-string">&#x27;value2&#x27;</span>&#125;<br>print(my_dict) <span class="hljs-comment">#&#123;&#x27;key1&#x27;: &#x27;value1&#x27;, &#x27;key2&#x27;: &#x27;value2&#x27;&#125;</span><br><br><span class="hljs-comment">#添加键值对</span><br>my_dict[<span class="hljs-string">&#x27;key3&#x27;</span>] = <span class="hljs-string">&#x27;value3&#x27;</span><br>print(my_dict) <span class="hljs-comment">#&#123;&#x27;key1&#x27;: &#x27;value1&#x27;, &#x27;key2&#x27;: &#x27;value2&#x27;, &#x27;key3&#x27;: &#x27;value3&#x27;&#125;</span><br><span class="hljs-comment">#py3.7中，元素的排列顺序与定义时相同</span><br><br><span class="hljs-keyword">del</span> my_dict[<span class="hljs-string">&#x27;key3&#x27;</span>]<br><br>如果使用了 my_dict[<span class="hljs-string">&#x27;key4&#x27;</span>] 会报错，有需要的话可以用 my_dict.get(<span class="hljs-string">&#x27;key4&#x27;</span>)<br>会返回 No value assigned.<br>所以如果指定的key有可能不存在，应用get而不是[]<br></code></pre></td></tr></table></figure><h4 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#遍历键</span><br><span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> my_dict.items():<br><span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> my_dict.keys(): <span class="hljs-comment">#显式</span><br><span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> my_dict: <span class="hljs-comment">#隐式</span><br><span class="hljs-comment">#按序遍历键</span><br><span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> <span class="hljs-built_in">sorted</span>(my_dict.keys()):<br><br><span class="hljs-comment">#遍历值（有重复）</span><br><span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> my_dict.values():<br><span class="hljs-comment">#遍历值（去重！）</span><br><span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> my_dict.<span class="hljs-built_in">set</span>():<br></code></pre></td></tr></table></figure><p>列表和字典可以互相嵌套</p><h3 id="input"><a href="#input" class="headerlink" title="input"></a>input</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py">name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Input your name: &quot;</span>)<br>age = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Input your age: &quot;</span>))<br></code></pre></td></tr></table></figure><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><p>懂得都懂：<code>True, False, continue, break</code><br>例：在列表间移动元素</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">check</span>(<span class="hljs-params">data</span>):</span><br>    ...<br><br>unchecked_datas = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>checked_datas = []<br><br><span class="hljs-keyword">while</span> unchecked_datas:<br>    cur_data = unchecked_datas.pop()<br>    chekc(cur_data)<br>    check_data.append(cur_data)<br></code></pre></td></tr></table></figure><p>上文说过的 用remove删除全部重复元素：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">while</span> target <span class="hljs-keyword">in</span> list_:<br>    list_.remove(target)<br></code></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#关键字实参（不必有序）</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">my_func</span>(<span class="hljs-params">para2, para1</span>):</span><br>    ...<br><br>my_func(para1 = <span class="hljs-string">&#x27;para1&#x27;</span>, para2 = <span class="hljs-string">&#x27;para2&#x27;</span>)<br></code></pre></td></tr></table></figure><p>结合上文可知，传参为list时，<code>fun(list)</code>和<code>fun(list[:])</code>不同（略）</p><h4 id="传递任意数量的实参"><a href="#传递任意数量的实参" class="headerlink" title="传递任意数量的实参"></a>传递任意数量的实参</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># case 1</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">printNums</span>(<span class="hljs-params">*nums</span>):</span> <span class="hljs-comment">#创建了一个名为nums的元组</span><br>    <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> nums:<br>        ...<br><br>printNums(<span class="hljs-number">1</span>)<br>printNums(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br><br><span class="hljs-comment"># case 2</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">buildProfile</span>(<span class="hljs-params">first, last, **profile</span>):</span> <span class="hljs-comment">#名为profile的字典</span><br>    profile[<span class="hljs-string">&#x27;first_name&#x27;</span>] = first<br>    profile[<span class="hljs-string">&#x27;second_name&#x27;</span>] = second<br>    <span class="hljs-keyword">return</span> profile<br>    <span class="hljs-comment">#解释一下，必须提供名和姓，如果还有额外的属性，则也存进字典profile中，最后一并返回</span><br><br>user_profile = buildProfile(<span class="hljs-string">&#x27;Aster&#x27;</span>, <span class="hljs-string">&#x27;Izayoi&#x27;</span>, sister:<span class="hljs-string">&#x27;IzayoiLotus&#x27;</span>, age:<span class="hljs-string">&#x27;18&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="将函数存储在模块中"><a href="#将函数存储在模块中" class="headerlink" title="将函数存储在模块中"></a>将函数存储在模块中</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># ex.py</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">myFun</span>():</span><br>    ...<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># main.py</span><br><span class="hljs-keyword">import</span> ex<br><br>ex.myFun()<br></code></pre></td></tr></table></figure><p>ex.py即为一个模块；也可以从模块中导入特定函数：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> ex <span class="hljs-keyword">import</span> myFun<br><br>myFun()<br></code></pre></td></tr></table></figure><p>可以给模块或函数起别名，后加<code>as &lt;nickname&gt;</code>即可<br><code>from ex import *</code>：导入ex中的所有函数（不推荐）</p><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><h4 id="创建类"><a href="#创建类" class="headerlink" title="创建类"></a>创建类</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, age</span>):</span><br>        self.name = name<br>        self.age = age<br></code></pre></td></tr></table></figure><p><code>__init__</code>即构造函数，self类比C++ this</p><p>感觉OO语言都差不多，类这块儿也略着写了（逃）</p><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, age</span>):</span><br>        ...<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span>(<span class="hljs-params">Animal</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, age, <span class="hljs-built_in">type</span></span>):</span><br>        <span class="hljs-comment">#super()是其父类，可以理解成C++的 Animal::（？不确定）</span><br>        <span class="hljs-built_in">super</span>().__init__(name, age)<br>        self.<span class="hljs-built_in">type</span> = <span class="hljs-built_in">type</span><br></code></pre></td></tr></table></figure><h5 id="重写父类"><a href="#重写父类" class="headerlink" title="重写父类"></a>重写父类</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span>:</span><br>    ...<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">whatAnimal</span>():</span><br>        print(<span class="hljs-string">&quot;Unknown&quot;</span>)<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span>(<span class="hljs-params">Animal</span>):</span><br>    ...<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">whatAnimal</span>():</span> <span class="hljs-comment">#重写了</span><br>        print(<span class="hljs-string">&quot;I&#x27;m a dog!&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="将实例用作属性"><a href="#将实例用作属性" class="headerlink" title="将实例用作属性"></a>将实例用作属性</h4><blockquote><p>使用代码模拟实物时，可能会发现类的细节越来越多<br>这种情况下，可以将类的一部分提取出来，作为一个独立的类</p></blockquote><blockquote><p>例如，不断给ElectricCar类添加细节，可能发现很多和电瓶有关的属性和方法。这种情况下，可以将这些属性和方法提取出来，放到一个新的名为Battery的类中。<strong>并将一个Battery实例作为ElectricCar类的属性</strong></p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span>:</span><br>    ...<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Battery</span>:</span><br>    ...<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ElectricCar</span>(<span class="hljs-params">Car</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, model, year</span>):</span><br>        <span class="hljs-built_in">super</span>().__init__(model, year)<br>        self.battery = Battery() <span class="hljs-comment">#创建一个新的Battery实例，将其作为ECar类的属性</span><br></code></pre></td></tr></table></figure><h4 id="从模块中导入类"><a href="#从模块中导入类" class="headerlink" title="从模块中导入类"></a>从模块中导入类</h4><p>同函数<br>可导入多个类，用逗号分隔</p><h4 id="Py标准库"><a href="#Py标准库" class="headerlink" title="Py标准库"></a>Py标准库</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#eg</span><br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br>randint(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>) <span class="hljs-comment">#1，6间随机整数</span><br><br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> choice<br>members = [<span class="hljs-string">&#x27;Aster&#x27;</span>, <span class="hljs-string">&#x27;Lotus&#x27;</span>]<br>lucky_baby = choice(members) <span class="hljs-comment">#choice从元组或列表中随机选取一个元素</span><br></code></pre></td></tr></table></figure><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><p>只管打开文件就好，Python自会在合适的时候将其关闭</p><h4 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h4><blockquote><p>显示文件路径时，Windows使用反斜杠( \ )而不是斜杠( / )，但是在代码中依然可以使用斜杠( / )</p></blockquote><blockquote><p>读取文本文件时，Python全部是为字符串，如果要读取数值并使用，应使用 int( ) 或 float( )</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#eg</span><br>file_path = <span class="hljs-string">&#x27;/home/aster/test.txt&#x27;</span><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path) <span class="hljs-keyword">as</span> file_test:<br>    contents = file_test.read() <span class="hljs-comment">#read()可以读取文件的全部内容</span><br>    print(contents.rstrip())<br><br>    <span class="hljs-comment">#逐行读取</span><br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> file_test:<br>        print(line.rstrip())<br></code></pre></td></tr></table></figure><p>为什么上面两个print都要加<code>.rstrip()</code>：因为每行末尾都有隐含的换行符，如果再加上print的自动换行就会换两次行</p><p>使用关键字 <strong>with</strong> 时，<code>open()</code>返回的文件对象只在with代码块内可用。如果要在代码块之外访问文件，可以在with代码块内<strong>将文件的各行存储在一个列表里</strong><br><code>.readlines()</code>方法可以读取文件的每一行，并将他妈储存在一个列表里</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename) <span class="hljs-keyword">as</span> file_test:<br>    lines = file_test.readlines()<br><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>    print(line.rstrip()) <span class="hljs-comment">#在with代码块之外也可以使用啦</span><br></code></pre></td></tr></table></figure><p>例：圆周率里包含你的生日吗？</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(pi.txt) <span class="hljs-keyword">as</span> pi:<br>    lines = pi.readlines()<br><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>    pi_string += line.strip() <span class="hljs-comment">#将pi的每一行组成一串pi字符串</span><br><br>birthday = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Please input your birthday: &quot;</span>)<br><span class="hljs-keyword">if</span> birthday <span class="hljs-keyword">in</span> pi_string:<br>    print(<span class="hljs-string">&quot;Including!&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="文件写入"><a href="#文件写入" class="headerlink" title="文件写入"></a>文件写入</h4><p>写入使用<code>.write()</code></p><h5 id="open-的参数"><a href="#open-的参数" class="headerlink" title="open( )的参数"></a>open( )的参数</h5><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>空</td><td>默认只读</td></tr><tr><td>r</td><td>读取模式</td></tr><tr><td>w</td><td>写入模式</td></tr><tr><td>a</td><td>附加模式</td></tr><tr><td>r+</td><td>读写模式</td></tr></tbody></table><blockquote><p>  Python只能将字符串写入文本文件中，存储数值时，必须先用 str( ) 转为字符串</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> file_test:<br>    file_test.write(<span class="hljs-string">&quot;write不会自动换行\n&quot;</span>)<br>    file_test.write(<span class="hljs-string">&quot;所以不要忘了手动添加换行符哦\n&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="分析文本"><a href="#分析文本" class="headerlink" title="分析文本"></a>分析文本</h4><p>方法<code>spilt()</code>以空格为分隔符将字符串拆分，并将拆开的每一部分存储到一个列表中</p><h4 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h4><p>使用了JSON (JavaScript Object Notation)</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py">json.dump(data_list, target_file)  <span class="hljs-comment"># json存储，dump(数据列表, 目标文件)</span><br>json.load(data_list, target_file)  <span class="hljs-comment"># json读取，load(目标数据列表, 被读取的文件)</span><br></code></pre></td></tr></table></figure><p>不是很好说，直接看例子吧</p><p>例：编写一个程序，在用户首次运行程序时，提示输入自己的名字，并在再次运行程序的时候记住他</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 1.remember_user.py</span><br><span class="hljs-keyword">import</span> json<br><br>username = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;What&#x27;s your name? &quot;</span>)<br><br>filename = <span class="hljs-string">&#x27;username.json&#x27;</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    json.dump(username, f)<br>    print(<span class="hljs-string">f&quot;We&#x27;ll remember you when you come back, <span class="hljs-subst">&#123;username&#125;</span>!&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 2.greet_user.py</span><br><span class="hljs-keyword">import</span> json<br><br>filename = <span class="hljs-string">&#x27;username.json&#x27;</span><br><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename) <span class="hljs-keyword">as</span> f:<br>        username = json.load(f)<br><span class="hljs-keyword">except</span> FileNotFoundError: <span class="hljs-comment"># 以前并未存储用户名</span><br>    username = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;What is your name?&quot;</span>)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        json.dump(username, f) <br>        print(<span class="hljs-string">f&quot;We&#x27;ll remember you when you come back, <span class="hljs-subst">&#123;username&#125;</span>!&quot;</span>)<br><span class="hljs-keyword">else</span>: <span class="hljs-comment"># 若存储过用户名，会在try中打开了json并导入</span><br>    print(<span class="hljs-string">f&quot;Welcome back, <span class="hljs-subst">&#123;username&#125;</span>!&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="一些报错"><a href="#一些报错" class="headerlink" title="一些报错"></a>一些报错</h3><p>若报错<code>SyntaxError: Non-UTF-8 code starting with &#39;\xc8&#39; in file</code>，可能是因为xxxx.py文件里面有中文字符<br>解决方案：开头加上</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># -!- coding: utf-8 -!-</span><br></code></pre></td></tr></table></figure><p>若报错<code>(unicode error) &#39;utf-8&#39; codec can&#39;t decode byte 0xb7 in position xxx</code><br>解决方案：把编译环境的编码切换为UTF-8</p><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>（P174 有需求再看）</p>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hadoop学习笔记2</title>
    <link href="/2021/04/15/Hadoop%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/"/>
    <url>/2021/04/15/Hadoop%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</url>
    
    <content type="html"><![CDATA[<h4 id="客户端代码常见套路"><a href="#客户端代码常见套路" class="headerlink" title="客户端代码常见套路"></a>客户端代码常见套路</h4><p>1.获取一个客户端对象<br>2.执行相关的操作命令<br>3.关闭资源<br>eg: HDFS ZooKeeper</p><h4 id="IDEA技巧"><a href="#IDEA技巧" class="headerlink" title="IDEA技巧"></a>IDEA技巧</h4><p>抛异常：光标放上去后<code>Alt + Enter，↑↓</code><br>提示函数参数：<code>Ctrl + P</code><br>全部格式化：<code>Ctrl + Alt + L</code><br>变量变为属性（全局变量）：<code>Ctrl + Alt + F</code></p><h3 id="slf4j报错"><a href="#slf4j报错" class="headerlink" title="slf4j报错"></a>slf4j报错</h3><p>（未知解决方案）</p>]]></content>
    
    
    
    <tags>
      
      <tag>Hadoop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VSCode快捷编译</title>
    <link href="/2021/03/21/VSCode%E5%BF%AB%E6%8D%B7%E7%BC%96%E8%AF%91/"/>
    <url>/2021/03/21/VSCode%E5%BF%AB%E6%8D%B7%E7%BC%96%E8%AF%91/</url>
    
    <content type="html"><![CDATA[<p>之前用VSCode的时候，为了编译C++还配置了半天。一个寒假过去不知道咋回事，配置不好使了。<br>正打算再配置一遍，突然发现一个懒狗插件——<code>Code Runner</code></p><p><a href="https://zhuanlan.zhihu.com/p/54861567">贴一个原地址</a></p><p><strong>运行：</strong> Ctrl + Alt + N<br><strong>中止运行：</strong> Ctrl + Alt + M<br><strong>解决乱码 &amp; 输入：</strong><br>选择 文件 -&gt; 首选项 -&gt; 设置，打开VS Code设置页面，找到 Run Code configuration，勾上 Run In Terminal 选项。设置之后，代码就会在 Terminal 中运行了。<br><img src="https://pic4.zhimg.com/80/v2-f893e1b487feee43b5903c9cf2781ffb_720w.jpg"></p>]]></content>
    
    
    
    <tags>
      
      <tag>技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法课一</title>
    <link href="/2021/03/18/%E7%AE%97%E6%B3%95%E8%AF%BE%E4%B8%80/"/>
    <url>/2021/03/18/%E7%AE%97%E6%B3%95%E8%AF%BE%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<h4 id="鸽子数"><a href="#鸽子数" class="headerlink" title="鸽子数"></a>鸽子数</h4><blockquote><p>鸽子数由以下过程定义：从任何正整数开始，将数字替换为其各个数位的平方和，并重复该过程，直到该数字等于1。如果不能，则这个数字不是鸽子数。<br>例如7是鸽子数，因为7-&gt;49-&gt;97-&gt;130-&gt;10-&gt;1。（7<em>7=49,4</em>4+9<em>9=97,9</em>9+7*7=130….如此类推）<br>显然1是第一个鸽子数。<br>有Q个询问，每个询问给出一个数k，你需要输出第k个鸽子数。<br>Input<br>第一行一个Q，代表询问的个数（Q&lt;=100000）<br>接下来Q行，每行一个数字k（k&lt;150000）<br>Output<br>每行输出一个数，代表第k个鸽子数</p></blockquote><p>首先算了个6，发现会循环：</p><blockquote><p>6 36 117 51 26 40 16 37 56 61</p></blockquote><p>题目中的这个鸽子数就是自身每一位的数字平方相加，一直循环，看看会不会等于1，为1的就是鸽子数。其实基本的方法就是直接打表，然后直接找第k个鸽子数，我的想法也差不多。<br>k的数据范围是150000，那么我们可以让数字的范围开到2000000，可以说在1~2000000（我才没有打表证明）里一定找得到150000个鸽子数，然后1—2000000里每个位数的平方的和最大是为487，也就是1999999的时候，然后我们只要把487以内包括487的所有的鸽子数都标记起来就行，因为每个位数平方和不管怎么循环相加都不可能超过487了都是在487以内，也就是说487之后的数字判断是不是鸽子数只需要算一次各个位数的平方和再放到1—487里去找，如果找到了那这个数也是鸽子数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">int</span> a[<span class="hljs-number">500</span>], b[<span class="hljs-number">500005</span>];<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">memset</span>(a, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(a));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">487</span>; i++)&#123; <span class="hljs-comment">//找487以内的鸽子数</span><br>    <span class="hljs-keyword">int</span> n = i, m, l = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">1000</span>; j++)&#123; <span class="hljs-comment">//这个是各个位数之和，然后循环</span><br>    m = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(n)&#123;<br>    m += (n % <span class="hljs-number">10</span>) * (n % <span class="hljs-number">10</span>);<br>    n /= <span class="hljs-number">10</span>;<br>    &#125;<br>    n = m;<br>    <span class="hljs-keyword">if</span>(m == <span class="hljs-number">1</span>)&#123; <span class="hljs-comment">//和为1就标记是鸽子数</span><br>    a[i] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">int</span> ans = <span class="hljs-number">1</span>; <span class="hljs-comment">//用来标记为第几个</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">500000</span>; i++)&#123; <span class="hljs-comment">//找500000内的鸽子数，将每一个鸽子数是第几个存好</span><br><span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>, z = i;<br><span class="hljs-keyword">while</span>(z)&#123;<br>sum += (z % <span class="hljs-number">10</span>) * (z % <span class="hljs-number">10</span>);<br>z /= <span class="hljs-number">10</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(a[sum] == <span class="hljs-number">1</span>)&#123; <span class="hljs-comment">//一次的各个位数的平方和在487内找，是就标记是第几个</span><br>   b[ans++] = i;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">int</span> q, k;<br><span class="hljs-built_in">cin</span> &gt;&gt; q;<br><span class="hljs-keyword">while</span>(q--)&#123;<br><span class="hljs-built_in">cin</span> &gt;&gt; k;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; b[k] &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="Swiches-and-lamps"><a href="#Swiches-and-lamps" class="headerlink" title="Swiches and lamps"></a>Swiches and lamps</h4><blockquote><p>有n个开关和m盏灯，对于一盏灯，只要存在一个控制这个灯的开关是开着的，这个灯就会被点亮。然后给你n×mn×m的01矩阵，如果ii行jj列为1代表开关ii可以控制灯jj，问你能否删掉一个开关，使得所有的灯仍旧能被点亮。</p></blockquote><p>对于每一求和，如果对于某一行，如果去掉某一行后这一列的和会变成0，说明会有灯不受控制，这一行就不能删掉</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> maxn 2016</span><br><span class="hljs-keyword">int</span> <span class="hljs-built_in">map</span>[maxn][maxn], sum[maxn], n, m;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%1d&quot;</span>, <span class="hljs-built_in">map</span>[i] + j);<br>        sum[j] += <span class="hljs-built_in">map</span>[i][j];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, j; i &lt;= n; i++)&#123;<br>        <span class="hljs-keyword">for</span>(j = <span class="hljs-number">1</span>; j &lt;= m; j++)<br>            <span class="hljs-keyword">if</span>(sum[j] - <span class="hljs-built_in">map</span>[i][j] == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">if</span>(j &gt; m) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span> * <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;YES&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span> * <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;NO&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="权力指数"><a href="#权力指数" class="headerlink" title="权力指数"></a>权力指数</h4><blockquote><p>在选举问题中，总共有n个小团体，每个小团体拥有一定数量的选票数。如果其中m个小团体的票数和超过总票数的一半，则此组合为“获胜联盟”。n个团体可形成若干个获胜联盟。一个小团体要成为一个“关键加入者”的条件是：在其所在的获胜联盟中，如果缺少了这个小团体的加入，则此联盟不能成为获胜联盟。一个小团体的权利指数是指：一个小团体在所有获胜联盟中成为“关键加入者”的次数。请你计算每个小团体的权利指数。<br>Input<br>输入数据的第一行为一个正整数T，表示有T组测试数据。每一组测试数据的第一行为一个正整数n（0&lt;n&lt;=20）。第二行有n个正整数，分别表示1到n号小团体的票数。<br>Output<br>对每组测试数据，在同一个行按顺序输出1到n号小团体的权利指数。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">int</span> n, t, s, a[<span class="hljs-number">21</span>], ans[<span class="hljs-number">21</span>], flag[<span class="hljs-number">21</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; t;<br>    <span class="hljs-keyword">while</span>(t--)&#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; n;<br>        s = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; a[i];<br>            s += a[i];<br>        &#125;<br>        <span class="hljs-built_in">memset</span>(ans, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(ans));<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; (<span class="hljs-number">1</span>&lt;&lt;n); i++)&#123;<br>            <span class="hljs-keyword">int</span> tmp = <span class="hljs-number">0</span>;<br>            <span class="hljs-built_in">memset</span>(flag, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(flag));<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123;<br>                <span class="hljs-keyword">if</span>(i &amp; (<span class="hljs-number">1</span>&lt;&lt;j))&#123;<br>                    tmp += a[j];<span class="hljs-comment">//m个团体的总票数</span><br>                    flag[j] = <span class="hljs-number">1</span>;<span class="hljs-comment">//加一个tmp就标记一下</span><br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(tmp &lt;= s / <span class="hljs-number">2</span>)<span class="hljs-comment">//少一个团体就当不上</span><br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)<br>                    <span class="hljs-keyword">if</span>(tmp + a[j] &gt; s/<span class="hljs-number">2</span> &amp;&amp; flag[j] == <span class="hljs-number">0</span>)<span class="hljs-comment">//加上某个团体就当上了，然后当的代码就是flag没有标记的</span><br>                        ans[j]++;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n<span class="hljs-number">-2</span>; i++)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,ans[i]);<span class="hljs-comment">//输出格式</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans[n - <span class="hljs-number">1</span>]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于“SSH服务器拒绝了密码”</title>
    <link href="/2021/03/15/%E5%85%B3%E4%BA%8ESSH%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8B%92%E7%BB%9D%E4%BA%86%E5%AF%86%E7%A0%81/"/>
    <url>/2021/03/15/%E5%85%B3%E4%BA%8ESSH%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8B%92%E7%BB%9D%E4%BA%86%E5%AF%86%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>今天跟着学Hadoop，Xshell硬是连不上，搜到一个百度经验笑死我了——</p><blockquote><p>…（前面一堆指令）<br>5/7<br>如果走到这一步你发现你的配置并没有哪里错了那么我们就是道友了。。。<br>回到Xshell找到你的虚拟机右键进入属性<br>6/7<br>把大写用户名改成小写，确定<br>7/7<br>连接上了。。。</p></blockquote><p>没想到有人和我一样傻哈哈哈</p>]]></content>
    
    
    
    <tags>
      
      <tag>Hadoop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hadoop学习笔记1</title>
    <link href="/2021/03/14/Hadoop%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/"/>
    <url>/2021/03/14/Hadoop%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</url>
    
    <content type="html"><![CDATA[<p>Hadoop分为<strong>存储</strong>和<strong>计算</strong></p><ul><li>存储：HDFS</li><li>计算：MapReduce</li></ul><h4 id="HDFS文件系统"><a href="#HDFS文件系统" class="headerlink" title="HDFS文件系统"></a>HDFS文件系统</h4><p>HDFS（Hadoop Distributed File System, Hadoop分布式文件系统）<br><strong>NameNode → 多个DataNodes</strong></p><ul><li>NameNode: 文件在哪</li><li>DataNodes: 存数据</li><li>2NN: 负责备份NN</li></ul><h4 id="Yarn架构"><a href="#Yarn架构" class="headerlink" title="Yarn架构"></a>Yarn架构</h4><p>YARN （Yet Another Resource Negotiator，另一种资源协调者）<br><strong>client → RM → NMs</strong></p><ul><li>ResourceManager(RM) : 整个集群资源（CPU, RAM）等的老大</li><li>NodeManager(NM) : 单个节点服务器的老大</li><li>单个节点服务器能虚拟出多个儿子，每个儿子相当于一个小电脑（服务器），称为Container容器，内含ApplicationManager(AM) : 单个任务的老大</li></ul><p><img src="./Hadoop%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/01.jpg"></p><h4 id="克隆虚拟机"><a href="#克隆虚拟机" class="headerlink" title="克隆虚拟机"></a>克隆虚拟机</h4><p>右键移除并不会真正删掉，可以通过原位置的vmx导入<br>右键管理从磁盘删除才是删掉</p><p>克隆之后，如下操作（直接用root用户登录更方便）：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/</span>sysconfig<span class="hljs-regexp">/network-scripts/i</span>fcfg-ens33<br>vim <span class="hljs-regexp">/etc/</span>hostname<br>reboot<br></code></pre></td></tr></table></figure><p>重启后进行检查</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ifconfig<br>ping www<span class="hljs-selector-class">.baidu</span>.com<br>hostname<br></code></pre></td></tr></table></figure><p>再在Xshell里导入，并输<code>hostname</code>再次检查</p><h4 id="安装JDK-Hadoop"><a href="#安装JDK-Hadoop" class="headerlink" title="安装JDK Hadoop"></a>安装JDK Hadoop</h4><p>（已经在hadoop100执行了<code>rpm -qa | grep -i java | xargs -n1 rpm -e --nodeps</code>）<br>一般在102安装即可<br>p.s.教程里写的是<br><code>tar -zxvf hadoop-3.1.3.tar.gz -C /opt/module/ </code><br>但是我在操作阿里云的服务器时，不知道为什么总是报错“无法open：没有那个文件或目录”，貌似是它不识别根目录/，用了相对路径之后就好使了。神秘<br>另外，提前cd到module也可以这样：<br><code>tar -zxvf ../software/hadoop-3.1.3.tar.gz</code></p><p>哦哦哦我知道了：</p><blockquote><p>/是文件系统的根目录，/root是超级用户root用户的个人目录<br>我一开始登的时候，是在root下了，还以为是根目录，各种操作也没加/  ……</p></blockquote><h4 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h4><ul><li>Xshell双击标签就能再开一个新的</li><li>Ctrl + L可以控制台换一页</li><li>Tab可以控制台智能补全， 也可以查看当前目录文件列表</li><li><code>ssh hostname</code>，<code>exit</code>退出</li><li>查公网IP：<code>curl httpbin.org/ip </code></li></ul><h4 id="配置完全分布"><a href="#配置完全分布" class="headerlink" title="配置完全分布"></a>配置完全分布</h4><p>scp / rsync / xsync</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">存一下xsync脚本</span><br><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br><span class="hljs-meta">#</span><span class="bash">1. 判断参数个数</span><br>if [ $# -lt 1 ]<br>then<br>    echo Not Enough Arguement!<br>    exit;<br>fi<br><br><span class="hljs-meta">#</span><span class="bash">2. 遍历集群所有机器</span><br>for host in hadoop102 hadoop103 hadoop104<br>do<br>    echo ==================== $host ====================<br>    #3. 遍历所有目录，挨个发送<br>    for file in $@<br>    do<br>        #4. 判断文件是否存在<br>        if [ -e $file ]<br>        then<br>            #5. 获取父目录 -P取消软链接<br>            pdir=$(cd -P $(dirname $file); pwd)<br>            #6. 获取当前文件的名称<br>            fname=$(basename $file)<br>            #7. -p无视是否已经存在<br>            ssh $host &quot;mkdir -p $pdir&quot;<br>            rsync -av $pdir/$fname $host:$pdir<br>        else<br>            echo $file does not exists!<br>        fi<br>    done<br>done<br></code></pre></td></tr></table></figure><h4 id="配置集群"><a href="#配置集群" class="headerlink" title="配置集群"></a>配置集群</h4><p>core-site.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 指定 NameNode 的地址 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>fs.defaultFS<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hdfs://hadoop102:8020<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 指定 hadoop 数据的存储目录 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hadoop.tmp.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>/opt/module/hadoop-3.1.3/data<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 配置 HDFS 网页登录使用的静态用户为 izayoiaster --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hadoop.http.staticuser.user<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>izayoiaster<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>hdfs-site.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- nn web 端访问地址--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.http-address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hadoop102:9870<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 2nn web 端访问地址--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hadoop104:9868<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>yarn-site.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 指定 MR 走 shuffle --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>mapreduce_shuffle<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 指定 ResourceManager 的地址--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hadoop103<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 环境变量的继承 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 尚硅谷的3.1说，这个是3.1的bug，3.2以上的不用写环境变量 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.env-whitelist<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>JAVA_HOME,HADOOP_COMMON_HOME,HADOOP_HDFS_HOME,HADOOP_CONF_DIR,CLASSPATH_PREPEND_DISTCACHE,HADOOP_YARN_HOME,HADOOP_MAPRED_HOME<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>mapred-site.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 指定 MapReduce 程序运行在 Yarn 上 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.framework.name<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>yarn<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>最后别忘了同步一下<br><code>xsync /opt/module/hadoop3.1.3/etc/hadoop/</code><br>然后在103 104检查一下<br><code>cat /opt/module/hadoop3.1.3/etc/hadoop/core-site.xml </code></p><h4 id="配置历史服务器"><a href="#配置历史服务器" class="headerlink" title="配置历史服务器"></a>配置历史服务器</h4><p>mapred-site.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 历史服务器内部地址 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hadoop102:10020<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 历史服务器 web 端地址 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hadoop102:19888<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>以及 同步一下<br>（在102）启动历史服务器</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada">mapred <span class="hljs-comment">--daemon start historyserver</span><br>虽然尚硅谷的pdf这么写的，但貌似有时候需要定位到hadoop的bin目录下才行……<br>（虽然那次我是不小心在<span class="hljs-number">103</span>启动了）<br></code></pre></td></tr></table></figure><blockquote><p><em>Daemon是守护神的意思哦</em></p></blockquote><h4 id="配置日志聚集"><a href="#配置日志聚集" class="headerlink" title="配置日志聚集"></a>配置日志聚集</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 开启日志聚集功能 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.log-aggregation-enable<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 设置日志聚集服务器地址 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.log.server.url<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>http://hadoop102:19888/jobhistory/logs<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 设置日志保留时间为 7 天 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.log-aggregation.retain-seconds<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>604800<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="集群启停脚本"><a href="#集群启停脚本" class="headerlink" title="集群启停脚本"></a>集群启停脚本</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br>if [ $# -lt 1 ]<br>then<br>    echo &quot;No Args Input...&quot;<br>    exit ;<br>fi<br>case $1 in<br>&quot;start&quot;)<br>    echo &quot; =================== 启动 hadoop 集群 ===================&quot;<br>    echo &quot; --------------- 启动 hdfs ---------------&quot;<br>    ssh hadoop102 &quot;/opt/module/hadoop-3.1.3/sbin/start-dfs.sh&quot;<br>    echo &quot; --------------- 启动 yarn ---------------&quot;<br>    ssh hadoop103 &quot;/opt/module/hadoop-3.1.3/sbin/start-yarn.sh&quot;<br>    echo &quot; --------------- 启动 historyserver ---------------&quot;<br>    ssh hadoop102 &quot;/opt/module/hadoop-3.1.3/bin/mapred --daemon start historyserver&quot;<br>;;<br>&quot;stop&quot;)<br>    echo &quot; =================== 关闭 hadoop 集群 ===================&quot;<br>    echo &quot; --------------- 关闭 historyserver ---------------&quot;<br>    ssh hadoop102 &quot;/opt/module/hadoop-3.1.3/bin/mapred --daemon stop historyserver&quot;<br>    echo &quot; --------------- 关闭 yarn ---------------&quot;<br>    ssh hadoop103 &quot;/opt/module/hadoop-3.1.3/sbin/stop-yarn.sh&quot;<br>    echo &quot; --------------- 关闭 hdfs ---------------&quot;<br>    ssh hadoop102 &quot;/opt/module/hadoop-3.1.3/sbin/stop-dfs.sh&quot;<br>;;<br>*)<br>    echo &quot;Input Args Error...&quot;<br>;;<br>esac<br></code></pre></td></tr></table></figure><h4 id="jpsall"><a href="#jpsall" class="headerlink" title="jpsall"></a>jpsall</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br>for host in hadoop102 hadoop103 hadoop104<br>do<br>    echo =============== $host ===============<br>    ssh $host jps<br>done<br></code></pre></td></tr></table></figure><h4 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h4><h5 id="误删除用户文件"><a href="#误删除用户文件" class="headerlink" title="误删除用户文件"></a>误删除用户文件</h5><p>比如我就不小心删掉了给我的那台服务器的/root里的所有东西（我真憨憨），重启之后没有那个[xxx@xxx]，变成bash了，那就输入这个：<br><code>-bash-4.2# cp -a /etc/skel/. /root</code><br>（<code>-a</code>是含隐藏文件，<code>/etc/skel/</code>是保命数据，后面的<code>.</code>别忘了，空格后接误删的目录，比如<code>/home/izayoiaster</code>）<br>弄好了可以<code>ls -a</code>检查一下，看看多没多几个bash，之后reboot一下就行了<br>（这都能弄好，牛逼）</p><h5 id="Hadoop找不到Java"><a href="#Hadoop找不到Java" class="headerlink" title="Hadoop找不到Java"></a>Hadoop找不到Java</h5><p>比如在给我的那台服务器上，照着教程配置好之后hadoop会报错：<br><code>ERROR: JAVA_HOME /opt/jdk/jdk1.8.0_144 does not exist.</code><br>照着网上，手动配置了一下hadoop-3.1.3/etc/hadoop/hadoop-env.sh，加了一句<br><code>export JAVA_HOME=/opt/module/jdk1.8.0_212</code><br>就好使啦！</p><h5 id="启动hadoop时报错"><a href="#启动hadoop时报错" class="headerlink" title="启动hadoop时报错"></a>启动hadoop时报错</h5><h6 id="case-1"><a href="#case-1" class="headerlink" title="case 1"></a>case 1</h6><p><code>nodemanager is running as process xxxx. Stop it first.</code><br>先stop-all.sh下，然后再start</p><h6 id="case-2"><a href="#case-2" class="headerlink" title="case 2"></a>case 2</h6><p><code>Hadoop ERROR: but there is no HDFS_NAMENODE_USER defined. Aborting operation. Starting datanodes</code><br>使用root配置的hadoop并启动会出现报错</p><p>方法：</p><p>1、对于start-dfs.sh和stop-dfs.sh文件，添加下列参数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/usr/bin/env bash</span><br>HDFS_DATANODE_USER=root<br>HADOOP_SECURE_DN_USER=hdfs<br>HDFS_NAMENODE_USER=root<br>HDFS_SECONDARYNAMENODE_USER=root<br></code></pre></td></tr></table></figure><p>2、对于start-yarn.sh和stop-yarn.sh文件，添加下列参数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/usr/bin/env bash</span><br>YARN_RESOURCEMANAGER_USER=root<br>HADOOP_SECURE_DN_USER=yarn<br>YARN_NODEMANAGER_USER=root<br></code></pre></td></tr></table></figure><h5 id="无法访问Hadoop"><a href="#无法访问Hadoop" class="headerlink" title="无法访问Hadoop"></a>无法访问Hadoop</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 如果是通过公网IP访问阿里云上内网搭建的集群 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.client.use.datanode.hostname<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>only cofig in clients<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Hadoop</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
